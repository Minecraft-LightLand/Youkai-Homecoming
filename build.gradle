import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
    id 'net.darkhax.curseforgegradle' version '[1.1.24,)'
    id "at.stnwtr.gradle-secrets-plugin" version "1.0.1"
    id "com.modrinth.minotaur" version "2.+"
}

version = mod_version
group = 'dev.kxmc'

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java {
    withSourcesJar()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${mod_id}.mixins.json"
        ])
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { // Registrate
        url "https://maven.ithundxr.dev/snapshots"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }

    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
    mavenLocal();
}

if (lljij.toBoolean()) {

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }

    jar {
        archiveClassifier.set('slim')
    }

}

dependencies {

    implementation "com.tterrag.registrate:Registrate:${registrate_version}"

    implementation "dev.xkmc:l2serial:${l2serial_ver}"
    implementation "dev.xkmc:l2modularblocks:${l2modularblocks_ver}"
    implementation "dev.xkmc:l2library:${l2library_ver}"
    implementation "dev.xkmc:l2itemselector:${l2itemselector_ver}"

    implementation jarJar(group: 'dev.xkmc', name: 'l2core', version: "[${l2core_ver},)")
    implementation jarJar(group: 'dev.xkmc', name: 'fast_projectile_api', version: "[${fast_projectile_api_ver},)")
    implementation jarJar(group: 'dev.xkmc', name: 'l2damagetracker', version: "[${l2damagetracker_ver},)")

    implementation "dev.xkmc:danmaku_api:${danmaku_api_ver}"

    implementation "mezz.jei:jei-${jei_minecraft_version}:${jei_version}"

    implementation "curse.maven:farmers-delight-398521:5566383"
    implementation "curse.maven:better-advancements-272515:5511371"
    implementation "dev.xkmc:cuisinedelight:1.2.1-slim"
    implementation "dev.xkmc:fruitsdelight:${fruitsdelight_ver}"

    implementation "curse.maven:thirst-was-taken-679270:5568715"
}


tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = secrets.get("curseforge_token")
    def mainFile = upload(project.curseforge_project, new File("./build/libs/${mod_id}-${mod_version}.jar"))
    mainFile.changelog = new File('./changelog.txt')
    mainFile.addEnvironment("Client", "Server")
    mainFile.addGameVersion("1.21.1")
    mainFile.addModLoader("NeoForge")
    mainFile.addRequirement("farmers-delight")
    mainFile.addOptional(
            "delightful",
            "diet",
            "fruits-delight",
            "serene-seasons",
            "thirst-was-taken",
            "touhou-little-maid")
    mainFile.releaseType = "release"
    disableVersionDetection()
}

modrinth {
    token = secrets.get("modrinth_token")
    projectId = project.modrinth_project
    versionName = "Youkai's Homecoming ${project.mod_version}"
    versionNumber = project.mod_version
    versionType = "release"
    uploadFile = new File("./build/libs/${mod_id}-${mod_version}.jar")
    gameVersions = ["1.21.1"]
    loaders = ["neoforge"]
    changelog = new File('./changelog.txt').text.split("\n\n")[0]
    dependencies {
        required.project "farmers-delight"
        optional.project "fruits-delight"
        optional.project "diet"
        optional.project "delightful"
        optional.project "touhou-little-maid"
        optional.project "thirst-was-taken"
        optional.project "serene-seasons"
    }
}
