Index: src/main/java/dev/xkmc/youkaishomecoming/compat/create/CreateRecipeGen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/create/CreateRecipeGen.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/create/CreateRecipeGen.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/compat/create/CreateRecipeGen.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/create/CreateRecipeGen.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -9,8 +9,8 @@
 import com.simibubi.create.foundation.fluid.FluidIngredient;
 import com.tterrag.registrate.providers.RegistrateRecipeProvider;
 import dev.xkmc.l2library.serial.recipe.ConditionalRecipeWrapper;
-import dev.xkmc.youkaishomecoming.content.item.fluid.IYHSake;
-import dev.xkmc.youkaishomecoming.init.food.YHSake;
+import dev.xkmc.youkaishomecoming.content.item.fluid.IYHFluidHolder;
+import dev.xkmc.youkaishomecoming.init.food.YHDrink;
 import dev.xkmc.youkaishomecoming.init.registrate.YHItems;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -18,14 +18,14 @@
 public class CreateRecipeGen {
 
 	public static void onRecipeGen(RegistrateRecipeProvider pvd) {
-		for (var e : YHSake.values()) {
+		for (var e : YHDrink.values()) {
 			bottles(pvd, e);
 		}
 		bottles(pvd, YHItems.SOY_SAUCE_BOTTLE);
 		bottles(pvd, YHItems.BLOOD_BOTTLE);
 	}
 
-	private static void bottles(RegistrateRecipeProvider pvd, IYHSake sake) {
+	private static void bottles(RegistrateRecipeProvider pvd, IYHFluidHolder sake) {
 		filling(sake.item().getId())
 				.withFluidIngredients(FluidIngredient.fromFluid(sake.fluid().get(), sake.amount()))
 				.withItemIngredients(Ingredient.of(sake.getContainer()))
Index: src/main/java/dev/xkmc/youkaishomecoming/compat/jei/FermentRecipeCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/FermentRecipeCategory.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/FermentRecipeCategory.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/FermentRecipeCategory.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/FermentRecipeCategory.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,7 +1,7 @@
 package dev.xkmc.youkaishomecoming.compat.jei;
 
 import dev.xkmc.l2library.serial.recipe.BaseRecipeCategory;
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluid;
+import dev.xkmc.youkaishomecoming.content.item.fluid.YHFluid;
 import dev.xkmc.youkaishomecoming.content.pot.ferment.SimpleFermentationRecipe;
 import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
 import dev.xkmc.youkaishomecoming.init.data.YHLangData;
@@ -60,7 +60,7 @@
 		if (!recipe.outputFluid.isEmpty()) {
 			int y = n / 3 * 18 + 1;
 			int x = n % 3 * 18 + 91;
-			if (recipe.outputFluid.getFluid() instanceof SakeFluid sake) {
+			if (recipe.outputFluid.getFluid() instanceof YHFluid sake) {
 				builder.addSlot(RecipeIngredientRole.OUTPUT, x, y).addItemStack(sake.type.asStack(sake.type.count()));
 				builder.addSlot(RecipeIngredientRole.INPUT, 64, 1).addItemStack(new ItemStack(sake.type.getContainer(), sake.type.count()));
 			} else {
Index: src/main/java/dev/xkmc/youkaishomecoming/compat/jei/SteamingCategory.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/SteamingCategory.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/SteamingCategory.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/SteamingCategory.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,33 @@
+package dev.xkmc.youkaishomecoming.compat.jei;
+
+import dev.xkmc.youkaishomecoming.content.pot.steamer.SteamingRecipe;
+import dev.xkmc.youkaishomecoming.init.data.YHLangData;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import mezz.jei.api.gui.builder.IRecipeLayoutBuilder;
+import mezz.jei.api.gui.widgets.IRecipeExtrasBuilder;
+import mezz.jei.api.helpers.IGuiHelper;
+import mezz.jei.api.recipe.IFocusGroup;
+import mezz.jei.api.recipe.RecipeIngredientRole;
+import net.minecraft.client.Minecraft;
+
+public class SteamingCategory extends AbstractCookingCategory<SteamingRecipe> {
+
+	public SteamingCategory(IGuiHelper guiHelper) {
+		super(guiHelper, YHJeiPlugin.STEAM, YHBlocks.STEAMER_RACK.get(), YHLangData.JEI_STEAM.key(), 100, 82, 44);
+	}
+
+	public void setRecipe(IRecipeLayoutBuilder builder, SteamingRecipe recipe, IFocusGroup focuses) {
+		builder.addSlot(RecipeIngredientRole.INPUT, 1, 1).setStandardSlotBackground().addIngredients(recipe.getIngredients().get(0));
+		builder.addSlot(RecipeIngredientRole.OUTPUT, 61, 9).setOutputSlotBackground().addItemStack(recipe.getResultItem(Minecraft.getInstance().level.registryAccess()));
+	}
+
+	public void createRecipeExtras(IRecipeExtrasBuilder builder, SteamingRecipe recipe, IFocusGroup focuses) {
+		int cookTime = recipe.getCookingTime();
+		if (cookTime <= 0) {
+			cookTime = this.regularCookTime;
+		}
+		builder.addAnimatedRecipeArrow(cookTime).setPosition(26, 7);
+		this.addCookTime(builder, recipe);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/compat/jei/YHJeiPlugin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/YHJeiPlugin.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/YHJeiPlugin.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/YHJeiPlugin.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/jei/YHJeiPlugin.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -8,6 +8,7 @@
 import dev.xkmc.youkaishomecoming.content.pot.moka.MokaRecipe;
 import dev.xkmc.youkaishomecoming.content.pot.moka.MokaScreen;
 import dev.xkmc.youkaishomecoming.content.pot.rack.DryingRackRecipe;
+import dev.xkmc.youkaishomecoming.content.pot.steamer.SteamingRecipe;
 import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
 import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
 import mezz.jei.api.IModPlugin;
@@ -28,6 +29,7 @@
 	public static final RecipeType<MokaRecipe> MOKA = RecipeType.create(YoukaisHomecoming.MODID, "moka", MokaRecipe.class);
 	public static final RecipeType<KettleRecipe> KETTLE = RecipeType.create(YoukaisHomecoming.MODID, "kettle", KettleRecipe.class);
 	public static final RecipeType<DryingRackRecipe> RACK = RecipeType.create(YoukaisHomecoming.MODID, "drying_rack", DryingRackRecipe.class);
+	public static final RecipeType<SteamingRecipe> STEAM = RecipeType.create(YoukaisHomecoming.MODID, "steaming", SteamingRecipe.class);
 	public static final RecipeType<SimpleFermentationRecipe> FERMENT = RecipeType.create(YoukaisHomecoming.MODID, "ferment", SimpleFermentationRecipe.class);
 
 	@Override
@@ -40,6 +42,7 @@
 		registry.addRecipeCategories(new MokaRecipeCategory(helper));
 		registry.addRecipeCategories(new KettleRecipeCategory(helper));
 		registry.addRecipeCategories(new DryingRackCategory(helper));
+		registry.addRecipeCategories(new SteamingCategory(helper));
 		registry.addRecipeCategories(new FermentRecipeCategory().init(helper));
 	}
 
@@ -50,6 +53,7 @@
 		registration.addRecipes(MOKA, m.getAllRecipesFor(YHBlocks.MOKA_RT.get()));
 		registration.addRecipes(KETTLE, m.getAllRecipesFor(YHBlocks.KETTLE_RT.get()));
 		registration.addRecipes(RACK, m.getAllRecipesFor(YHBlocks.RACK_RT.get()));
+		registration.addRecipes(STEAM, m.getAllRecipesFor(YHBlocks.STEAM_RT.get()));
 		registration.addRecipes(FERMENT, m.getAllRecipesFor(YHBlocks.FERMENT_RT.get())
 				.stream().map(e -> e instanceof SimpleFermentationRecipe x ? x : null).filter(Objects::nonNull).toList());
 	}
@@ -59,7 +63,10 @@
 		registration.addRecipeCatalyst(YHBlocks.KETTLE.asStack(), KETTLE);
 		registration.addRecipeCatalyst(YHBlocks.RACK.asStack(), RACK);
 		registration.addRecipeCatalyst(YHBlocks.FERMENT.asStack(), FERMENT);
-		registration.addRecipeCatalyst(ModBlocks.STOVE.get().asItem().getDefaultInstance(), MOKA, KETTLE);
+		registration.addRecipeCatalyst(YHBlocks.STEAMER_LID.asStack(), STEAM);
+		registration.addRecipeCatalyst(YHBlocks.STEAMER_RACK.asStack(), STEAM);
+		registration.addRecipeCatalyst(YHBlocks.STEAMER_POT.asStack(), STEAM);
+		registration.addRecipeCatalyst(ModBlocks.STOVE.get().asItem().getDefaultInstance(), MOKA, KETTLE, STEAM);
 	}
 
 	public void registerGuiHandlers(IGuiHandlerRegistration registration) {
Index: src/main/java/dev/xkmc/youkaishomecoming/compat/thirst/ThirstCompat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/thirst/ThirstCompat.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/thirst/ThirstCompat.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/compat/thirst/ThirstCompat.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/thirst/ThirstCompat.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -5,7 +5,7 @@
 import dev.xkmc.youkaishomecoming.compat.food.FruitsDelightCompatFood;
 import dev.xkmc.youkaishomecoming.init.food.YHCoffee;
 import dev.xkmc.youkaishomecoming.init.food.YHFood;
-import dev.xkmc.youkaishomecoming.init.food.YHSake;
+import dev.xkmc.youkaishomecoming.init.food.YHDrink;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.ModList;
@@ -21,22 +21,10 @@
 		for (var e : YHCoffee.values()) {
 			event.addDrink(e.item.get(), 8, 13);
 		}
-		for (var e : YHSake.values()) {
+		for (var e : YHDrink.values()) {
 			event.addDrink(e.item.get(), 8, 13);
 		}
 
-		event.addDrink(YHFood.BLACK_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.GREEN_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.OOLONG_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.WHITE_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.CORNFLOWER_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.SAIDI_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.SAKURA_HONEY_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.GENMAI_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.SCARLET_TEA.item.get(), 8, 13);
-		event.addDrink(YHFood.GREEN_WATER.item.get(), 8, 13);
-		event.addDrink(YHFood.TEA_MOCHA.item.get(), 6, 10);
-
 		event.addDrink(YHFood.MILK_POPSICLE.item.get(), 6, 10);
 		event.addDrink(YHFood.BIG_POPSICLE.item.get(), 6, 10);
 
Index: src/main/java/dev/xkmc/youkaishomecoming/compat/touhoulittlemaid/TLMCompat.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/compat/touhoulittlemaid/TLMCompat.java b/src/main/java/dev/xkmc/youkaishomecoming/compat/touhoulittlemaid/TLMCompat.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/compat/touhoulittlemaid/TLMCompat.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/compat/touhoulittlemaid/TLMCompat.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,15 +1,21 @@
 package dev.xkmc.youkaishomecoming.compat.touhoulittlemaid;
 
 import com.github.tartaricacid.touhoulittlemaid.item.ItemGarageKit;
+import dev.xkmc.youkaishomecoming.content.entity.boss.MystiaEntity;
+import dev.xkmc.youkaishomecoming.content.entity.boss.RemiliaEntity;
 import dev.xkmc.youkaishomecoming.content.entity.youkai.GeneralYoukaiEntity;
 import dev.xkmc.youkaishomecoming.content.spell.game.TouhouSpellCards;
+import dev.xkmc.youkaishomecoming.init.food.YHFood;
+import dev.xkmc.youkaishomecoming.init.registrate.YHEntities;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.ambient.Bat;
+import net.minecraft.world.entity.animal.FlyingAnimal;
+import net.minecraft.world.entity.animal.Parrot;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 public class TLMCompat {
 
-
 	@SubscribeEvent
 	public static void onInteract(PlayerInteractEvent.EntityInteract event) {
 		if (event.getTarget() instanceof GeneralYoukaiEntity e && event.getEntity().isCreative()) {
@@ -22,6 +28,28 @@
 				event.setCanceled(true);
 			}
 		}
+		if (event.getTarget() instanceof Bat bat && event.getItemStack().is(YHFood.SCARLET_DEVIL_CAKE.item.get())) {
+			if (!event.getTarget().level().isClientSide()) {
+				var remilia = new RemiliaEntity(YHEntities.REMILIA.get(), bat.level());
+				remilia.moveTo(bat.position());
+				remilia.initSpellCard();
+				bat.level().addFreshEntity(remilia);
+				bat.discard();
+			}
+			event.setCancellationResult(InteractionResult.SUCCESS);
+			event.setCanceled(true);
+		}
+		if (event.getTarget() instanceof Parrot parrot && event.getItemStack().is(YHFood.RAW_LAMPREY.item.get())) {
+			if (!event.getTarget().level().isClientSide()) {
+				var mystia = new MystiaEntity(YHEntities.MYSTIA.get(), parrot.level());
+				mystia.moveTo(parrot.position());
+				mystia.initSpellCard();
+				parrot.level().addFreshEntity(mystia);
+				parrot.discard();
+			}
+			event.setCancellationResult(InteractionResult.SUCCESS);
+			event.setCanceled(true);
+		}
 	}
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/food/EmptySaucerBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/EmptySaucerBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/EmptySaucerBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/EmptySaucerBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/EmptySaucerBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -2,27 +2,52 @@
 
 import dev.xkmc.youkaishomecoming.init.food.Saucer;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class EmptySaucerBlock extends BaseSaucerBlock {
 
 	public static final EnumProperty<Saucer> TYPE = EnumProperty.create("type", Saucer.class);
-	protected static final VoxelShape[] SHAPE_BY_TYPE = new VoxelShape[]{
-			Block.box(2.0D, 0.0D, 2.0D, 14.0D, 6.0D, 14.0D),
-			Block.box(2.0D, 0.0D, 2.0D, 14.0D, 3.0D, 14.0D),
-			Block.box(2.0D, 0.0D, 2.0D, 14.0D, 3.0D, 14.0D),
-			Block.box(2.0D, 0.0D, 2.0D, 14.0D, 1.0D, 14.0D)};
+	protected static final VoxelShape[] SHAPE_X, SHAPE_Z;
+
+	static {
+		int n = Saucer.values().length;
+		SHAPE_X = new VoxelShape[n];
+		SHAPE_Z = new VoxelShape[n];
+		for (int i = 0; i < n; i++) {
+			var saucer = Saucer.values()[i];
+			SHAPE_X[i] = Block.box(saucer.x, 0, saucer.z, 16 - saucer.x, saucer.height, 16 - saucer.z);
+			SHAPE_Z[i] = Block.box(saucer.z, 0, saucer.x, 16 - saucer.z, saucer.height, 16 - saucer.x);
+		}
+	}
 
 	public EmptySaucerBlock(Properties pProperties) {
 		super(pProperties);
 	}
 
+
+	@Override
+	public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		if (!level.isClientSide()) {
+			var old = state.getValue(TYPE);
+			var next = Saucer.values()[(old.ordinal() + 1) % Saucer.values().length];
+			level.setBlockAndUpdate(pos, state.setValue(TYPE, next));
+		}
+		return InteractionResult.SUCCESS;
+	}
+
 	@Override
 	public void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
 		super.createBlockStateDefinition(builder);
@@ -30,7 +55,8 @@
 	}
 
 	@Override
-	public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
-		return SHAPE_BY_TYPE[pState.getValue(TYPE).ordinal()];
+	public VoxelShape getShape(BlockState state, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
+		boolean x = state.getValue(BlockStateProperties.HORIZONTAL_FACING).getAxis() == Direction.Axis.X;
+		return (x ? SHAPE_X : SHAPE_Z)[state.getValue(TYPE).ordinal()];
 	}
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FleshFeastBlock.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FleshFeastBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FleshFeastBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FleshFeastBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FleshFeastBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,6 +3,7 @@
 import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
 import com.tterrag.registrate.providers.loot.RegistrateBlockLootTables;
 import dev.xkmc.youkaishomecoming.content.item.food.FleshFoodItem;
+import dev.xkmc.youkaishomecoming.content.item.food.IFleshFoodItem;
 import dev.xkmc.youkaishomecoming.init.data.YHLangData;
 import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
 import net.minecraft.advancements.critereon.StatePropertiesPredicate;
@@ -53,7 +54,7 @@
 
 	@Override
 	public MutableComponent getName() {
-		Player player = FleshFoodItem.getPlayer();
+		Player player = IFleshFoodItem.getPlayer();
 		Component name;
 		if (player != null && player.hasEffect(YHEffects.YOUKAIFIED.get())) {
 			name = YHLangData.FLESH_NAME_YOUKAI.get();
@@ -105,7 +106,7 @@
 		public ModelFile build(RegistrateBlockstateProvider pvd) {
 			String name = name().toLowerCase(Locale.ROOT);
 			var ans = pvd.models().getBuilder("flesh_feast_" + name)
-					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/flesh_feast_" + name)));
+					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/feast/flesh_feast_" + name)));
 			ans.texture("tray_top", pvd.modLoc("block/tray_top"));
 			ans.texture("particle", pvd.modLoc("block/tray_top"));
 			ans.texture("tray_bottom", pvd.modLoc("block/tray_bottom"));
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FoodSaucerBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FoodSaucerBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FoodSaucerBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FoodSaucerBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/FoodSaucerBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,6 +3,7 @@
 import dev.xkmc.youkaishomecoming.init.food.YHDish;
 import dev.xkmc.youkaishomecoming.init.registrate.YHItems;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
@@ -17,22 +18,24 @@
 
 public class FoodSaucerBlock extends BaseSaucerBlock {
 
-	private final VoxelShape shape;
-	private final YHDish base;
+	public final YHDish dish;
+	private final VoxelShape shape_x, shape_z;
 
-	public FoodSaucerBlock(Properties pProperties, YHDish base) {
+	public FoodSaucerBlock(Properties pProperties, YHDish dish) {
 		super(pProperties);
-		this.base = base;
-		shape = Block.box(2.0D, 0.0D, 2.0D, 14.0D, base.height, 14.0D);
+		this.dish = dish;
+		var saucer = dish.saucer;
+		shape_x = Block.box(saucer.x, 0, saucer.z, 16 - saucer.x, dish.height, 16 - saucer.z);
+		shape_z = Block.box(saucer.z, 0, saucer.x, 16 - saucer.z, dish.height, 16 - saucer.x);
 	}
 
 	@Override
 	public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-		if (player.canEat(false)) {
+		if (asItem().getDefaultInstance().getFoodProperties(player) != null && player.canEat(false)) {
 			if (!level.isClientSide()) {
 				player.eat(level, asItem().getDefaultInstance());
 				level.setBlockAndUpdate(pos, YHItems.SAUCER.getDefaultState()
-						.setValue(EmptySaucerBlock.TYPE, base.base)
+						.setValue(EmptySaucerBlock.TYPE, dish.saucer)
 						.setValue(BlockStateProperties.HORIZONTAL_FACING,
 								state.getValue(BlockStateProperties.HORIZONTAL_FACING)));
 			}
@@ -42,8 +45,9 @@
 	}
 
 	@Override
-	public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
-		return shape;
+	public VoxelShape getShape(BlockState state, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
+		boolean x = state.getValue(BlockStateProperties.HORIZONTAL_FACING).getAxis() == Direction.Axis.X;
+		return x ? shape_x : shape_z;
 	}
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseChestBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseChestBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseChestBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseChestBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseChestBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -60,7 +60,7 @@
 
 	public static void buildModel(DataGenContext<Block, SurpriseChestBlock> ctx, RegistrateBlockstateProvider pvd) {
 		pvd.horizontalBlock(ctx.get(), state -> pvd.models().getBuilder("block/" + ctx.getName())
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/heart_throbbing_surprise_chest")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/feast/heart_throbbing_surprise_chest")))
 				.texture("base", pvd.modLoc("block/surprise_chest")).renderType("cutout"));
 	}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseFeastBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseFeastBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseFeastBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseFeastBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/food/SurpriseFeastBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -39,7 +39,7 @@
 			String suffix = serve == 0 ? "_leftover" : "_stage" + (4 - serve);
 			String id = ctx.getName() + suffix;
 			var ans = pvd.models().getBuilder("block/" + id)
-					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/" + id)));
+					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/feast/" + id)));
 			ans.texture("base", pvd.modLoc("block/surprise_chest"));
 			ans.texture("umbrella", pvd.modLoc("block/surprise_umbrella"));
 			if (serve > 0) {
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodChairBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodChairBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodChairBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodChairBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodChairBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -72,7 +72,7 @@
 	public static void buildStates(DataGenContext<Block, WoodChairBlock> ctx, RegistrateBlockstateProvider pvd) {
 		pvd.simpleBlock(ctx.get(), pvd.models().getBuilder("block/" + ctx.getName())
 				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/wooden_dining_chair")))
-				.texture("all", pvd.modLoc("block/" + ctx.getName()))
+				.texture("all", pvd.modLoc("block/wooden/" + ctx.getName()))
 				.texture("particle", pvd.mcLoc("block/birch_planks"))
 				.renderType("cutout"));
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodTableBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodTableBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodTableBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodTableBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/furniture/WoodTableBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -33,7 +33,7 @@
 	public static void buildStates(DataGenContext<Block, WoodTableBlock> ctx, RegistrateBlockstateProvider pvd) {
 		pvd.simpleBlock(ctx.get(), pvd.models().getBuilder("block/" + ctx.getName())
 				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/wooden_dining_table")))
-				.texture("all", pvd.modLoc("block/" + ctx.getName()))
+				.texture("all", pvd.modLoc("block/wooden/" + ctx.getName()))
 				.texture("particle", pvd.mcLoc("block/birch_planks"))
 				.renderType("cutout"));
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/CoffeaCropBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/CoffeaCropBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/CoffeaCropBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/CoffeaCropBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/CoffeaCropBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -154,25 +154,25 @@
 			if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
 				return ConfiguredModel.builder().modelFile(pvd.models()
 						.withExistingParent(tex + "_upper", pvd.mcLoc("block/air"))
-						.texture("particle", pvd.modLoc("block/" + name + "_leaves"))
+						.texture("particle", pvd.modLoc("block/plants/" + name + "_leaves"))
 				).build();
 			}
 			if (age <= 5) {
 				return ConfiguredModel.builder().modelFile(pvd.models()
-						.cross(tex, pvd.modLoc("block/" + tex)).renderType("cutout")).build();
+						.cross(tex, pvd.modLoc("block/plants/" + tex)).renderType("cutout")).build();
 			} else {
 				var file = pvd.models()
 						.getBuilder("block/" + tex)
-						.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/" + tex)));
+						.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/plant/" + tex)));
 				file.ao(false);
 				file.renderType("cutout");
 				if (age == 6 || age == 7) {
-					file.texture("leaves", pvd.modLoc("block/" + name + "_leaves"));
+					file.texture("leaves", pvd.modLoc("block/plants/" + name + "_leaves"));
 				}
-				file.texture("top", pvd.modLoc("block/" + name + "_bush_top"));
-				file.texture("side", pvd.modLoc("block/" + name + "_bush_side"));
-				file.texture("trunk", pvd.modLoc("block/" + name + "_trunk" + age));
-				file.texture("particle", pvd.modLoc("block/" + name + "_trunk" + age));
+				file.texture("top", pvd.modLoc("block/plants/" + name + "_bush_top"));
+				file.texture("side", pvd.modLoc("block/plants/" + name + "_bush_side"));
+				file.texture("trunk", pvd.modLoc("block/plants/" + name + "_trunk" + age));
+				file.texture("particle", pvd.modLoc("block/plants/" + name + "_trunk" + age));
 				return ConfiguredModel.builder().modelFile(file).build();
 			}
 		});
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/TeaCropBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/TeaCropBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/TeaCropBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/TeaCropBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/TeaCropBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -178,26 +178,26 @@
 			if (state.getValue(HALF) == DoubleBlockHalf.UPPER) {
 				return ConfiguredModel.builder().modelFile(pvd.models()
 						.withExistingParent(tex + "_upper", pvd.mcLoc("block/air"))
-						.texture("particle", pvd.modLoc("block/" + name + "_bush_leaves"))
+						.texture("particle", pvd.modLoc("block/plants/" + name + "_bush_leaves"))
 				).build();
 			}
 			if (age <= 4) {
 				return ConfiguredModel.builder().modelFile(pvd.models()
-						.cross(tex, pvd.modLoc("block/" + tex)).renderType("cutout")).build();
+						.cross(tex, pvd.modLoc("block/plants/" + tex)).renderType("cutout")).build();
 			} else {
 				var file = pvd.models()
 						.getBuilder("block/" + tex)
-						.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/" + tex)));
+						.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/plant/" + tex)));
 				file.ao(false);
 				file.renderType("cutout");
 				if (age == 5) {
-					file.texture("base", pvd.modLoc("block/" + name + "_stage5"));
+					file.texture("base", pvd.modLoc("block/plants/" + name + "_stage5"));
 				} else {
-					file.texture("leaves", pvd.modLoc("block/" + name + "_bush_leaves"));
-					file.texture("trunk", pvd.modLoc("block/" + name + "_bush_trunk"));
+					file.texture("leaves", pvd.modLoc("block/plants/" + name + "_bush_leaves"));
+					file.texture("trunk", pvd.modLoc("block/plants/" + name + "_bush_trunk"));
 				}
-				file.texture("top", pvd.modLoc("block/" + name + "_bush_top"));
-				file.texture("side", pvd.modLoc("block/" + name + "_bush_side"));
+				file.texture("top", pvd.modLoc("block/plants/" + name + "_bush_top"));
+				file.texture("side", pvd.modLoc("block/plants/" + name + "_bush_side"));
 				return ConfiguredModel.builder().modelFile(file).build();
 			}
 		});
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/WildCoffeaBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/WildCoffeaBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/WildCoffeaBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/WildCoffeaBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/WildCoffeaBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -47,7 +47,7 @@
 		pvd.getVariantBuilder(ctx.get()).forAllStatesExcept(state ->
 				ConfiguredModel.builder().modelFile(pvd.models()
 								.cross(tex + (state.getValue(HALF) == DoubleBlockHalf.UPPER ? "" : "_bottom"),
-										pvd.modLoc("block/wild_" + tex +
+										pvd.modLoc("block/plants/wild_" + tex +
 												(state.getValue(HALF) == DoubleBlockHalf.UPPER ? "_top" : "_bottom")))
 								.renderType("cutout"))
 						.build());
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/YHCropBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/YHCropBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/YHCropBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/YHCropBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/plant/YHCropBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -27,6 +27,7 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraftforge.client.model.generators.ConfiguredModel;
+import net.minecraftforge.client.model.generators.ModelFile;
 import net.minecraftforge.common.PlantType;
 import net.minecraftforge.common.Tags;
 
@@ -34,14 +35,14 @@
 
 public class YHCropBlock extends CropBlock {
 	private static final VoxelShape[] SHAPE_BY_AGE = new VoxelShape[]{
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 6.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 8.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 12.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 12.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 12.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 12.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 12.0D, 16.0D),
-			Block.box(0.0D, 0.0D, 0.0D, 16.0D, 16.0D, 16.0D)};
+			Block.box(2, 0, 2, 14, 5, 14),
+			Block.box(2, 0, 2, 14, 7, 14),
+			Block.box(2, 0, 2, 14, 9, 14),
+			Block.box(2, 0, 2, 14, 11, 14),
+			Block.box(2, 0, 2, 14, 13, 14),
+			Block.box(2, 0, 2, 14, 14, 14),
+			Block.box(2, 0, 2, 14, 14, 14),
+			Block.box(2, 0, 2, 14, 14, 14)};
 
 	private final Supplier<Item> seed;
 
@@ -72,7 +73,7 @@
 		pvd.getVariantBuilder(ctx.get()).forAllStates(state -> {
 			int age = state.getValue(CropBlock.AGE);
 			String tex = name + "_stage" + age;
-			return ConfiguredModel.builder().modelFile(pvd.models().crop(tex, pvd.modLoc("block/" + tex)).renderType("cutout")).build();
+			return ConfiguredModel.builder().modelFile(pvd.models().crop(tex, pvd.modLoc("block/plants/" + tex)).renderType("cutout")).build();
 		});
 	}
 
@@ -80,7 +81,11 @@
 		pvd.getVariantBuilder(ctx.get()).forAllStates(state -> {
 			int age = state.getValue(CropBlock.AGE);
 			String tex = name + "_stage" + age;
-			return ConfiguredModel.builder().modelFile(pvd.models().cross(tex, pvd.modLoc("block/" + tex)).renderType("cutout")).build();
+			return ConfiguredModel.builder().modelFile(pvd.models()
+					.getBuilder(tex)
+					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/cross_crop")))
+					.texture("cross", "block/plants/" + tex)
+					.renderType("cutout")).build();
 		});
 	}
 
@@ -117,7 +122,7 @@
 
 	public static void buildWildModel(DataGenContext<Block, ? extends BushBlock> ctx, RegistrateBlockstateProvider pvd, YHCrops crop) {
 		String tex = "wild_" + crop.getName();
-		pvd.simpleBlock(ctx.get(), pvd.models().cross(tex, pvd.modLoc("block/" + tex)).renderType("cutout"));
+		pvd.simpleBlock(ctx.get(), pvd.models().cross(tex, pvd.modLoc("block/plants/" + tex)).renderType("cutout"));
 	}
 
 }
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/block/variants/MultiFenceBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/block/variants/MultiFenceBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/block/variants/MultiFenceBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/block/variants/MultiFenceBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/block/variants/MultiFenceBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -530,14 +530,14 @@
 			String name = (f.name() + "_" + s.name() + "_" + t.name()).toLowerCase(Locale.ROOT);
 			return pvd.models().getBuilder("block/" + ctx.getName() + "_" + name)
 					.parent(FLAT[f.ordinal()][s.ordinal()][t.ordinal()])
-					.texture("all", pvd.modLoc("block/" + ctx.getName()));
+					.texture("all", pvd.modLoc("block/wooden/" + ctx.getName()));
 		}
 
 		private ModelFile genDiagModel(Face f, Side s, Rotate r) {
 			String name = (f.name() + "_" + s.name() + "_" + r.name()).toLowerCase(Locale.ROOT);
 			return pvd.models().getBuilder("block/" + ctx.getName() + "_" + name)
 					.parent(DIAG[f.ordinal()][s.ordinal()][r.ordinal()])
-					.texture("all", pvd.modLoc("block/" + ctx.getName()));
+					.texture("all", pvd.modLoc("block/wooden/" + ctx.getName()));
 		}
 
 		private ModelFile getModel(Face f, Side s, Type t) {
@@ -605,7 +605,7 @@
 			String name = "post_" + face.name().toLowerCase(Locale.ROOT);
 			builder.part().modelFile(pvd.models().getBuilder("block/" + ctx.getName() + "_" + name)
 							.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/handrail_" + name)))
-							.texture("all", pvd.modLoc("block/" + ctx.getName()))
+							.texture("all", pvd.modLoc("block/wooden/" + ctx.getName()))
 					).rotationY(rot).addModel()
 					.condition(INVERTED, face == Face.INNER)
 					.condition(self, State.UP)
Index: src/main/java/dev/xkmc/youkaishomecoming/content/effect/DrunkEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/effect/DrunkEffect.java b/src/main/java/dev/xkmc/youkaishomecoming/content/effect/DrunkEffect.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/effect/DrunkEffect.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/effect/DrunkEffect.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -10,7 +10,7 @@
 	public DrunkEffect(MobEffectCategory category, int color) {
 		super(category, color);
 		var uuid = MathHelper.getUUIDFromString("drunk").toString();
-		addAttributeModifier(Attributes.ATTACK_DAMAGE, uuid, 2, AttributeModifier.Operation.ADDITION);
+		addAttributeModifier(Attributes.ATTACK_DAMAGE, uuid, 1, AttributeModifier.Operation.ADDITION);
 	}
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/BossYoukaiEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/BossYoukaiEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/BossYoukaiEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/BossYoukaiEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/BossYoukaiEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -16,10 +16,7 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageTypes;
 import net.minecraft.world.effect.MobEffectInstance;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.monster.Enemy;
@@ -41,6 +38,7 @@
 	}
 
 	protected final ServerBossEvent bossEvent = new ServerBossEvent(getDisplayName(), BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_20);
+	private boolean ticking = false;
 
 	public BossYoukaiEntity(EntityType<? extends BossYoukaiEntity> pEntityType, Level pLevel) {
 		super(pEntityType, pLevel);
@@ -64,12 +62,14 @@
 
 	@Override
 	public void tick() {
+		ticking = true;
 		double maxSpeed = 0.5;
 		if (getDeltaMovement().length() > maxSpeed) {
 			setDeltaMovement(getDeltaMovement().normalize().scale(maxSpeed));
 		}
 		validateData();
 		super.tick();
+		ticking = false;
 	}
 
 	@Override
@@ -83,6 +83,7 @@
 
 	private int hurtCD = 0;
 	private boolean hurtCall = false;
+	private boolean chaotic = false;
 
 	private int getCD(DamageSource source) {
 		if (!YHModConfig.COMMON.reimuExtraDamageCoolDown.get())
@@ -100,6 +101,21 @@
 
 	@Override
 	public boolean hurt(DamageSource source, float amount) {
+		if (ticking || source.getEntity() == this) {
+			if (!source.is(DamageTypes.GENERIC_KILL))
+				return false;
+			else {
+				var target = getTarget();
+				if (target != null && amount >= getCombatProgress() && !isRemoved()) {
+					trySummonReinforcementOnDeath(target);
+					discard();
+				}
+			}
+		}
+		if (source.getEntity() instanceof LivingEntity le) {
+			setLastHurtByMob(le);
+			targets.checkTarget();
+		}
 		if (!source.is(DamageTypes.GENERIC_KILL) || source.getEntity() != null) {
 			if (!source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) &&
 					!(source.getEntity() instanceof LivingEntity))
@@ -129,8 +145,20 @@
 		return true;
 	}
 
+	private float illegalDamage = 0;
+
+	protected void notifyIllegalDamage(float amount, @Nullable Entity causer) {
+		illegalDamage += amount;
+		if (illegalDamage > 200) {
+			setFlag(4, true);
+		}
+	}
+
 	protected float clampDamage(DamageSource source, float amount) {
-		if (!hurtCall) return 0;
+		if (!hurtCall) {
+			notifyIllegalDamage(amount, source.getEntity());
+			return 0;
+		}
 		if (source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
 			if (source.getEntity() instanceof LivingEntity le) {
 				if (le instanceof ServerPlayer sp) {
@@ -139,23 +167,33 @@
 					}
 				}
 			} else {
-				if (source.is(DamageTypes.FELL_OUT_OF_WORLD))
+				if (source.is(DamageTypes.FELL_OUT_OF_WORLD)) {
+					if (amount > 4) {
+						notifyIllegalDamage(amount - 4, source.getEntity());
+					}
 					return Math.min(4, amount);
+				}
 				if (source.is(DamageTypes.GENERIC_KILL)) {
 					return amount;
 				}
 			}
 		}
 		int reduction = 20;
-		amount = Math.min(getMaxHealth() / reduction, amount);
+		float ans = Math.min(getMaxHealth() / reduction, amount);
 		if (YHModConfig.COMMON.reimuDamageReduction.get() && !source.is(YHDamageTypes.DANMAKU_TYPE))
-			amount /= 5;
-		return amount;
+			ans /= 5;
+		if (source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+			notifyIllegalDamage(amount - ans, source.getEntity());
+		}
+		return ans;
 	}
 
 	@Override
 	protected final void actuallyHurt(DamageSource source, float amount) {
-		if (!hurtCall) return;
+		if (!hurtCall) {
+			notifyIllegalDamage(amount, source.getEntity());
+			return;
+		}
 		super.actuallyHurt(source, amount);
 	}
 
@@ -174,10 +212,28 @@
 			setCombatProgress(val);
 		}
 		float health = getCombatProgress();
-		if (tickCount > 5 && val <= health) return;
+		if (tickCount > 5 && val <= health) {
+			notifyIllegalDamage(health - val, null);
+			return;
+		}
 		setCombatProgress(val);
 	}
 
+	@Override
+	public void setCombatProgress(float amount) {
+		if (combatProgress != null) {
+			float health = combatProgress.progress;
+			if (health > getVanillaProgress()) {
+				notifyIllegalDamage(health - getVanillaProgress(), null);
+			}
+			if (health > getCombatProgress()) {
+				notifyIllegalDamage(health - getCombatProgress(), null);
+				setFlag(4, true);
+			}
+		}
+		super.setCombatProgress(amount);
+	}
+
 	public void heal(float original) {
 		var heal = ForgeEventFactory.onLivingHeal(this, original);
 		heal = Math.max(original, heal);
@@ -207,8 +263,13 @@
 	@Override
 	protected void customServerAiStep() {
 		super.customServerAiStep();
+		if (combatProgress != null && getCombatProgress() != combatProgress.progress) {
+			bossEvent.setProgress(random().nextFloat());
+			return;
+		}
 		bossEvent.setProgress(getCombatProgress() / getMaxHealth());
 		if (getTarget() == null || !getTarget().isAlive()) {
+			chaotic = false;
 			noTargetTime++;
 			boolean doHeal = noTargetTime >= 20 && tickCount % 20 == 0;
 			doHeal |= getCombatProgress() < getMaxHealth();
@@ -219,12 +280,19 @@
 			}
 			if (doHeal) {
 				setHealth(getMaxHealth());
+				if (getFlag(4)) {
+					setFlag(4, false);
+				}
 			}
 		} else {
 			noTargetTime = 0;
 		}
 	}
 
+	public boolean isChaotic() {
+		return chaotic || combatProgress != null && getCombatProgress() != combatProgress.progress;
+	}
+
 	public void startSeenByPlayer(ServerPlayer pPlayer) {
 		super.startSeenByPlayer(pPlayer);
 		this.bossEvent.addPlayer(pPlayer);
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/RemiliaEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/RemiliaEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/RemiliaEntity.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/RemiliaEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,37 @@
+package dev.xkmc.youkaishomecoming.content.entity.boss;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.entity.danmaku.IYHDanmaku;
+import dev.xkmc.youkaishomecoming.content.spell.game.TouhouSpellCards;
+import dev.xkmc.youkaishomecoming.init.data.YHModConfig;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.MobType;
+import net.minecraft.world.level.Level;
+
+@SerialClass
+public class RemiliaEntity extends BossYoukaiEntity {
+
+	public RemiliaEntity(EntityType<? extends BossYoukaiEntity> pEntityType, Level pLevel) {
+		super(pEntityType, pLevel);
+	}
+
+	@Override
+	public boolean shouldIgnore(LivingEntity e) {
+		return super.shouldIgnore(e) || e.getMobType() == MobType.UNDEAD || e.getMobType() == MobType.ILLAGER;
+	}
+
+	@Override
+	public void initSpellCard() {
+		TouhouSpellCards.setRemilia(this);
+	}
+
+	@Override
+	public void onDanmakuHit(LivingEntity e, IYHDanmaku danmaku) {
+		if (targets.contains(e)) {
+			double heal = YHModConfig.COMMON.danmakuHealOnHitTarget.get();
+			heal(getMaxHealth() * (float) heal);
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/YukariEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/YukariEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/YukariEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/YukariEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/boss/YukariEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,10 +1,12 @@
 package dev.xkmc.youkaishomecoming.content.entity.boss;
 
+import dev.xkmc.fastprojectileapi.collision.EntityStorageHelper;
 import dev.xkmc.l2serial.serialization.SerialClass;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.IYHDanmaku;
 import dev.xkmc.youkaishomecoming.content.spell.game.TouhouSpellCards;
 import dev.xkmc.youkaishomecoming.init.data.YHDamageTypes;
 import dev.xkmc.youkaishomecoming.init.data.YHModConfig;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
@@ -23,6 +25,20 @@
 		TouhouSpellCards.setYukari(this);
 	}
 
+	@Override
+	public void onDanmakuHit(LivingEntity e, IYHDanmaku danmaku) {
+		// when taking >200 illegal damage
+		if (getFlag(4) && !(e instanceof Player)) {
+			e.setRemoved(RemovalReason.KILLED);
+			if (e.isAlive() && level() instanceof ServerLevel sl) {
+				EntityStorageHelper.clear(sl, e);
+				setTarget(null);
+				targets.remove(e.getUUID());
+				setLastHurtByMob(null);
+			}
+		}
+	}
+
 	@Override
 	public void onDanmakuImmune(LivingEntity e, IYHDanmaku danmaku, DamageSource source) {
 		if (e.tickCount - e.getLastHurtByMobTimestamp() < 20)
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/ItemDanmakuEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/ItemDanmakuEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/ItemDanmakuEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/ItemDanmakuEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/ItemDanmakuEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -6,6 +6,8 @@
 import dev.xkmc.youkaishomecoming.content.spell.mover.DanmakuMover;
 import dev.xkmc.youkaishomecoming.content.spell.mover.MoverInfo;
 import dev.xkmc.youkaishomecoming.content.spell.mover.MoverOwner;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.TrailAction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -25,6 +27,10 @@
 	public int controlCode = 0;
 	@SerialClass.SerialField
 	public DanmakuMover mover = null;
+	@SerialClass.SerialField
+	public TrailAction afterExpiry = null;
+
+	private boolean isErased = false;
 
 	public ItemDanmakuEntity(EntityType<? extends ItemDanmakuEntity> pEntityType, Level pLevel) {
 		super(pEntityType, pLevel);
@@ -52,6 +58,16 @@
 		return this;
 	}
 
+	@Override
+	protected void terminate() {
+		if (afterExpiry == null) return;
+		CardHolder holder = null;
+		Entity e = getOwner();
+		if (e instanceof CardHolder h) holder = h;
+		if (holder == null) return;
+		afterExpiry.execute(holder, position(), getDeltaMovement());
+	}
+
 	@Override
 	protected ProjectileMovement updateVelocity(Vec3 vec, Vec3 pos) {
 		if (mover != null) {
@@ -106,6 +122,17 @@
 		return true;
 	}
 
+	public void erase(LivingEntity user) {
+		if (getOwner() == user) return;
+		isErased = true;
+		discard();
+	}
+
+	@Override
+	public boolean isValid() {
+		return !isErased && super.isValid();
+	}
+
 	private Float sizeCache = null;
 
 	public float scale() {
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/YHBaseLaserEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/YHBaseLaserEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/YHBaseLaserEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/YHBaseLaserEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/danmaku/YHBaseLaserEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -176,4 +176,8 @@
 		PacketCodec.from(additionalData, getClass(), Wrappers.cast(this));
 	}
 
+	@Override
+	public boolean isValid() {
+		return tickCount < life;
+	}
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/fairy/FairyEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/fairy/FairyEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/fairy/FairyEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/fairy/FairyEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/fairy/FairyEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -80,8 +80,13 @@
 		if (!prev && dead && e instanceof LivingEntity le && !source.is(YHDamageTypes.DANMAKU_TYPE)) {
 			if (!e.isAlive() || !e.isAddedToWorld() || e.isRemoved())
 				return;
-			TouhouConditionalSpawns.triggetFairyReinforcement(this, le, position());
-		}
+			trySummonReinforcementOnDeath(le);
+		}
+	}
+
+	@Override
+	public void trySummonReinforcementOnDeath(LivingEntity le) {
+		TouhouConditionalSpawns.triggetFairyReinforcement(this, le, position());
 	}
 
 	@Nullable
@@ -94,15 +99,22 @@
 	public void initSpellCard() {
 	}
 
+	private static long spawnTime = 0;
+
 	public static boolean checkFairySpawnRules(EntityType<? extends FairyEntity> e, ServerLevelAccessor level, MobSpawnType type, BlockPos pos, RandomSource rand) {
 		if (e != YHEntities.CIRNO.get() && !ModList.get().isLoaded(TouhouLittleMaid.MOD_ID)) return false;
 		if (!checkMobSpawnRules(e, level, type, pos, rand)) return false;
 		if (!YHModConfig.COMMON.cirnoSpawn.get()) return false;
+		var player = level.getNearestPlayer(pos.getX(), pos.getY(), pos.getZ(), 128, false);
+		if (player == null) return false;
+		if (spawnTime > player.level().getGameTime()) return false;
 		var aabb = AABB.ofSize(pos.getCenter(), 48, 24, 48);
 		if (!level.getEntitiesOfClass(FairyEntity.class, aabb).isEmpty()) return false;
-		var player = level.getNearestPlayer(pos.getX(), pos.getY(), pos.getZ(), 128, false);
-		if (player == null) return false;
-		return !YHModConfig.COMMON.cirnoSpawnCheckEffect.get() || EffectEventHandlers.isCharacter(player);
+		if (!YHModConfig.COMMON.cirnoSpawnCheckEffect.get() || EffectEventHandlers.isCharacter(player)) {
+			spawnTime = player.level().getGameTime() + 200;
+			return true;
+		}
+		return false;
 	}
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -138,8 +138,13 @@
 		if (!prev && dead && e instanceof LivingEntity le && !source.is(YHDamageTypes.DANMAKU_TYPE)) {
 			if (!e.isAlive() || !e.isAddedToWorld() || e.isRemoved())
 				return;
-			TouhouConditionalSpawns.triggetYukari(le, position());
-		}
+			trySummonReinforcementOnDeath(le);
+		}
+	}
+
+	@Override
+	public void trySummonReinforcementOnDeath(LivingEntity le) {
+		TouhouConditionalSpawns.triggetYukari(le, position());
 	}
 
 	@Override
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuRenderer.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuRenderer.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuRenderer.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuRenderer.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/reimu/ReimuRenderer.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -11,6 +11,7 @@
 public class ReimuRenderer extends MobRenderer<MaidenEntity, ReimuModel<MaidenEntity>> {
 
 	public static final ResourceLocation TEX = YoukaisHomecoming.loc("textures/entities/reimu.png");
+	public static final ResourceLocation BLUE = YoukaisHomecoming.loc("textures/entities/reimu_blue.png");
 
 	public ReimuRenderer(EntityRendererProvider.Context context) {
 		super(context, new ReimuModel<>(context.bakeLayer(ReimuModel.LAYER_LOCATION)), 0.2F);
@@ -18,6 +19,10 @@
 	}
 
 	public ResourceLocation getTextureLocation(MaidenEntity entity) {
+		if (entity.isChaotic())
+			return entity.tickCount / 2 % 2 == 0 ? TEX : BLUE;
+		if (entity.getFlag(4))
+			return BLUE;
 		return TEX;
 	}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/CombatToClient.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/CombatToClient.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/CombatToClient.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/CombatToClient.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/CombatToClient.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -8,7 +8,9 @@
 @SerialClass
 public class CombatToClient extends SerialPacketBase {
 
+	@SerialClass.SerialField
 	public int id;
+	@SerialClass.SerialField
 	public CombatProgress progress;
 
 	public CombatToClient() {
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/GeneralYoukaiEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/GeneralYoukaiEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/GeneralYoukaiEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/GeneralYoukaiEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/GeneralYoukaiEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -92,7 +92,7 @@
 
 	@Override
 	public boolean shouldShowSpellCircle() {
-		return isAggressive();
+		return level().isClientSide() ? isAggressive() : getTarget() != null;
 	}
 
 	@Override
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiAttackGoal.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiAttackGoal.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiAttackGoal.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiAttackGoal.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiAttackGoal.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -42,6 +42,7 @@
 	}
 
 	public void tick() {
+		youkai.setAggressive(true);
 		if (shootTime > 0) {
 			shootTime--;
 		}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,9 +1,12 @@
 package dev.xkmc.youkaishomecoming.content.entity.youkai;
 
+import dev.xkmc.fastprojectileapi.collision.EntityStorageHelper;
+import dev.xkmc.fastprojectileapi.entity.SimplifiedProjectile;
 import dev.xkmc.fastprojectileapi.spellcircle.SpellCircleHolder;
 import dev.xkmc.l2serial.serialization.SerialClass;
 import dev.xkmc.l2serial.serialization.codec.TagCodec;
 import dev.xkmc.l2serial.util.Wrappers;
+import dev.xkmc.youkaishomecoming.compat.touhoulittlemaid.TouhouConditionalSpawns;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.IYHDanmaku;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.ItemDanmakuEntity;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.LivingCardHolder;
@@ -46,6 +49,8 @@
 import net.minecraftforge.common.MinecraftForge;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Objects;
 
 @SerialClass
@@ -78,7 +83,7 @@
 	public SpellCardWrapper spellCard;
 
 	@SerialClass.SerialField
-	private CombatProgress combatProgress = new CombatProgress();
+	public CombatProgress combatProgress = new CombatProgress();
 
 	public YoukaiEntity(EntityType<? extends YoukaiEntity> pEntityType, Level pLevel) {
 		this(pEntityType, pLevel, 10);
@@ -159,7 +164,7 @@
 	// features
 
 	public boolean invalidTarget(LivingEntity e) {
-		return !e.isAlive() || !e.isAddedToWorld() || e.level() != level();
+		return !e.isAlive() || !e.isAddedToWorld() || e.level() != level() || e == this || !EntityStorageHelper.isPresent(e);
 	}
 
 	public boolean shouldIgnore(LivingEntity e) {
@@ -252,21 +257,27 @@
 	public void aiStep() {
 		if (!level().isClientSide()) {
 			if (!this.onGround() && this.getDeltaMovement().y < 0.0D) {
-				double fall = isAggressive() ? 0.6 : 0.8;
+				double fall = getTarget() != null ? 0.6 : 0.8;
 				this.setDeltaMovement(this.getDeltaMovement().multiply(1.0D, fall, 1.0D));
 			}
 			targets.tick();
 			if (spellCard != null) {
-				if (isAggressive() && shouldShowSpellCircle()) {
+				if (getTarget() != null && shouldShowSpellCircle()) {
 					spellCard.tick(this);
+					tickDanmaku();
 				} else {
 					spellCard.reset();
+					allDanmakus.clear();
 				}
 			}
 		}
 		super.aiStep();
 	}
 
+	public void trySummonReinforcementOnDeath(LivingEntity le){
+		TouhouConditionalSpawns.triggetYukari(le, position());
+	}
+
 	@Override
 	protected void actuallyHurt(DamageSource source, float amount) {
 		if (spellCard != null) spellCard.hurt(this, source, amount);
@@ -309,10 +320,11 @@
 	protected void hurtFinalImpl(DamageSource source, float amount) {
 		if (combatProgress == null) return;
 		setCombatProgress(getCombatProgress() - amount);
+
 	}
 
 	public void validateData() {
-		if (getCombatProgress() > 0) {
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress || getCombatProgress() > 0) {
 			if (deathTime > 0) deathTime = 0;
 			if (dead) dead = false;
 		}
@@ -326,16 +338,27 @@
 
 	@Override
 	protected boolean isImmobile() {
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress)
+			return false;
 		return this.getCombatProgress() <= 0.0F;
 	}
 
 	@Override
 	public boolean isDeadOrDying() {
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress)
+			return false;
 		return this.getCombatProgress() <= 0.0F;
 	}
 
 	public boolean isAlive() {
-		return !this.isRemoved() && this.getCombatProgress() > 0.0F;
+		if (isRemoved()) return false;
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress)
+			return true;
+		return this.getCombatProgress() > 0.0F;
+	}
+
+	protected float getVanillaProgress() {
+		return super.getHealth();
 	}
 
 	public void setCombatProgress(float amount) {
@@ -359,12 +382,16 @@
 
 	@Override
 	protected void tickDeath() {
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress)
+			return;
 		if (getCombatProgress() > 0) return;
 		super.tickDeath();
 	}
 
 	@Override
 	public void die(DamageSource source) {
+		if (combatProgress == null || getCombatProgress() != combatProgress.progress)
+			return;
 		if (getCombatProgress() > 0) return;
 		super.die(source);
 	}
@@ -373,7 +400,13 @@
 	@Override
 	public LivingEntity getTarget() {
 		LivingEntity ans = super.getTarget();
-		if (ans == null || invalidTarget(ans)) return null;
+		if (ans == null || invalidTarget(ans)) {
+			var candidates = targets.getTargets();
+			if (!candidates.isEmpty()) {
+				return candidates.get(0);
+			}
+			return null;
+		}
 		return ans;
 	}
 
@@ -434,4 +467,24 @@
 		return YHDamageTypes.danmaku(danmaku);
 	}
 
+	private final List<SimplifiedProjectile> allDanmakus = new ArrayList<>();
+
+	public void shoot(Entity danmaku) {
+		self().level().addFreshEntity(danmaku);
+		if (danmaku instanceof SimplifiedProjectile proj)
+			allDanmakus.add(proj);
+	}
+
+	/**
+	 * allow out-of-chunk danmaku to still be ticked
+	 */
+	private void tickDanmaku() {
+		for (var e : allDanmakus) {
+			if (e.isRemoved() && e.isValid()) {
+				e.tick();
+			}
+		}
+		allDanmakus.removeIf(e -> e.isRemoved() && !e.isValid());
+	}
+
 }
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiTargetContainer.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiTargetContainer.java b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiTargetContainer.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiTargetContainer.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/entity/youkai/YoukaiTargetContainer.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,5 +1,6 @@
 package dev.xkmc.youkaishomecoming.content.entity.youkai;
 
+import dev.xkmc.fastprojectileapi.collision.EntityStorageHelper;
 import dev.xkmc.l2serial.serialization.SerialClass;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
@@ -27,26 +28,37 @@
 	public void tick() {
 		if (youkai.level().isClientSide()) return;
 		LivingEntity le = youkai.getLastHurtByMob();
-		if (le != null && le.isAlive() && le.canBeSeenAsEnemy() && !list.contains(le.getUUID())) {
+		if (le != null && isValid(le) && !list.contains(le.getUUID())) {
 			list.add(le.getUUID());
 		} else {
 			le = youkai.getTarget();
-			if (le != null && le.isAlive() && le.canBeSeenAsEnemy()) {
-				list.add(le.getUUID());
-			}
+			if (le != null)
+				if (isValid(le))
+					list.add(le.getUUID());
+				else youkai.setTarget(null);
 		}
 		list.removeIf(e -> !isValid(e));
 		if (list.size() > maxSize) {
 			var tmp = new ArrayList<>(list);
 			list.clear();
-			list.addAll(tmp.subList(list.size() - maxSize, list.size()));
+			list.addAll(tmp.subList(tmp.size() - maxSize, tmp.size()));
 		}
 	}
+
+	public void remove(UUID id) {
+		list.remove(id);
+	}
+
+	private boolean isValid(LivingEntity le) {
+		return le.isAlive() && le != youkai && le.canBeSeenAsEnemy() &&
+				le.isAddedToWorld() && le.level() == youkai.level() &&
+				EntityStorageHelper.isPresent(le);
+	}
 
 	private boolean isValid(UUID id) {
 		Entity e = ((ServerLevel) youkai.level()).getEntity(id);
-		if (e instanceof LivingEntity le && le.isAlive()) {
-			return le.canBeSeenAsEnemy();
+		if (e instanceof LivingEntity le) {
+			return isValid(le);
 		}
 		return false;
 	}
@@ -58,11 +70,11 @@
 	public void checkTarget() {
 		if (!(youkai.level() instanceof ServerLevel sl)) return;
 		var last = youkai.getLastHurtByMob();
-		if ((last == null || !last.isAlive() || !last.canBeSeenAsEnemy()) && !list.isEmpty()) {
+		if ((last == null || !isValid(last)) && !list.isEmpty()) {
 			var tmp = new ArrayList<>(list);
 			var id = tmp.get(tmp.size() - 1);
 			Entity e = sl.getEntity(id);
-			if (e instanceof LivingEntity le && le.isAlive() && le.canBeSeenAsEnemy())
+			if (e instanceof LivingEntity le && isValid(le))
 				youkai.setLastHurtByMob(le);
 		}
 	}
@@ -72,7 +84,7 @@
 		if (!(youkai.level() instanceof ServerLevel sl)) return ans;
 		for (var id : list) {
 			Entity e = sl.getEntity(id);
-			if (e instanceof LivingEntity le && le.isAlive() && le.canBeSeenAsEnemy())
+			if (e instanceof LivingEntity le && isValid(le))
 				ans.add(le);
 		}
 		return ans;
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/StrawHatItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/StrawHatItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/StrawHatItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/StrawHatItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/StrawHatItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -4,6 +4,7 @@
 import dev.xkmc.youkaishomecoming.content.client.HatModel;
 import dev.xkmc.youkaishomecoming.content.client.SuwakoHatModel;
 import dev.xkmc.youkaishomecoming.content.item.food.FleshFoodItem;
+import dev.xkmc.youkaishomecoming.content.item.food.IFleshFoodItem;
 import dev.xkmc.youkaishomecoming.events.EffectEventHandlers;
 import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
 import dev.xkmc.youkaishomecoming.init.data.YHLangData;
@@ -66,7 +67,7 @@
 	@Override
 	public void appendHoverText(ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag flag) {
 		super.appendHoverText(stack, level, list, flag);
-		Player player = FleshFoodItem.getPlayer();
+		Player player = IFleshFoodItem.getPlayer();
 		if (player == null) return;
 		boolean obtain = showTooltip();
 		Component obt;
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/TouhouHatItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/TouhouHatItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/TouhouHatItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/TouhouHatItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/curio/hat/TouhouHatItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -4,6 +4,7 @@
 import com.google.common.collect.Multimap;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.IYHDanmaku;
 import dev.xkmc.youkaishomecoming.content.item.food.FleshFoodItem;
+import dev.xkmc.youkaishomecoming.content.item.food.IFleshFoodItem;
 import dev.xkmc.youkaishomecoming.events.EffectEventHandlers;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -21,7 +22,7 @@
 public class TouhouHatItem extends ArmorItem {
 
 	public static boolean showTooltip() {
-		Player player = FleshFoodItem.getPlayer();
+		Player player = IFleshFoodItem.getPlayer();
 		if (player == null) return false;
 		if (player.getAbilities().instabuild)
 			return true;
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/BottledFluid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/BottledFluid.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/BottledFluid.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/BottledFluid.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/BottledFluid.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -14,7 +14,7 @@
 
 import java.util.function.Supplier;
 
-public class BottledFluid<T extends SakeBottleItem> implements IYHSake {
+public class BottledFluid<T extends SakeBottleItem> implements IYHFluidHolder {
 
 	public static final ResourceLocation WATER_FLOW = new ResourceLocation("block/water_flow");
 	public static final ResourceLocation WATER_STILL = new ResourceLocation("block/water_still");
@@ -22,7 +22,7 @@
 	public static final ResourceLocation SOLID_FLOW = new ResourceLocation(YoukaisHomecoming.MODID, "block/water_flow");
 	public static final ResourceLocation SOLID_STILL = new ResourceLocation(YoukaisHomecoming.MODID, "block/water_still");
 
-	public static <T extends SakeFluid> FluidBuilder<T, L2Registrate> virtualFluid(
+	public static <T extends YHFluid> FluidBuilder<T, L2Registrate> virtualFluid(
 			String id, ResourceLocation flow, ResourceLocation still,
 			FluidBuilder.FluidTypeFactory typeFactory, NonNullFunction<ForgeFlowingFluid.Properties, T> factory) {
 		return YoukaisHomecoming.REGISTRATE.entry(id, (c) -> new VirtualFluidBuilder<>(
@@ -30,12 +30,12 @@
 				id, c, still, flow, typeFactory, factory));
 	}
 
-	public static <T extends SakeFluid> FluidBuilder<T, L2Registrate> water(
+	public static <T extends YHFluid> FluidBuilder<T, L2Registrate> water(
 			String id, FluidBuilder.FluidTypeFactory typeFactory, NonNullFunction<ForgeFlowingFluid.Properties, T> factory) {
 		return virtualFluid(id, WATER_FLOW, WATER_STILL, typeFactory, factory);
 	}
 
-	public static <T extends SakeFluid> FluidBuilder<T, L2Registrate> solid(
+	public static <T extends YHFluid> FluidBuilder<T, L2Registrate> solid(
 			String id, FluidBuilder.FluidTypeFactory typeFactory, NonNullFunction<ForgeFlowingFluid.Properties, T> factory) {
 		return virtualFluid(id, SOLID_FLOW, SOLID_STILL, typeFactory, factory);
 	}
@@ -44,13 +44,13 @@
 	private final Supplier<Item> container;
 
 	public final ItemEntry<T> item;
-	public final FluidEntry<SakeFluid> fluid;
+	public final FluidEntry<YHFluid> fluid;
 
-	public BottledFluid(String id, int color, Supplier<Item> container, String path, NonNullBiFunction<Supplier<SakeFluid>, Item.Properties, T> factory) {
+	public BottledFluid(String id, int color, Supplier<Item> container, String path, NonNullBiFunction<Supplier<YHFluid>, Item.Properties, T> factory) {
 		this.color = color;
 		this.container = container;
 
-		fluid = solid(id, (p, s, f) -> new SakeFluidType(p, s, f, this), p -> new SakeFluid(p, this))
+		fluid = solid(id, (p, s, f) -> new YHFluidType(p, s, f, this), p -> new YHFluid(p, this))
 				.defaultLang().register();
 
 		item = YoukaisHomecoming.REGISTRATE
@@ -81,7 +81,7 @@
 	}
 
 	@Override
-	public FluidEntry<? extends SakeFluid> fluid() {
+	public FluidEntry<? extends YHFluid> fluid() {
 		return fluid;
 	}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientFruitFluid.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientFruitFluid.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientYHFluid.java
rename from src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientFruitFluid.java
rename to src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientYHFluid.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientFruitFluid.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/ClientYHFluid.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,8 +3,9 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraftforge.client.extensions.common.IClientFluidTypeExtensions;
 
-public record ClientFruitFluid(SakeFluidType type) implements IClientFluidTypeExtensions {
-	public ClientFruitFluid(SakeFluidType type) {
+public record ClientYHFluid(YHFluidType type) implements IClientFluidTypeExtensions {
+
+	public ClientYHFluid(YHFluidType type) {
 		this.type = type;
 	}
 
@@ -20,7 +21,7 @@
 		return this.type.type.getColor();
 	}
 
-	public SakeFluidType type() {
+	public YHFluidType type() {
 		return this.type;
 	}
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/FluidColorHelper.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/FluidColorHelper.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/FluidColorHelper.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/FluidColorHelper.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,21 @@
+package dev.xkmc.youkaishomecoming.content.item.fluid;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.world.inventory.InventoryMenu;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraftforge.client.extensions.common.IClientFluidTypeExtensions;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.FluidType;
+
+public class FluidColorHelper {
+
+	public static int getColor(FluidStack fluidStack) {
+		Fluid fluid = fluidStack.getFluid();
+		IClientFluidTypeExtensions clientFluid = IClientFluidTypeExtensions.of(fluid);
+		FluidType fluidAttributes = fluid.getFluidType();
+		TextureAtlasSprite fluidTexture = Minecraft.getInstance().getTextureAtlas(InventoryMenu.BLOCK_ATLAS).apply(clientFluid.getStillTexture(fluidStack));
+		return clientFluid.getTintColor(fluidStack);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHSake.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHSake.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHFluidHolder.java
rename from src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHSake.java
rename to src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHFluidHolder.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHSake.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/IYHFluidHolder.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -5,7 +5,7 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 
-public interface IYHSake {
+public interface IYHFluidHolder {
 
 	int getColor();
 
@@ -15,7 +15,7 @@
 
 	ItemEntry<?> item();
 
-	FluidEntry<? extends SakeFluid> fluid();
+	FluidEntry<? extends YHFluid> fluid();
 
 	default int count() {
 		return 4;
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeBottleItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeBottleItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeBottleItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeBottleItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeBottleItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,5 +1,6 @@
 package dev.xkmc.youkaishomecoming.content.item.fluid;
 
+import dev.xkmc.youkaishomecoming.content.item.food.YHDrinkItem;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
@@ -8,9 +9,9 @@
 import javax.annotation.Nullable;
 import java.util.function.Supplier;
 
-public class SakeBottleItem extends Item {
+public class SakeBottleItem extends YHDrinkItem {
 
-	public SakeBottleItem(Supplier<SakeFluid> supplier, Item.Properties builder) {
+	public SakeBottleItem(Supplier<YHFluid> supplier, Item.Properties builder) {
 		super(builder);
 		this.fluidSupplier = supplier;
 	}
@@ -22,9 +23,9 @@
 		else return super.initCapabilities(stack, nbt);
 	}
 
-	private final Supplier<SakeFluid> fluidSupplier;
+	private final Supplier<YHFluid> fluidSupplier;
 
-	public SakeFluid getFluid() {
+	public YHFluid getFluid() {
 		return fluidSupplier.get();
 	}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidWrapper.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidWrapper.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidWrapper.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidWrapper.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -29,7 +29,7 @@
 	}
 
 	public boolean canFillFluidType(FluidStack fluid) {
-		return fluid.getFluid() instanceof SakeFluid sake &&
+		return fluid.getFluid() instanceof YHFluid sake &&
 				sake.type.getContainer() == container.getItem();
 	}
 
@@ -44,7 +44,7 @@
 	protected void setFluid(@NotNull FluidStack fluidStack) {
 		if (fluidStack.isEmpty()) {
 			container = container.getCraftingRemainingItem();
-		} else if (fluidStack.getFluid() instanceof SakeFluid sake) {
+		} else if (fluidStack.getFluid() instanceof YHFluid sake) {
 			container = sake.type.asStack(fluidStack.getAmount() / sake.type.amount());
 		}
 	}
@@ -67,7 +67,7 @@
 
 	@Override
 	public boolean isFluidValid(int tank, @NotNull FluidStack stack) {
-		return stack.isEmpty() || stack.getFluid() instanceof SakeFluid sake && sake.type.getContainer() == container.getItem();
+		return stack.isEmpty() || stack.getFluid() instanceof YHFluid sake && sake.type.getContainer() == container.getItem();
 	}
 
 	@Override
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipBottleItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipBottleItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipBottleItem.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipBottleItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,137 @@
+package dev.xkmc.youkaishomecoming.content.item.fluid;
+
+import dev.xkmc.l2library.base.effects.EffectBuilder;
+import dev.xkmc.youkaishomecoming.content.item.food.YHDrinkItem;
+import dev.xkmc.youkaishomecoming.init.food.YHDrink;
+import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResultHolder;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.TooltipFlag;
+import net.minecraft.world.level.Level;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.common.capabilities.ICapabilityProvider;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.IFluidHandler;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public class SlipBottleItem extends YHDrinkItem {
+
+	public SlipBottleItem(Properties builder) {
+		super(builder);
+	}
+
+	@Override
+	public boolean isEdible() {
+		return true;
+	}
+
+	@Override
+	public InteractionResultHolder<ItemStack> use(Level level, Player player, InteractionHand hand) {
+		var stack = player.getItemInHand(hand);
+		if (getFoodProperties(stack, player) == null)
+			return InteractionResultHolder.pass(stack);
+		return super.use(level, player, hand);
+	}
+
+	@Override
+	public @Nullable FoodProperties getFoodProperties(ItemStack stack, @Nullable LivingEntity entity) {
+		var handler = stack.getCapability(ForgeCapabilities.FLUID_HANDLER_ITEM).resolve();
+		if (handler.isEmpty()) return null;
+		var fluid = handler.get().getFluidInTank(0);
+		if (fluid.isEmpty()) return null;
+		if (fluid.getFluid() instanceof YHFluid sake && sake.type instanceof YHDrink type) {
+			var food = type.item.asStack().getFoodProperties(entity);
+			if (food == null) return null;
+			var builder = new FoodProperties.Builder();
+			if (food.canAlwaysEat()) builder.alwaysEat();
+			for (var e : food.getEffects()) {
+				var ins = e.getFirst();
+				var ans = new EffectBuilder(ins);
+				if (ins.getEffect() == YHEffects.DRUNK.get()) {
+					int amp = ins.getAmplifier() + 1;
+					ans.setDuration(amp * ins.getDuration() / 5);
+					ans.setAmplifier(0);
+				} else {
+					ans.setDuration(ins.getDuration() / 5);
+				}
+				builder.effect(() -> ans.ins, e.getSecond());
+			}
+			return builder.build();
+		}
+		return null;
+	}
+
+	@Override
+	public ItemStack finishUsingItem(ItemStack stack, Level level, LivingEntity user) {
+		var handler = stack.getCapability(ForgeCapabilities.FLUID_HANDLER_ITEM).resolve();
+		if (handler.isEmpty() || !(handler.get() instanceof SlipFluidWrapper slip)) return stack;
+		var fluid = slip.getFluid();
+		super.finishUsingItem(stack, level, user);
+		slip.getContainer().setCount(1);
+		slip.setFluid(fluid);
+		slip.drain(50, IFluidHandler.FluidAction.EXECUTE);
+		return slip.getContainer();
+	}
+
+	@Override
+	public int getUseDuration(ItemStack stack) {
+		return 10;
+	}
+
+	@Override
+	public ICapabilityProvider initCapabilities(ItemStack stack, @Nullable CompoundTag nbt) {
+		if (this instanceof SlipBottleItem)
+			return new SlipFluidWrapper(stack);
+		else return super.initCapabilities(stack, nbt);
+	}
+
+	public static FluidStack getFluid(ItemStack stack) {
+		return stack.getCapability(ForgeCapabilities.FLUID_HANDLER_ITEM).resolve()
+				.map(h -> h.getFluidInTank(0)).orElse(FluidStack.EMPTY);
+	}
+
+	@Override
+	public void appendHoverText(ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag flag) {
+		var fluid = getFluid(stack);
+		if (!fluid.isEmpty() && fluid.getFluid() instanceof YHFluid sake && sake.type instanceof YHDrink type) {
+			list.add(type.item.get().getDescription());
+		}
+		super.appendHoverText(stack, level, list, flag);
+	}
+
+	public static int color(ItemStack stack, int layer) {
+		if (layer != 1) return -1;
+		var fluid = getFluid(stack);
+		if (fluid.isEmpty()) return -1;
+		return FluidColorHelper.getColor(fluid);
+	}
+
+	public static float texture(ItemStack stack) {
+		var fluid = getFluid(stack);
+		if (fluid.isEmpty()) return 0;
+		return 1;
+	}
+
+	@Override
+	public boolean isBarVisible(ItemStack stack) {
+		return !getFluid(stack).isEmpty();
+	}
+
+	@Override
+	public int getBarWidth(ItemStack stack) {
+		return 13 * getFluid(stack).getAmount() / 1000;
+	}
+
+	public int getBarColor(ItemStack stack) {
+		return -1;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipFluidWrapper.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipFluidWrapper.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipFluidWrapper.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SlipFluidWrapper.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,125 @@
+package dev.xkmc.youkaishomecoming.content.item.fluid;
+
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.item.ItemStack;
+import net.minecraftforge.common.capabilities.Capability;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.common.capabilities.ICapabilityProvider;
+import net.minecraftforge.common.util.LazyOptional;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.IFluidHandlerItem;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class SlipFluidWrapper implements IFluidHandlerItem, ICapabilityProvider {
+
+	private final LazyOptional<IFluidHandlerItem> holder = LazyOptional.of(() -> this);
+
+	protected ItemStack container;
+
+	public SlipFluidWrapper(ItemStack container) {
+		this.container = container;
+	}
+
+	@NotNull
+	@Override
+	public ItemStack getContainer() {
+		return container;
+	}
+
+	public boolean canFillFluidType(FluidStack fluid) {
+		return fluid.getFluid() instanceof YHFluid;
+	}
+
+	@NotNull
+	public FluidStack getFluid() {
+		var root = container.getTag();
+		if (root == null || !root.contains("SakeFluid", Tag.TAG_COMPOUND)) return FluidStack.EMPTY;
+		return FluidStack.loadFluidStackFromNBT(root.getCompound("SakeFluid"));
+	}
+
+	protected void setFluid(@NotNull FluidStack fluidStack) {
+		if (fluidStack.isEmpty()) {
+			if (container.getTag() == null) return;
+			container.getOrCreateTag().remove("SakeFluid");
+			if (container.getOrCreateTag().isEmpty()) {
+				container.setTag(null);
+			}
+		}
+		container.getOrCreateTag().put("SakeFluid", fluidStack.writeToNBT(new CompoundTag()));
+	}
+
+	@Override
+	public int getTanks() {
+		return 1;
+	}
+
+	@NotNull
+	@Override
+	public FluidStack getFluidInTank(int tank) {
+		return getFluid();
+	}
+
+	@Override
+	public int getTankCapacity(int tank) {
+		return 1000;
+	}
+
+	@Override
+	public boolean isFluidValid(int tank, @NotNull FluidStack stack) {
+		return stack.isEmpty() || stack.getFluid() instanceof YHFluid;
+	}
+
+	@Override
+	public int fill(FluidStack resource, FluidAction action) {
+		if (resource.isEmpty()) return 0;
+		var current = getFluid();
+		if (current.isEmpty() || current.isFluidEqual(resource)) {
+			int toFill = Math.min(getTankCapacity(0) - current.getAmount(), resource.getAmount());
+			if (action.execute()) {
+				var copy = resource.copy();
+				copy.setAmount(toFill + current.getAmount());
+				setFluid(copy);
+			}
+			return toFill;
+		}
+		return 0;
+	}
+
+	@NotNull
+	@Override
+	public FluidStack drain(FluidStack resource, FluidAction action) {
+		if (resource.isEmpty()) return FluidStack.EMPTY;
+		var current = getFluid();
+		if (current.isEmpty()) return FluidStack.EMPTY;
+		if (current.isFluidEqual(resource)) {
+			return drain(resource.getAmount(), action);
+		}
+		return FluidStack.EMPTY;
+	}
+
+	@NotNull
+	@Override
+	public FluidStack drain(int maxDrain, FluidAction action) {
+		var current = getFluid();
+		if (current.isEmpty()) return FluidStack.EMPTY;
+		int toDrain = Math.min(current.getAmount(), maxDrain);
+		var ans = current.copy();
+		ans.setAmount(toDrain);
+		if (action.execute()) {
+			var copy = current.copy();
+			copy.setAmount(current.getAmount() - toDrain);
+			setFluid(copy);
+		}
+		return ans;
+	}
+
+	@Override
+	@NotNull
+	public <T> LazyOptional<T> getCapability(@NotNull Capability<T> capability, @Nullable Direction facing) {
+		return ForgeCapabilities.FLUID_HANDLER_ITEM.orEmpty(capability, holder);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluid.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluid.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluid.java
rename from src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluid.java
rename to src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluid.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluid.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluid.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -8,10 +8,10 @@
 import net.minecraft.world.level.material.FluidState;
 import net.minecraftforge.fluids.ForgeFlowingFluid;
 
-public class SakeFluid extends ForgeFlowingFluid {
-	public final IYHSake type;
+public class YHFluid extends ForgeFlowingFluid {
+	public final IYHFluidHolder type;
 
-	public SakeFluid(ForgeFlowingFluid.Properties properties, IYHSake type) {
+	public YHFluid(ForgeFlowingFluid.Properties properties, IYHFluidHolder type) {
 		super(properties);
 		this.type = type;
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidType.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidType.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluidType.java
rename from src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidType.java
rename to src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluidType.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/SakeFluidType.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/fluid/YHFluidType.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -6,12 +6,12 @@
 
 import java.util.function.Consumer;
 
-public class SakeFluidType extends FluidType {
+public class YHFluidType extends FluidType {
 	final ResourceLocation stillTexture;
 	final ResourceLocation flowingTexture;
-	final IYHSake type;
+	final IYHFluidHolder type;
 
-	public SakeFluidType(FluidType.Properties properties, ResourceLocation stillTexture, ResourceLocation flowingTexture, IYHSake type) {
+	public YHFluidType(FluidType.Properties properties, ResourceLocation stillTexture, ResourceLocation flowingTexture, IYHFluidHolder type) {
 		super(properties);
 		this.stillTexture = stillTexture;
 		this.flowingTexture = flowingTexture;
@@ -19,6 +19,6 @@
 	}
 
 	public void initializeClient(Consumer<IClientFluidTypeExtensions> consumer) {
-		consumer.accept(new ClientFruitFluid(this));
+		consumer.accept(new ClientYHFluid(this));
 	}
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshBlockItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshBlockItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshBlockItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshBlockItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshBlockItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -16,7 +16,7 @@
 
 	@Override
 	public Component getName(ItemStack pStack) {
-		Player player = FleshFoodItem.getPlayer();
+		Player player = IFleshFoodItem.getPlayer();
 		Component name;
 		if (player != null && player.hasEffect(YHEffects.YOUKAIFIED.get())) {
 			name = YHLangData.FLESH_NAME_YOUKAI.get();
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshFoodItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshFoodItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshFoodItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshFoodItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshFoodItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,143 +1,36 @@
 package dev.xkmc.youkaishomecoming.content.item.food;
 
-import dev.xkmc.youkaishomecoming.content.item.curio.hat.TouhouHatItem;
-import dev.xkmc.youkaishomecoming.events.ReimuEventHandlers;
-import dev.xkmc.youkaishomecoming.init.data.YHLangData;
-import dev.xkmc.youkaishomecoming.init.data.YHModConfig;
-import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
-import dev.xkmc.youkaishomecoming.init.food.YHFood;
-import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
 import net.minecraft.network.chat.Component;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.effect.MobEffectInstance;
-import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.TooltipFlag;
 import net.minecraft.world.level.Level;
-import net.minecraftforge.api.distmarker.Dist;
-import net.minecraftforge.fml.loading.FMLEnvironment;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 
-public class FleshFoodItem extends YHFoodItem {
+public class FleshFoodItem extends YHFoodItem implements IFleshFoodItem {
 
 	public FleshFoodItem(Properties props) {
 		super(props);
 	}
 
-	@Nullable
-	public static Player getPlayer() {
-		if (FMLEnvironment.dist == Dist.CLIENT) {
-			return FleshHelper.getPlayerOnClient();
-		}
-		return null;
-	}
-
 	@Override
 	public @Nullable FoodProperties getFoodProperties(ItemStack stack, @Nullable LivingEntity entity) {
-		FoodProperties old = super.getFoodProperties(stack, entity);
-		if (old == null) return null;
-		int factor = 1;
-		if (entity != null) {
-			if (entity.hasEffect(YHEffects.YOUKAIFIED.get())) {
-				factor = 3;
-			} else if (entity.hasEffect(YHEffects.YOUKAIFYING.get())) {
-				factor = 2;
-			}
-		}
-		var builder = new FoodProperties.Builder();
-		builder.nutrition(old.getNutrition() * factor);
-		builder.saturationMod(old.getSaturationModifier());
-		if (old.canAlwaysEat()) builder.alwaysEat();
-		if (old.isFastFood()) builder.fast();
-		if (old.isMeat()) builder.meat();
-		for (var ent : old.getEffects()) {
-			if (!ent.getFirst().getEffect().isBeneficial() || factor > 1) {
-				builder.effect(ent::getFirst, ent.getSecond());
-			}
-		}
-		return builder.build();
+		return getFleshFoodProps(super.getFoodProperties(stack, entity), entity);
 	}
 
 	@Override
 	public void appendHoverText(ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag flag) {
 		super.appendHoverText(stack, level, list, flag);
-		Player player = getPlayer();
-		if (player == null) return;
-		if (player.hasEffect(YHEffects.YOUKAIFIED.get())) {
-			list.add(YHLangData.FLESH_TASTE_YOUKAI.get());
-		} else if (player.hasEffect(YHEffects.YOUKAIFYING.get())) {
-			list.add(YHLangData.FLESH_TASTE_HALF_YOUKAI.get());
-		} else if (getDefaultInstance().is(YHTagGen.APPARENT_FLESH_FOOD)) {
-			list.add(YHLangData.FLESH_TASTE_HUMAN.get());
-		}
-		if (this == YHFood.FLESH.item.get()) {
-			boolean obtain = TouhouHatItem.showTooltip();
-			Component obt;
-			if (obtain) {
-				var fying = Component.translatable(YHEffects.YOUKAIFYING.get().getDescriptionId());
-				var fied = Component.translatable(YHEffects.YOUKAIFIED.get().getDescriptionId());
-				obt = YHLangData.OBTAIN_FLESH.get(fying, fied);
-			} else {
-				obt = YHLangData.UNKNOWN.get();
-			}
-			list.add(YHLangData.OBTAIN.get().append(obt));
-		}
+		appendFleshText(stack, level, list, flag);
 	}
 
 	@Override
 	public Component getName(ItemStack pStack) {
-		Player player = getPlayer();
-		Component name;
-		if (player != null && player.hasEffect(YHEffects.YOUKAIFIED.get())) {
-			name = YHLangData.FLESH_NAME_YOUKAI.get();
-		} else {
-			name = YHLangData.FLESH_NAME_HUMAN.get();
-		}
-		return Component.translatable(this.getDescriptionId(pStack), name);
-	}
-
-	public void consume(Player consumer) {
-		if (consumer.level().isClientSide()) return;
-		if (consumer.hasEffect(YHEffects.YOUKAIFIED.get())) {
-			var eff = consumer.getEffect(YHEffects.YOUKAIFIED.get());
-			if (eff != null) {
-				int dur = eff.getDuration() + YHModConfig.COMMON.youkaifiedProlongation.get();
-				consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFIED.get(),
-						dur, 0, true, false, true));
-			}
-		} else if (consumer.hasEffect(YHEffects.YOUKAIFYING.get())) {
-			var eff = consumer.getEffect(YHEffects.YOUKAIFYING.get());
-			if (eff != null) {
-				int dur = eff.getDuration() + YHModConfig.COMMON.youkaifyingTime.get();
-				if (dur > YHModConfig.COMMON.youkaifyingThreshold.get()) {
-					dur = YHModConfig.COMMON.youkaifiedDuration.get();
-					consumer.removeEffect(YHEffects.YOUKAIFYING.get());
-					consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFIED.get(),
-							dur, 0, true, false, true));
-				} else {
-					consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFYING.get(),
-							dur, 0, false, false, false));
-				}
-			}
-		} else {
-			if (consumer.getRandom().nextDouble() < YHModConfig.COMMON.youkaifyingChance.get()) {
-				int dur = YHModConfig.COMMON.youkaifyingTime.get();
-				consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFYING.get(),
-						dur, 0, false, false, false));
-				dur = YHModConfig.COMMON.youkaifyingConfusionTime.get();
-				consumer.addEffect(new MobEffectInstance(MobEffects.CONFUSION,
-						dur, 0, false, false, true));
-			}
-		}
-		if (getDefaultInstance().is(YHTagGen.APPARENT_FLESH_FOOD) && consumer instanceof ServerPlayer sp) {
-			ReimuEventHandlers.triggerReimuResponse(sp, 24, true);
-		}
+		return getFleshName(pStack);
 	}
 
 	@Override
@@ -148,9 +41,4 @@
 		return ans;
 	}
 
-	@Override
-	public void inventoryTick(ItemStack pStack, Level pLevel, Entity pEntity, int pSlotId, boolean pIsSelected) {
-		super.inventoryTick(pStack, pLevel, pEntity, pSlotId, pIsSelected);
-	}
-
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSaucerItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSaucerItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSaucerItem.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSaucerItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,45 @@
+package dev.xkmc.youkaishomecoming.content.item.food;
+
+import net.minecraft.network.chat.Component;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.TooltipFlag;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public class FleshSaucerItem extends FoodSaucerItem implements IFleshFoodItem {
+
+	public FleshSaucerItem(Block pBlock, Properties pProperties) {
+		super(pBlock, pProperties);
+	}
+
+	@Override
+	public @Nullable FoodProperties getFoodProperties(ItemStack stack, @Nullable LivingEntity entity) {
+		return getFleshFoodProps(super.getFoodProperties(stack, entity), entity);
+	}
+
+	@Override
+	public void appendHoverText(ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag flag) {
+		super.appendHoverText(stack, level, list, flag);
+		appendFleshText(stack, level, list, flag);
+	}
+
+	@Override
+	public Component getName(ItemStack pStack) {
+		return getFleshName(pStack);
+	}
+
+	@Override
+	public ItemStack finishUsingItem(ItemStack stack, Level worldIn, LivingEntity consumer) {
+		ItemStack ans = super.finishUsingItem(stack, worldIn, consumer);
+		if (!(consumer instanceof Player player)) return ans;
+		consume(player);
+		return ans;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSimpleItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSimpleItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSimpleItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSimpleItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/FleshSimpleItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -15,7 +15,7 @@
 
 	@Override
 	public Component getName(ItemStack pStack) {
-		Player player = FleshFoodItem.getPlayer();
+		Player player = IFleshFoodItem.getPlayer();
 		Component name;
 		if (player != null && player.hasEffect(YHEffects.YOUKAIFIED.get())) {
 			name = YHLangData.FLESH_NAME_YOUKAI.get();
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/IFleshFoodItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/IFleshFoodItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/IFleshFoodItem.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/IFleshFoodItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,134 @@
+package dev.xkmc.youkaishomecoming.content.item.food;
+
+import dev.xkmc.youkaishomecoming.content.item.curio.hat.TouhouHatItem;
+import dev.xkmc.youkaishomecoming.events.ReimuEventHandlers;
+import dev.xkmc.youkaishomecoming.init.data.YHLangData;
+import dev.xkmc.youkaishomecoming.init.data.YHModConfig;
+import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
+import dev.xkmc.youkaishomecoming.init.food.YHFood;
+import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
+import net.minecraft.network.chat.Component;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.TooltipFlag;
+import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.Level;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.fml.loading.FMLEnvironment;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public interface IFleshFoodItem extends ItemLike {
+
+	@Nullable
+	static Player getPlayer() {
+		if (FMLEnvironment.dist == Dist.CLIENT) {
+			return FleshHelper.getPlayerOnClient();
+		}
+		return null;
+	}
+
+	default @Nullable FoodProperties getFleshFoodProps(@Nullable FoodProperties old, @Nullable LivingEntity entity) {
+		if (old == null) return null;
+		int factor = 1;
+		if (entity != null) {
+			if (entity.hasEffect(YHEffects.YOUKAIFIED.get())) {
+				factor = 3;
+			} else if (entity.hasEffect(YHEffects.YOUKAIFYING.get())) {
+				factor = 2;
+			}
+		}
+		var builder = new FoodProperties.Builder();
+		builder.nutrition(old.getNutrition() * factor);
+		builder.saturationMod(old.getSaturationModifier());
+		if (old.canAlwaysEat()) builder.alwaysEat();
+		if (old.isFastFood()) builder.fast();
+		if (old.isMeat()) builder.meat();
+		for (var ent : old.getEffects()) {
+			if (!ent.getFirst().getEffect().isBeneficial() || factor > 1) {
+				builder.effect(ent::getFirst, ent.getSecond());
+			}
+		}
+		return builder.build();
+	}
+
+	default void appendFleshText(ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag flag) {
+		Player player = getPlayer();
+		if (player == null) return;
+		if (player.hasEffect(YHEffects.YOUKAIFIED.get())) {
+			list.add(YHLangData.FLESH_TASTE_YOUKAI.get());
+		} else if (player.hasEffect(YHEffects.YOUKAIFYING.get())) {
+			list.add(YHLangData.FLESH_TASTE_HALF_YOUKAI.get());
+		} else if (asItem().getDefaultInstance().is(YHTagGen.APPARENT_FLESH_FOOD)) {
+			list.add(YHLangData.FLESH_TASTE_HUMAN.get());
+		}
+		if (asItem() == YHFood.FLESH.item.get()) {
+			boolean obtain = TouhouHatItem.showTooltip();
+			Component obt;
+			if (obtain) {
+				var fying = Component.translatable(YHEffects.YOUKAIFYING.get().getDescriptionId());
+				var fied = Component.translatable(YHEffects.YOUKAIFIED.get().getDescriptionId());
+				obt = YHLangData.OBTAIN_FLESH.get(fying, fied);
+			} else {
+				obt = YHLangData.UNKNOWN.get();
+			}
+			list.add(YHLangData.OBTAIN.get().append(obt));
+		}
+	}
+
+	default Component getFleshName(ItemStack pStack) {
+		Player player = getPlayer();
+		Component name;
+		if (player != null && player.hasEffect(YHEffects.YOUKAIFIED.get())) {
+			name = YHLangData.FLESH_NAME_YOUKAI.get();
+		} else {
+			name = YHLangData.FLESH_NAME_HUMAN.get();
+		}
+		return Component.translatable(asItem().getDescriptionId(pStack), name);
+	}
+
+	default void consume(Player consumer) {
+		if (consumer.level().isClientSide()) return;
+		if (consumer.hasEffect(YHEffects.YOUKAIFIED.get())) {
+			var eff = consumer.getEffect(YHEffects.YOUKAIFIED.get());
+			if (eff != null) {
+				int dur = eff.getDuration() + YHModConfig.COMMON.youkaifiedProlongation.get();
+				consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFIED.get(),
+						dur, 0, true, false, true));
+			}
+		} else if (consumer.hasEffect(YHEffects.YOUKAIFYING.get())) {
+			var eff = consumer.getEffect(YHEffects.YOUKAIFYING.get());
+			if (eff != null) {
+				int dur = eff.getDuration() + YHModConfig.COMMON.youkaifyingTime.get();
+				if (dur > YHModConfig.COMMON.youkaifyingThreshold.get()) {
+					dur = YHModConfig.COMMON.youkaifiedDuration.get();
+					consumer.removeEffect(YHEffects.YOUKAIFYING.get());
+					consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFIED.get(),
+							dur, 0, true, false, true));
+				} else {
+					consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFYING.get(),
+							dur, 0, false, false, false));
+				}
+			}
+		} else {
+			if (consumer.getRandom().nextDouble() < YHModConfig.COMMON.youkaifyingChance.get()) {
+				int dur = YHModConfig.COMMON.youkaifyingTime.get();
+				consumer.addEffect(new MobEffectInstance(YHEffects.YOUKAIFYING.get(),
+						dur, 0, false, false, false));
+				dur = YHModConfig.COMMON.youkaifyingConfusionTime.get();
+				consumer.addEffect(new MobEffectInstance(MobEffects.CONFUSION,
+						dur, 0, false, false, true));
+			}
+		}
+		if (asItem().getDefaultInstance().is(YHTagGen.APPARENT_FLESH_FOOD) && consumer instanceof ServerPlayer sp) {
+			ReimuEventHandlers.triggerReimuResponse(sp, 24, true);
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHDrinkItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHDrinkItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHDrinkItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHDrinkItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHDrinkItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -49,7 +49,7 @@
 			for (var e : food.getEffects()) {
 				if (e.getFirst().getEffect() == YHEffects.DRUNK.get()) {
 					var eff = new EffectBuilder(new MobEffectInstance(e.getFirst()));
-					eff.setDuration(eff.ins.getDuration() + ins.getDuration());
+					eff.setDuration(Math.min(eff.ins.getDuration(), ins.getDuration()));
 					int old = ins.getAmplifier();
 					int amp = eff.ins.getAmplifier() + 1;
 					eff.setAmplifier(Math.max(old, Math.min(4, amp + old)));
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHFoodItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHFoodItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHFoodItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHFoodItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/food/YHFoodItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -41,7 +41,7 @@
 	}
 
 	public static void getFoodEffects(ItemStack stack, List<Component> list) {
-		var food = stack.getFoodProperties(FleshFoodItem.getPlayer());
+		var food = stack.getFoodProperties(IFleshFoodItem.getPlayer());
 		if (food == null) return;
 		getFoodEffects(food, list);
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/item/misc/BloodBottleItem.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/item/misc/BloodBottleItem.java b/src/main/java/dev/xkmc/youkaishomecoming/content/item/misc/BloodBottleItem.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/item/misc/BloodBottleItem.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/item/misc/BloodBottleItem.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -2,7 +2,7 @@
 
 import dev.xkmc.youkaishomecoming.content.item.curio.hat.TouhouHatItem;
 import dev.xkmc.youkaishomecoming.content.item.fluid.SakeBottleItem;
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluid;
+import dev.xkmc.youkaishomecoming.content.item.fluid.YHFluid;
 import dev.xkmc.youkaishomecoming.init.data.YHLangData;
 import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
 import net.minecraft.network.chat.Component;
@@ -16,7 +16,7 @@
 
 public class BloodBottleItem extends SakeBottleItem {
 
-	public BloodBottleItem(Supplier<SakeFluid> fluid, Properties pProperties) {
+	public BloodBottleItem(Supplier<YHFluid> fluid, Properties pProperties) {
 		super(fluid, pProperties);
 	}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -128,7 +128,6 @@
 	public void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {
 		if (state.getBlock() != newState.getBlock()) {
 			if (level.getBlockEntity(pos) instanceof BasePotBlockEntity moka) {
-				Containers.dropContents(level, pos, moka.getDroppableInventory());
 				moka.getUsedRecipesAndPopExperience(level, Vec3.atCenterOf(pos));
 				level.updateNeighbourForOutputSignal(pos, this);
 			}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlockEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlockEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -15,6 +15,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.Containers;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.Nameable;
 import net.minecraft.world.entity.ExperienceOrb;
@@ -34,6 +35,7 @@
 import net.minecraftforge.common.capabilities.ForgeCapabilities;
 import net.minecraftforge.common.util.LazyOptional;
 import net.minecraftforge.items.IItemHandler;
+import net.minecraftforge.items.ItemHandlerHelper;
 import net.minecraftforge.items.ItemStackHandler;
 import net.minecraftforge.items.wrapper.RecipeWrapper;
 import vectorwing.farmersdelight.common.block.CookingPotBlock;
@@ -66,6 +68,8 @@
 	private ResourceLocation lastRecipeID;
 	private boolean checkNewRecipe;
 
+	private boolean wasHeated = false;
+
 	public BasePotBlockEntity(BlockEntityType<? extends BasePotBlockEntity> type, BlockPos pos, BlockState state) {
 		super(type, pos, state);
 		mealContainerStack = ItemStack.EMPTY;
@@ -135,7 +139,7 @@
 		if (getMeal().isEmpty()) return compound;
 		ItemStackHandler drops = new ItemStackHandler(INVENTORY_SIZE);
 		for (int i = 0; i < INVENTORY_SIZE; ++i) {
-			drops.setStackInSlot(i, i == MEAL_DISPLAY_SLOT ? inventory.getStackInSlot(i) : ItemStack.EMPTY);
+			drops.setStackInSlot(i, inventory.getStackInSlot(i));
 		}
 		if (customName != null) {
 			compound.putString("CustomName", Serializer.toJson(customName));
@@ -146,25 +150,50 @@
 
 	}
 
+	public ItemStack addItem(ItemStack stack) {
+		var sim = level == null || level.isClientSide;
+		return ItemHandlerHelper.insertItem(inventory, stack, sim);
+	}
+
+	public boolean isGridEmpty() {
+		for (int i = 0; i < MEAL_DISPLAY_SLOT; i++) {
+			var stack = inventory.getStackInSlot(i);
+			if (!stack.isEmpty()) return false;
+		}
+		return true;
+	}
+
+	public void popAll() {
+		if (level == null) return;
+		var pos = this.getBlockPos().above();
+		for (int i = 0; i < MEAL_DISPLAY_SLOT; i++) {
+			var stack = inventory.getStackInSlot(i);
+			inventory.setStackInSlot(i, ItemStack.EMPTY);
+			Containers.dropItemStack(level, pos.getX(), pos.getY(), pos.getZ(), stack);
+		}
+	}
+
 	public static void cookingTick(Level level, BlockPos pos, BlockState state, BasePotBlockEntity pot) {
-		pot.cookingTick();
+		pot.cookingTick(1, false);
 	}
 
-	protected void cookingTick() {
+	public void cookingTick(int tick, boolean override) {
 		BlockPos pos = getBlockPos();
 		if (level == null) return;
-		boolean heated = isHeated(level, pos);
+		boolean heated = override || isHeated(level, pos);
+
 		boolean change = false;
 		if (heated && hasInput()) {
 			var recipe = getMatchingRecipe(new RecipeWrapper(inventory));
 			if (recipe.isPresent() && canCook(recipe.get())) {
-				change = processCooking(recipe.get());
+				change = processCooking(tick, recipe.get());
 			} else {
 				cookTime = 0;
 			}
-		} else if (cookTime > 0) {
+		} else if (cookTime > 0 && !wasHeated) {
 			cookTime = Mth.clamp(cookTime - 2, 0, cookTimeTotal);
 		}
+		wasHeated = override;
 
 		ItemStack meal = getMeal();
 		if (!meal.isEmpty()) {
@@ -268,9 +297,9 @@
 		return storedMealStack.getCount() + resultStack.getCount() <= resultStack.getMaxStackSize();
 	}
 
-	protected boolean processCooking(BasePotRecipe recipe) {
+	protected boolean processCooking(int tick, BasePotRecipe recipe) {
 		if (level == null) return false;
-		++cookTime;
+		cookTime += tick;
 		cookTimeTotal = recipe.getCookTime();
 		if (cookTime < cookTimeTotal) return false;
 		cookTime = 0;
@@ -285,19 +314,22 @@
 
 		setRecipeUsed(recipe);
 
+		int[] consume = recipe.getConsumption(new RecipeWrapper(inventory));
 		for (int i = 0; i < MEAL_DISPLAY_SLOT; ++i) {
+			if (consume[i] == 0) continue;
 			ItemStack slotStack = inventory.getStackInSlot(i);
 			if (slotStack.hasCraftingRemainingItem()) {
 				Direction direction = getBlockState().getValue(CookingPotBlock.FACING).getCounterClockWise();
 				double x = worldPosition.getX() + 0.5 + direction.getStepX() * 0.25;
 				double y = worldPosition.getY() + 0.7;
 				double z = worldPosition.getZ() + 0.5 + direction.getStepZ() * 0.25;
-				ItemUtils.spawnItemEntity(level, inventory.getStackInSlot(i).getCraftingRemainingItem(), x, y, z,
+				var cont = inventory.getStackInSlot(i).getCraftingRemainingItem();
+				cont.setCount(consume[i]);
+				ItemUtils.spawnItemEntity(level, cont, x, y, z,
 						direction.getStepX() * 0.08F, 0.25, direction.getStepZ() * 0.08F);
 			}
-
 			if (!slotStack.isEmpty()) {
-				slotStack.shrink(1);
+				slotStack.shrink(consume[i]);
 			}
 		}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotRecipe.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotRecipe.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotRecipe.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/base/BasePotRecipe.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -7,15 +7,11 @@
 import net.minecraft.world.item.crafting.RecipeSerializer;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.level.Level;
-import net.minecraftforge.common.util.RecipeMatcher;
 import net.minecraftforge.items.wrapper.RecipeWrapper;
 import org.jetbrains.annotations.Nullable;
 import vectorwing.farmersdelight.client.recipebook.CookingPotRecipeBookTab;
 import vectorwing.farmersdelight.common.crafting.CookingPotRecipe;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public abstract class BasePotRecipe extends CookingPotRecipe {
 
 	public BasePotRecipe(ResourceLocation id, String group,
@@ -26,20 +22,53 @@
 		super(id, group, tab, inputItems, output, container, experience, cookTime);
 	}
 
+	private boolean findMatch(RecipeWrapper inv, Ingredient e, int[] consume) {
+		for (int i = 0; i < 4; i++) {
+			var stack = inv.getItem(i);
+			if (stack.isEmpty())
+				continue;
+			if (consume[i] > 0)
+				continue;
+			if (e.test(inv.getItem(i))) {
+				consume[i]++;
+				return true;
+			}
+		}
+		for (int i = 0; i < 4; i++) {
+			var stack = inv.getItem(i);
+			if (stack.isEmpty())
+				continue;
+			if (consume[i] >= stack.getCount())
+				continue;
+			if (e.test(inv.getItem(i))) {
+				consume[i]++;
+				return true;
+			}
+		}
+		return false;
+	}
+
 	public boolean matches(RecipeWrapper inv, Level level) {
-		List<ItemStack> inputs = new ArrayList<>();
-		int i = 0;
-
-		for (int j = 0; j < 4; ++j) {
-			ItemStack itemstack = inv.getItem(j);
-			if (!itemstack.isEmpty()) {
-				++i;
-				inputs.add(itemstack);
+		int[] consume = new int[4];
+		int match = 0;
+		for (var e : getIngredients()) {
+			if (findMatch(inv, e, consume)) {
+				match++;
 			}
 		}
+		for (int i = 0; i < 4; i++) {
+			if (consume[i] == 0 && !inv.getItem(i).isEmpty())
+				return false;
+		}
+		return match == getIngredients().size();
+	}
 
-		return i == getIngredients().size() &&
-				RecipeMatcher.findMatches(inputs, getIngredients()) != null;
+	public int[] getConsumption(RecipeWrapper inv) {
+		int[] consume = new int[4];
+		for (var e : getIngredients()) {
+			findMatch(inv, e, consume);
+		}
+		return consume;
 	}
 
 	public abstract RecipeSerializer<?> getSerializer();
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -11,7 +11,8 @@
 import dev.xkmc.l2modularblock.type.BlockMethod;
 import dev.xkmc.youkaishomecoming.compat.create.CreateFillingTest;
 import dev.xkmc.youkaishomecoming.content.item.fluid.SakeBottleItem;
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluid;
+import dev.xkmc.youkaishomecoming.content.item.fluid.YHFluid;
+import dev.xkmc.youkaishomecoming.content.item.fluid.SlipBottleItem;
 import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.RandomSource;
@@ -94,7 +95,7 @@
 	private static InteractionResult addItem(FermentationTankBlockEntity be, ItemStack stack, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
 		FluidStack fluid = be.fluids.getFluidInTank(0);
 		boolean hasFluid = false;
-		if (fluid.getFluid() instanceof SakeFluid sake) {
+		if (fluid.getFluid() instanceof YHFluid sake) {
 			if (fluid.getAmount() >= sake.type.amount() && stack.is(sake.type.getContainer())) {
 				if (!level.isClientSide()) {
 					be.fluids.drain(sake.type.amount(), IFluidHandler.FluidAction.EXECUTE);
@@ -116,7 +117,7 @@
 			}
 			return InteractionResult.SUCCESS;
 		}
-		if (!hasFluid || player.getItemInHand(hand).getItem() instanceof SakeBottleItem) {
+		if (!hasFluid || stack.getItem() instanceof SlipBottleItem || stack.getItem() instanceof SakeBottleItem) {
 			LazyOptional<IFluidHandlerItem> opt = stack.getCapability(ForgeCapabilities.FLUID_HANDLER_ITEM);
 			if (opt.resolve().isPresent()) {
 				if (!level.isClientSide() && FluidUtil.interactWithFluidHandler(player, hand, level, pos, hit.getDirection())) {
@@ -142,21 +143,21 @@
 
 	public static void buildModel(DataGenContext<Block, DelegateBlock> ctx, RegistrateBlockstateProvider pvd) {
 		var nolid = pvd.models().getBuilder("block/fermentation_tank")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/fermentation_tank")))
-				.texture("side", pvd.modLoc("block/fermentation_tank_side"))
-				.texture("top", pvd.modLoc("block/fermentation_tank_top"))
-				.texture("bottom", pvd.modLoc("block/fermentation_tank_bottom"))
-				.texture("inside", pvd.modLoc("block/fermentation_tank_inside"))
-				.texture("lid", pvd.modLoc("block/fermentation_tank_lid"))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/fermentation_tank")))
+				.texture("side", pvd.modLoc("block/utensil/fermentation_tank_side"))
+				.texture("top", pvd.modLoc("block/utensil/fermentation_tank_top"))
+				.texture("bottom", pvd.modLoc("block/utensil/fermentation_tank_bottom"))
+				.texture("inside", pvd.modLoc("block/utensil/fermentation_tank_inside"))
+				.texture("lid", pvd.modLoc("block/utensil/fermentation_tank_lid"))
 				.renderType("cutout");
 		var lid = pvd.models().getBuilder("block/fermentation_tank_lid")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/fermentation_tank_lid")))
-				.texture("side", pvd.modLoc("block/fermentation_tank_side"))
-				.texture("top", pvd.modLoc("block/fermentation_tank_top"))
-				.texture("bottom", pvd.modLoc("block/fermentation_tank_bottom"))
-				.texture("inside", pvd.modLoc("block/fermentation_tank_inside"))
-				.texture("lid", pvd.modLoc("block/fermentation_tank_lid"))
-				.texture("lid_handle", pvd.modLoc("block/fermentation_tank_lid_handle"))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/fermentation_tank_lid")))
+				.texture("side", pvd.modLoc("block/utensil/fermentation_tank_side"))
+				.texture("top", pvd.modLoc("block/utensil/fermentation_tank_top"))
+				.texture("bottom", pvd.modLoc("block/utensil/fermentation_tank_bottom"))
+				.texture("inside", pvd.modLoc("block/utensil/fermentation_tank_inside"))
+				.texture("lid", pvd.modLoc("block/utensil/fermentation_tank_lid"))
+				.texture("lid_handle", pvd.modLoc("block/utensil/fermentation_tank_lid_handle"))
 				.renderType("cutout");
 		pvd.getVariantBuilder(ctx.get()).forAllStates(state -> ConfiguredModel.builder().modelFile(state.getValue(OPEN) ? nolid : lid).build());
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlockEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlockEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/ferment/FermentationTankBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -19,6 +19,7 @@
 import net.minecraft.world.Containers;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.common.capabilities.ForgeCapabilities;
 import net.minecraftforge.common.util.LazyOptional;
@@ -134,8 +135,8 @@
 	}
 
 	@Override
-	public TileTooltip getImage() {
-		return new TileTooltip(items.getAsList(), fluids.getAsList());
+	public TileTooltip getImage(boolean shift, BlockHitResult hit) {
+		return new TileTooltip(items.getAsList(), fluids.getAsList(), 3, 3);
 	}
 
 	public float inProgress() {
@@ -143,7 +144,7 @@
 	}
 
 	@Override
-	public List<Component> lines() {
+	public List<Component> lines(boolean shift, BlockHitResult hit) {
 		float progress = inProgress();
 		if (totalTime <= 0) {
 			return List.of();
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,11 +3,13 @@
 import com.tterrag.registrate.providers.DataGenContext;
 import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
 import dev.xkmc.l2library.serial.ingredients.PotionIngredient;
+import dev.xkmc.youkaishomecoming.content.block.variants.LeftClickBlock;
 import dev.xkmc.youkaishomecoming.content.pot.base.BasePotBlock;
 import dev.xkmc.youkaishomecoming.content.pot.base.BasePotBlockEntity;
 import dev.xkmc.youkaishomecoming.init.data.YHLangData;
 import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
 import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -36,7 +38,7 @@
 import java.util.List;
 import java.util.Map;
 
-public class KettleBlock extends BasePotBlock {
+public class KettleBlock extends BasePotBlock implements LeftClickBlock {
 
 	protected static final VoxelShape SHAPE = box(3, 0, 3, 13, 7, 13);
 	protected static final VoxelShape SHAPE_WITH_TRAY = Shapes.or(SHAPE, box(0.0, -1.0, 0.0, 16.0, 0.0, 16.0));
@@ -52,10 +54,10 @@
 	@Override
 	public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult result) {
 		ItemStack stack = player.getItemInHand(hand);
-		for (var e : MAP.get().entrySet()) {
-			if (e.getKey().test(stack)) {
-				if (!level.isClientSide()) {
-					if (level.getBlockEntity(pos) instanceof KettleBlockEntity kettle) {
+		if (level.getBlockEntity(pos) instanceof KettleBlockEntity kettle) {
+			for (var e : MAP.get().entrySet()) {
+				if (e.getKey().test(stack)) {
+					if (!level.isClientSide()) {
 						if (kettle.getWater() < KettleBlockEntity.WATER_BUCKET) {
 							kettle.addWater(e.getValue());
 							if (!player.getAbilities().instabuild) {
@@ -65,15 +67,53 @@
 							}
 							return InteractionResult.SUCCESS;
 						}
-					}
-					return InteractionResult.FAIL;
-				}
-				return InteractionResult.CONSUME;
+						return InteractionResult.FAIL;
+					}
+					return InteractionResult.CONSUME;
+				}
 			}
+			if (!stack.isEmpty()) {
+				ItemStack toInsert = player.isShiftKeyDown() ? stack.copy() : stack.copyWithCount(1);
+				ItemStack remain = kettle.addItem(toInsert);
+				if (remain.getCount() < toInsert.getCount()) {
+					if (!level.isClientSide()) {
+						stack.shrink(toInsert.getCount() - remain.getCount());
+					}
+					return InteractionResult.SUCCESS;
+				}
+			} else if (player.isShiftKeyDown() && !kettle.isGridEmpty()) {
+				if (!level.isClientSide()) {
+					kettle.popAll();
+				}
+				return InteractionResult.SUCCESS;
+			}
 		}
 		return super.use(state, level, pos, player, hand, result);
 	}
 
+	@Override
+	public boolean leftClick(BlockState state, Level level, BlockPos pos, Player player) {
+		if (level.getBlockEntity(pos) instanceof KettleBlockEntity be) {
+			if (level.isClientSide) return true;
+			ItemStack stack = asItem().getDefaultInstance();
+			CompoundTag tag = be.writeMeal(new CompoundTag());
+			if (!tag.isEmpty()) {
+				stack.addTagElement("BlockEntityTag", tag);
+			}
+			if (be.hasCustomName()) {
+				stack.setHoverName(be.getDisplayName());
+			}
+			level.removeBlock(pos, false);
+			if (player.getMainHandItem().isEmpty()) {
+				player.setItemInHand(InteractionHand.MAIN_HAND, stack);
+			} else {
+				popResource(level, pos, stack);
+			}
+			return true;
+		}
+		return false;
+	}
+
 	@Override
 	public void appendHoverText(ItemStack pStack, @Nullable BlockGetter pLevel, List<Component> pTooltip, TooltipFlag pFlag) {
 		super.appendHoverText(pStack, pLevel, pTooltip, pFlag);
@@ -101,17 +141,17 @@
 
 	public static void buildModel(DataGenContext<Block, KettleBlock> ctx, RegistrateBlockstateProvider pvd) {
 		var kettle = pvd.models().getBuilder("block/kettle")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/kettle")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/kettle")))
 				.texture("kettle", pvd.modLoc("block/kettle"))
 				.renderType("cutout");
 		var handle = pvd.models().getBuilder("block/kettle_handle")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/kettle_handle")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/kettle_handle")))
 				.texture("kettle", pvd.modLoc("block/kettle"))
 				.texture("handle", pvd.modLoc("block/cooking_pot_handle"))
 				.texture("chain", pvd.modLoc("block/chain"))
 				.renderType("cutout");
 		var tray = pvd.models().getBuilder("block/kettle_tray")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/kettle_tray")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/kettle_tray")))
 				.texture("kettle", pvd.modLoc("block/kettle"))
 				.texture("tray_side", pvd.modLoc("block/cooking_pot_tray_side"))
 				.texture("tray_top", pvd.modLoc("block/cooking_pot_tray_top"))
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlockEntity.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlockEntity.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/kettle/KettleBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,24 +3,32 @@
 import dev.xkmc.youkaishomecoming.content.pot.base.BasePotBlock;
 import dev.xkmc.youkaishomecoming.content.pot.base.BasePotBlockEntity;
 import dev.xkmc.youkaishomecoming.content.pot.base.BasePotRecipe;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.InfoTile;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.TileTooltip;
 import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.chat.Component;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.common.capabilities.ForgeCapabilities;
 import net.minecraftforge.common.util.LazyOptional;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public class KettleBlockEntity extends BasePotBlockEntity {
+import java.util.ArrayList;
+import java.util.List;
+
+public class KettleBlockEntity extends BasePotBlockEntity implements InfoTile {
 
 	public static final int WATER_BOTTLE = 200, WATER_BUCKET = 600;
 
@@ -93,11 +101,11 @@
 	}
 
 	@Override
-	protected boolean processCooking(BasePotRecipe recipe) {
+	protected boolean processCooking(int tick, BasePotRecipe recipe) {
 		if (level == null) return false;
-		if (getWater() == 0) return false;
-		addWater(-1);
-		return super.processCooking(recipe);
+		if (getWater() < tick) return false;
+		addWater(-tick);
+		return super.processCooking(tick, recipe);
 	}
 
 	@NotNull
@@ -109,4 +117,18 @@
 		return super.getCapability(cap, side);
 	}
 
+	@Override
+	public TileTooltip getImage(boolean shift, BlockHitResult hit) {
+		List<ItemStack> stacks = new ArrayList<>();
+		var inv = getInventory();
+		for (int i = 0; i < inv.getSlots(); i++) {
+			stacks.add(inv.getStackInSlot(i));
+		}
+		return new TileTooltip(stacks, List.of(), 4, 2);
+	}
+
+	@Override
+	public List<Component> lines(boolean shift, BlockHitResult hit) {
+		return List.of();
+	}
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/moka/MokaMakerBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/moka/MokaMakerBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/moka/MokaMakerBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/moka/MokaMakerBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/moka/MokaMakerBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -52,11 +52,11 @@
 
 	public static void buildModel(DataGenContext<Block, MokaMakerBlock> ctx, RegistrateBlockstateProvider pvd) {
 		var pot = pvd.models().getBuilder("block/moka_pot")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/moka_pot")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/moka_pot")))
 				.texture("maker", pvd.modLoc("block/moka_pot"))
 				.renderType("cutout");
 		var tray = pvd.models().getBuilder("block/moka_tray")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/moka_pot_tray")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/moka_pot_tray")))
 				.texture("maker", pvd.modLoc("block/moka_pot"))
 				.texture("tray_side", pvd.modLoc("block/cooking_pot_tray_side"))
 				.texture("tray_top", pvd.modLoc("block/cooking_pot_tray_top"))
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/InfoTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/InfoTile.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/InfoTile.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/InfoTile.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/InfoTile.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,13 +1,14 @@
 package dev.xkmc.youkaishomecoming.content.pot.overlay;
 
 import net.minecraft.network.chat.Component;
+import net.minecraft.world.phys.BlockHitResult;
 
 import java.util.List;
 
 public interface InfoTile {
 
-	TileTooltip getImage();
+	TileTooltip getImage(boolean shift, BlockHitResult hit);
 
-	List<Component> lines();
+	List<Component> lines(boolean shift, BlockHitResult hit);
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileClientTooltip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileClientTooltip.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileClientTooltip.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileClientTooltip.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileClientTooltip.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,6 +1,6 @@
 package dev.xkmc.youkaishomecoming.content.pot.overlay;
 
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluid;
+import dev.xkmc.youkaishomecoming.content.item.fluid.YHFluid;
 import dev.xkmc.youkaishomecoming.util.JEIFluidStackRenderer;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.GuiGraphics;
@@ -10,10 +10,12 @@
 
 import java.util.List;
 
-public record TileClientTooltip(List<ItemStack> items, List<FluidStack> fluids) implements ClientTooltipComponent {
+public record TileClientTooltip(
+		List<ItemStack> items, List<FluidStack> fluids,
+		int width, int height) implements ClientTooltipComponent {
 
 	public TileClientTooltip(TileTooltip inv) {
-		this(inv.items(), inv.fluids());
+		this(inv.items(), inv.fluids(), inv.w(), inv.h());
 	}
 
 	private int size() {
@@ -21,15 +23,15 @@
 	}
 
 	public int getHeight() {
-		return 3 * 18 + 2;
+		return height * 18 + 2;
 	}
 
 	public int getWidth(Font font) {
-		return 3 * 18 + 2;
+		return width * 18 + 2;
 	}
 
 	public void renderImage(Font font, int mx, int my, GuiGraphics g) {
-		int w = (int) Math.ceil(Math.sqrt(size()));
+		int w = width;
 		int n = 0;
 		for (ItemStack stack : items) {
 			if (stack.isEmpty()) continue;
@@ -42,7 +44,7 @@
 			if (stack.isEmpty()) continue;
 			int y = my + n / w * 18 + 1;
 			int x = mx + n % w * 18 + 1;
-			if (stack.getFluid() instanceof SakeFluid sake) {
+			if (stack.getFluid() instanceof YHFluid sake) {
 				renderSlot(font, x, y, g, sake.type.asStack(stack.getAmount() / sake.type.amount()));
 			} else {
 				renderSlot(font, x, y, g, stack);
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileInfoDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileInfoDisplay.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileInfoDisplay.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileInfoDisplay.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileInfoDisplay.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,6 +3,7 @@
 import dev.xkmc.l2library.base.overlay.OverlayUtil;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiGraphics;
+import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.inventory.tooltip.ClientTextTooltip;
 import net.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent;
 import net.minecraft.client.multiplayer.ClientLevel;
@@ -23,7 +24,7 @@
 		if (!(hit instanceof BlockHitResult bhit)) return;
 		if (!(level.getBlockEntity(bhit.getBlockPos()) instanceof InfoTile tile)) return;
 		new ImageBox(g, (int) (sw * 0.7), (int) (sh * 0.5), 0)
-				.render(tile);
+				.render(tile, Screen.hasShiftDown(), bhit);
 	}
 
 	public static class ImageBox extends OverlayUtil {
@@ -32,10 +33,10 @@
 			super(g, x0, y0, maxW);
 		}
 
-		public void render(InfoTile tile) {
+		public void render(InfoTile tile, boolean shift, BlockHitResult hit) {
 			List<ClientTooltipComponent> tooltip = new ArrayList<>();
-			tooltip.add(new TileClientTooltip(tile.getImage()));
-			for (var e : tile.lines()) {
+			tooltip.add(new TileClientTooltip(tile.getImage(shift, hit)));
+			for (var e : tile.lines(shift, hit)) {
 				tooltip.add(new ClientTextTooltip(e.getVisualOrderText()));
 			}
 			renderTooltipInternal(Minecraft.getInstance().font, tooltip);
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileTooltip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileTooltip.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileTooltip.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileTooltip.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/overlay/TileTooltip.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -6,6 +6,6 @@
 
 import java.util.List;
 
-public record TileTooltip(List<ItemStack> items, List<FluidStack> fluids) implements TooltipComponent {
+public record TileTooltip(List<ItemStack> items, List<FluidStack> fluids, int w, int h) implements TooltipComponent {
 
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/rack/DryingRackBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/rack/DryingRackBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/rack/DryingRackBlock.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/rack/DryingRackBlock.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/rack/DryingRackBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -123,7 +123,7 @@
 
 	public static void buildModel(DataGenContext<Block, DryingRackBlock> ctx, RegistrateBlockstateProvider pvd) {
 		var pot = pvd.models().getBuilder("block/drying_rack")
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/drying_rack")))
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/drying_rack")))
 				.texture("rack", pvd.modLoc("block/drying_rack"))
 				.renderType("cutout");
 		pvd.horizontalBlock(ctx.get(), state -> pot);
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddItemMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddItemMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddItemMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddItemMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,39 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickAddItemMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		if (player.isShiftKeyDown()) return InteractionResult.PASS;
+		ItemStack stack = player.getItemInHand(hand);
+		if (stack.isEmpty()) return InteractionResult.PASS;
+		RackInfo info = RackInfo.getRackInfo(state);
+		if (info.racks() == 0) return InteractionResult.PASS;
+		if (!(level.getBlockEntity(pos) instanceof SteamerBlockEntity be)) return InteractionResult.PASS;
+		if (!RackData.isValid(level, stack)) return InteractionResult.PASS;
+		int y = RackInfo.ofY(hit);
+		if (info.pot()) y -= 2;
+		if (y < 0 || y >= be.racks.size()) return InteractionResult.PASS;
+		var rack = be.racks.get(y);
+		if (hit.getDirection() == Direction.UP && !RackInfo.isCapped(level, pos)) {
+			if (rack.tryAddItemAt(be, level, stack, hit.getLocation())) {
+				return InteractionResult.SUCCESS;
+			}
+		}
+		if (rack.tryAddItem(be, level, stack)) {
+			return InteractionResult.SUCCESS;
+		}
+		return InteractionResult.PASS;
+	}
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddLidMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddLidMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddLidMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddLidMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,32 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickAddLidMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		ItemStack stack = player.getItemInHand(hand);
+		if (stack.is(YHBlocks.STEAMER_LID.asItem())) {
+			if (RackInfo.tryCap(level, pos, state)) {
+				if (!level.isClientSide()) {
+					if (!player.getAbilities().instabuild) {
+						stack.shrink(1);
+					}
+				}
+				return InteractionResult.CONSUME;
+			}
+		}
+		return InteractionResult.PASS;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddRackMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddRackMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddRackMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddRackMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,32 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickAddRackMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		if (player.isShiftKeyDown()) return InteractionResult.PASS;
+		ItemStack stack = player.getItemInHand(hand);
+		if (stack.is(YHBlocks.STEAMER_RACK.asItem())) {
+			var info = RackInfo.getRackInfo(state);
+			if (info.tryAddRack(level, pos, state)) {
+				if (!level.isClientSide() && !player.getAbilities().instabuild) {
+					stack.shrink(1);
+				}
+				return InteractionResult.CONSUME;
+			}
+		}
+		return InteractionResult.PASS;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddWaterMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddWaterMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddWaterMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickAddWaterMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,32 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickAddWaterMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		ItemStack stack = player.getItemInHand(hand);
+		if (stack.is(Items.WATER_BUCKET)) {
+			if (!state.getValue(SteamerStates.WATER)) {
+				if (!level.isClientSide()) {
+					level.setBlockAndUpdate(pos, state.setValue(SteamerStates.WATER, true));
+					if (!player.getAbilities().instabuild) {
+						player.setItemInHand(hand, Items.BUCKET.getDefaultInstance());
+					}
+				}
+				return InteractionResult.CONSUME;
+			}
+		}
+		return InteractionResult.PASS;
+	}
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickRemoveLidMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickRemoveLidMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickRemoveLidMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickRemoveLidMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,37 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickRemoveLidMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		ItemStack stack = player.getItemInHand(hand);
+		if (state.is(YHBlocks.STEAMER_LID.get())) {
+			if (!level.isClientSide()) {
+				level.removeBlock(pos, false);
+			}
+		} else {
+			if (RackInfo.ofY(hit) != RackInfo.getRackInfo(state).height() || !RackInfo.tryRemoveCap(level, pos, state))
+				return InteractionResult.PASS;
+		}
+		if (!level.isClientSide()) {
+			if (stack.isEmpty() && !player.isShiftKeyDown()) {
+				player.setItemInHand(hand, YHBlocks.STEAMER_LID.asStack());
+			} else {
+				player.getInventory().placeItemBackInInventory(YHBlocks.STEAMER_LID.asStack());
+			}
+		}
+		return InteractionResult.SUCCESS;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeItemMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeItemMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeItemMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeItemMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,40 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickTakeItemMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		RackInfo info = RackInfo.getRackInfo(state);
+		if (info.racks() == 0) return InteractionResult.PASS;
+		if (!(level.getBlockEntity(pos) instanceof SteamerBlockEntity be)) return InteractionResult.PASS;
+		ItemStack stack = player.getItemInHand(hand);
+		if (!stack.isEmpty() && !player.isShiftKeyDown()) return InteractionResult.PASS;
+		int y = RackInfo.ofY(hit);
+		if (info.pot()) y -= 2;
+		if (y < 0 || y >= be.racks.size()) return InteractionResult.PASS;
+		var rack = be.racks.get(y);
+		if (hit.getDirection() == Direction.UP && !RackInfo.isCapped(level, pos)) {
+			if (rack.tryTakeItemAt(be, level, hit.getLocation(), player, hand)) {
+				return InteractionResult.SUCCESS;
+			}
+			if (!player.isShiftKeyDown()) {
+				return InteractionResult.PASS;
+			}
+		}
+		if (rack.tryTakeItem(be, level, player, hand)) {
+			return InteractionResult.SUCCESS;
+		}
+		return InteractionResult.PASS;
+	}
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeRackMethod.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeRackMethod.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeRackMethod.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/ClickTakeRackMethod.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,34 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+
+public class ClickTakeRackMethod implements OnClickBlockMethod {
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		if (!player.isShiftKeyDown()) return InteractionResult.PASS;
+		RackInfo info = RackInfo.getRackInfo(state);
+		if (info.racks() == 0) return InteractionResult.PASS;
+		if ((hit.getLocation().y() + 128) % 1 < (info.height() - 1) * 0.25 + 1e-3) {
+			if (info.height() < 4 || hit.getDirection() != Direction.UP)
+				return InteractionResult.PASS;
+		}
+		if (info.tryTakeRack(level, pos, state)) {
+			if (!level.isClientSide()) {
+				player.getInventory().placeItemBackInInventory(YHBlocks.STEAMER_RACK.asStack());
+			}
+			return InteractionResult.SUCCESS;
+		}
+		return InteractionResult.PASS;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/package-info.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/package-info.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/package-info.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/package-info.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,8 @@
+@MethodsReturnNonnullByDefault
+@ParametersAreNonnullByDefault
+
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import net.minecraft.MethodsReturnNonnullByDefault;
+
+import javax.annotation.ParametersAreNonnullByDefault;
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackData.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackData.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackData.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackData.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,135 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.item.food.FoodSaucerItem;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.util.Mth;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.phys.Vec3;
+
+@SerialClass
+public class RackData {
+
+	public static final double UPWARD_EFF = 0.01, DOWNWARD_EFF = 0.05;
+
+	@SerialClass.SerialField
+	public final RackItemData[] list = new RackItemData[4];
+
+	@SerialClass.SerialField
+	public double upwardHeat = 0;
+
+	@SerialClass.SerialField
+	public double downwardHeat = 0;
+
+	public void tick(SteamerBlockEntity be, Level level) {
+		int count = 0;
+		for (var e : list) {
+			double heat = upwardHeat * UPWARD_EFF + downwardHeat * DOWNWARD_EFF;
+			if (e != null && e.tick(be, level, heat)) {
+				count++;
+			}
+		}
+		upwardHeat -= count * UPWARD_EFF;
+		downwardHeat -= count * DOWNWARD_EFF;
+	}
+
+	public void popItems(Level level, BlockPos pos, int height) {
+		if (level.isClientSide()) return;
+		for (int i = 0; i < 4; i++) {
+			var item = list[i];
+			if (item == null || item.stack.isEmpty()) continue;
+			popResource(level, pos.above(), item.stack, height * 0.25);
+			list[i] = null;
+		}
+	}
+
+	public boolean tryAddItem(SteamerBlockEntity be, Level level, ItemStack stack) {
+		for (int i = 0; i < 4; i++) {
+			if (tryAddItemAt(be, level, stack, i))
+				return true;
+		}
+		return false;
+	}
+
+	public boolean tryAddItemAt(SteamerBlockEntity be, Level level, ItemStack stack, Vec3 hit) {
+		return tryAddItemAt(be, level, stack, getIndex(hit));
+	}
+
+	protected boolean tryAddItemAt(SteamerBlockEntity be, Level level, ItemStack stack, int index) {
+		if (stack.getItem() instanceof FoodSaucerItem) {
+			if (index != 0) return false;
+			for (int i = 0; i < 4; i++) {
+				if (list[index] != null && !list[index].stack.isEmpty())
+					return false;
+			}
+		}
+		if (index < 0 || index >= 4) return false;
+		var item = list[index];
+		if (item != null && !item.stack.isEmpty()) return false;
+		if (item == null) list[index] = item = new RackItemData();
+		if (!item.stack.isEmpty()) return false;
+		if (!level.isClientSide()) {
+			item.setStack(be, stack.split(1));
+		}
+		return true;
+	}
+
+	public boolean tryTakeItem(SteamerBlockEntity be, Level level, Player player, InteractionHand hand) {
+		for (int i = 3; i >= 0; i--) {
+			if (tryTakeItemAt(be, level, i, player, hand))
+				return true;
+		}
+		return false;
+	}
+
+	public boolean tryTakeItemAt(SteamerBlockEntity be, Level level, Vec3 hit, Player player, InteractionHand hand) {
+		return tryTakeItemAt(be, level, getIndex(hit), player, hand);
+	}
+
+	protected boolean tryTakeItemAt(SteamerBlockEntity be, Level level, int index, Player player, InteractionHand hand) {
+		if (index < 0 || index >= 4) return false;
+		var item = list[index];
+		if (item == null || item.stack.isEmpty()) return false;
+		if (!level.isClientSide()) {
+			if (!player.isShiftKeyDown() && player.getItemInHand(hand).isEmpty()) {
+				player.setItemInHand(hand, item.stack);
+			} else {
+				player.getInventory().placeItemBackInInventory(item.stack);
+			}
+			item.setStack(be, ItemStack.EMPTY);
+		}
+		return true;
+	}
+
+	public static boolean isValid(Level level, ItemStack stack) {
+		if (stack.getFoodProperties(null) != null) return true;
+		var cont = new SimpleContainer(1);
+		cont.setItem(0, stack);
+		return level.getRecipeManager().getRecipeFor(YHBlocks.STEAM_RT.get(), cont, level).isPresent();
+	}
+
+	private static int getIndex(Vec3 hit) {
+		boolean sx = Mth.positiveModulo(hit.x, 1) > 0.5;
+		boolean sz = Mth.positiveModulo(hit.z, 1) > 0.5;
+		return sx ? sz ? 2 : 1 : sz ? 3 : 0;
+	}
+
+	private static void popResource(Level level, BlockPos pos, ItemStack stack, double height) {
+		double x = pos.getX() + 0.5 + Mth.nextDouble(level.random, -0.1, 0.1);
+		double h = pos.getY() + height;
+		double z = pos.getZ() + 0.5 + Mth.nextDouble(level.random, -0.1, 0.1);
+		if (!level.isClientSide && level.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS) && !level.restoringBlockSnapshots) {
+			ItemEntity itementity = new ItemEntity(level, x, h, z, stack);
+			itementity.setDefaultPickUpDelay();
+			level.addFreshEntity(itementity);
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackInfo.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackInfo.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackInfo.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackInfo.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,157 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.BlockProxy;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.phys.BlockHitResult;
+
+import static dev.xkmc.youkaishomecoming.content.pot.steamer.SteamerStates.*;
+
+public record RackInfo(boolean pot, int racks) {
+
+	public static int ofY(BlockHitResult vec) {
+		double y = Mth.positiveModulo(vec.getLocation().y(), 1);
+		if (y == 0) return vec.getDirection() == Direction.UP ? 3 : 0;
+		return (int) ((y - 1e-3) * 4);
+	}
+
+	public static RackInfo getRackInfo(BlockState state) {
+		if (state.is(YHBlocks.STEAMER_POT.get())) {
+			return new RackInfo(true, state.getValue(POT_RACKS));
+		}
+		if (state.is(YHBlocks.STEAMER_RACK.get())) {
+			return new RackInfo(false, state.getValue(RACKS));
+		}
+		return new RackInfo(false, 0);
+	}
+
+	public static boolean isCapped(Level level, BlockPos pos) {
+		var state = level.getBlockState(pos);
+		RackInfo info = getRackInfo(state);
+		if (!info.pot() && info.racks() == 0)
+			return false;
+		if (info.height() == 4) {
+			return level.getBlockState(pos.above()).is(YHBlocks.STEAMER_LID.get());
+		}
+		return state.getValue(SteamerStates.CAPPED);
+	}
+
+	public static boolean tryCap(Level level, BlockPos pos, BlockState state) {
+		if (state.getValue(CAPPED)) return false;
+		var info = getRackInfo(state);
+		if (info.height() == 4) {
+			return info.popLid(level, pos.above(), state.getValue(BlockProxy.HORIZONTAL_FACING));
+		}
+		if (!level.isClientSide()) {
+			level.setBlockAndUpdate(pos, state.setValue(CAPPED, true));
+		}
+		return true;
+	}
+
+	public static boolean tryRemoveCap(Level level, BlockPos pos, BlockState state) {
+		if (!state.getValue(CAPPED)) return false;
+		var info = getRackInfo(state);
+		if (info.height() == 4) {
+			return info.popLid(level, pos.above(), state.getValue(BlockProxy.HORIZONTAL_FACING));
+		}
+		if (!level.isClientSide()) {
+			level.setBlockAndUpdate(pos, state.setValue(CAPPED, false));
+		}
+		return true;
+	}
+
+	public int height() {
+		return racks + (pot ? 2 : 0);
+	}
+
+	public boolean tryAddRack(Level level, BlockPos pos, BlockState state) {
+		var dir = state.getValue(BlockProxy.HORIZONTAL_FACING);
+		IntegerProperty rackProp = pot ? POT_RACKS : RACKS;
+		int max = pot ? 2 : 4;
+		if (racks == max) {
+			return stackTop(level, pos.above(), dir);
+		}
+		if (racks == max - 1 && state.getValue(CAPPED)) {
+			if (!popLid(level, pos.above(), dir))
+				return false;
+			if (!level.isClientSide()) {
+				level.setBlockAndUpdate(pos, state.setValue(rackProp, racks + 1).setValue(CAPPED, false));
+			}
+			return true;
+		}
+		if (!level.isClientSide()) {
+			level.setBlockAndUpdate(pos, state.setValue(rackProp, racks + 1));
+		}
+		return true;
+	}
+
+	private boolean popLid(Level level, BlockPos pos, Direction facing) {
+		if (level.isOutsideBuildHeight(pos)) return false;
+		BlockState state = level.getBlockState(pos);
+		if (!state.canBeReplaced()) return false;
+		if (!level.isClientSide()) {
+			level.setBlockAndUpdate(pos, YHBlocks.STEAMER_LID.get().defaultBlockState()
+					.setValue(BlockProxy.HORIZONTAL_FACING, facing));
+		}
+		return true;
+	}
+
+	private boolean stackTop(Level level, BlockPos pos, Direction facing) {
+		if (level.isOutsideBuildHeight(pos)) return false;
+		BlockState state = level.getBlockState(pos);
+		if (state.is(YHBlocks.STEAMER_RACK.get()))
+			return getRackInfo(state).tryAddRack(level, pos, state);
+		else if (state.is(YHBlocks.STEAMER_LID.get())) {
+			if (!level.isClientSide()) {
+				level.setBlockAndUpdate(pos, YHBlocks.STEAMER_RACK.get().defaultBlockState()
+						.setValue(BlockProxy.HORIZONTAL_FACING, facing)
+						.setValue(CAPPED, true));
+			}
+			return true;
+		}
+		if (!state.canBeReplaced()) return false;
+		if (!level.isClientSide()) {
+			level.setBlockAndUpdate(pos, YHBlocks.STEAMER_RACK.get().defaultBlockState()
+					.setValue(BlockProxy.HORIZONTAL_FACING, facing));
+		}
+		return true;
+	}
+
+	public boolean tryTakeRack(Level level, BlockPos pos, BlockState state) {
+		if (racks == 0) return false;
+		if (level.isClientSide) return true;
+		if (level.getBlockEntity(pos) instanceof SteamerBlockEntity be) {
+			if (be.racks.size() == racks) {
+				be.removeRack(level, pos, height());
+			}
+		}
+		var rackProp = pot ? POT_RACKS : RACKS;
+		if (pot || racks > 1) {
+			boolean capped = state.getValue(CAPPED);
+			if (height() == 4) {
+				var aboveState = level.getBlockState(pos.above());
+				if (aboveState.is(YHBlocks.STEAMER_RACK.get()))
+					return false;
+				if (aboveState.is(YHBlocks.STEAMER_LID.get())) {
+					level.removeBlock(pos.above(), false);
+					capped = true;
+				}
+			}
+			level.setBlockAndUpdate(pos, state.setValue(rackProp, racks - 1).setValue(CAPPED, capped));
+		} else {
+			if (state.getValue(CAPPED)) {
+				level.setBlockAndUpdate(pos, YHBlocks.STEAMER_LID.get().defaultBlockState()
+						.setValue(BlockProxy.HORIZONTAL_FACING, state.getValue(BlockProxy.HORIZONTAL_FACING)));
+			} else {
+				level.removeBlock(pos, false);
+			}
+		}
+		return true;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackItemData.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackItemData.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackItemData.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/RackItemData.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,94 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Optional;
+
+@SerialClass
+public class RackItemData {
+
+	@SerialClass.SerialField
+	public ItemStack stack = ItemStack.EMPTY;
+
+	@Nullable
+	@SerialClass.SerialField
+	public ResourceLocation id;
+
+	@SerialClass.SerialField
+	public double progress;
+
+	private boolean dirty = true;
+
+	@Nullable
+	private SteamingRecipe cache = null;
+
+	public boolean tick(SteamerBlockEntity be, Level level, double heat) {
+		updateRecipe(level);
+		if (cache != null) {
+			progress += heat;
+			if (progress >= cache.getCookingTime()) {
+				var cont = new SimpleContainer(1);
+				cont.setItem(0, stack);
+				setStack(be, cache.assemble(cont, level.registryAccess()));
+				id = null;
+				cache = null;
+				progress = 0;
+			}
+			return true;
+		}
+		return false;
+	}
+
+	public void setStack(SteamerBlockEntity be, ItemStack stack) {
+		this.stack = stack;
+		be.notifyTile();
+		setChanged();
+	}
+
+	public void setChanged() {
+		dirty = true;
+	}
+
+	private void updateRecipe(Level level) {
+		if (!dirty) {
+			if (id == null) {
+				cache = null;
+				progress = 0;
+				return;
+			}
+			if (cache != null) return;
+		}
+		dirty = false;
+		Optional<SteamingRecipe> recipe;
+		if (stack.isEmpty()) {
+			recipe = Optional.empty();
+		} else {
+			var cont = new SimpleContainer(1);
+			cont.setItem(0, stack);
+			recipe = level.getRecipeManager().getRecipeFor(YHBlocks.STEAM_RT.get(), cont, level);
+		}
+		if (id == null && recipe.isEmpty()) {
+			progress = 0;
+		} else if (recipe.isEmpty()) {
+			id = null;
+			progress = 0;
+		} else if (!recipe.get().getId().equals(id)) {
+			id = recipe.get().getId();
+			progress = 0;
+			cache = recipe.get();
+		} else {
+			cache = recipe.get();
+		}
+	}
+
+	public boolean mayExtract() {
+		return !stack.isEmpty() && id == null && !dirty;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockEntity.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,254 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import com.mojang.datafixers.util.Pair;
+import dev.xkmc.l2library.base.tile.BaseBlockEntity;
+import dev.xkmc.l2library.base.tile.BaseContainerListener;
+import dev.xkmc.l2modularblock.tile_api.BlockContainer;
+import dev.xkmc.l2modularblock.tile_api.TickableBlockEntity;
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.InfoTile;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.TileTooltip;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.network.chat.Component;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.Container;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraftforge.common.capabilities.Capability;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.common.util.LazyOptional;
+import net.minecraftforge.items.IItemHandlerModifiable;
+import net.minecraftforge.items.wrapper.CombinedInvWrapper;
+import net.minecraftforge.items.wrapper.EmptyHandler;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import vectorwing.farmersdelight.common.block.entity.HeatableBlockEntity;
+import vectorwing.farmersdelight.common.registry.ModParticleTypes;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@SerialClass
+public class SteamerBlockEntity extends BaseBlockEntity
+		implements BlockContainer, TickableBlockEntity, BaseContainerListener, HeatableBlockEntity, InfoTile {
+
+	public static final int OUTPUT_RATE = 20;
+	public static final int MAX_STACK = 5;
+
+	@SerialClass.SerialField
+	public final List<RackData> racks = new ArrayList<>();
+
+	public SteamerBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
+		super(type, pos, state);
+	}
+
+	@Override
+	public void tick() {
+		if (level == null) return;
+		if (level.isClientSide()) {
+			animationTick(level);
+			return;
+		}
+		boolean shouldUpdate = checkRack();
+		if (getBlockState().is(YHBlocks.STEAMER_POT.get())) {
+			shouldUpdate |= cook(level);
+		}
+		if (shouldUpdate) notifyTile();
+	}
+
+	@Override
+	public void notifyTile() {
+		selfHandler = null;
+		sync();
+		setChanged();
+	}
+
+	private boolean checkRack() {
+		RackInfo info = RackInfo.getRackInfo(getBlockState());
+		if (racks.size() == info.racks()) return false;
+		while (racks.size() > info.racks()) {
+			racks.remove(racks.size() - 1);
+		}
+		while (racks.size() < info.racks()) {
+			racks.add(new RackData());
+		}
+		return true;
+	}
+
+	private boolean cook(Level level) {
+		List<SteamerBlockEntity> steamers = new ArrayList<>();
+		steamers.add(this);
+		BlockPos pos = getBlockPos().above();
+		while (level.getBlockEntity(pos) instanceof SteamerBlockEntity be && be.getBlockState().is(YHBlocks.STEAMER_RACK.get())) {
+			steamers.add(be);
+			pos = pos.above();
+			if (level.isOutsideBuildHeight(pos)) break;
+			if (steamers.size() >= MAX_STACK) break;
+		}
+		List<Pair<SteamerBlockEntity, RackData>> allRacks = new ArrayList<>();
+		for (var e : steamers) {
+			for (var r : e.racks) {
+				allRacks.add(Pair.of(e, r));
+			}
+		}
+		if (allRacks.isEmpty()) return false;
+		for (int i = 0; i < allRacks.size() - 1; i++) {
+			var lo = allRacks.get(i);
+			var hi = allRacks.get(i + 1);
+			lo.getSecond().downwardHeat = hi.getSecond().downwardHeat;
+		}
+		var last = allRacks.get(allRacks.size() - 1);
+		if (RackInfo.isCapped(level, last.getFirst().getBlockPos()))
+			last.getSecond().downwardHeat = last.getSecond().upwardHeat;
+		else last.getSecond().downwardHeat = 0;
+		for (int i = allRacks.size() - 1; i > 0; i--) {
+			var hi = allRacks.get(i);
+			var lo = allRacks.get(i - 1);
+			hi.getSecond().upwardHeat = lo.getSecond().upwardHeat;
+		}
+		var first = allRacks.get(0);
+		if (getBlockState().getValue(SteamerStates.WATER) && isHeated(level, getBlockPos())) {
+			first.getSecond().upwardHeat = OUTPUT_RATE;
+		} else first.getSecond().upwardHeat = 0;
+		for (var e : allRacks) {
+			e.getSecond().tick(e.getFirst(), level);
+		}
+		return true;
+	}
+
+	private void animationTick(Level level) {
+		BlockPos pos = getBlockPos();
+		BlockState state = getBlockState();
+		boolean pot = state.is(YHBlocks.STEAMER_POT.get()) && state.getValue(SteamerStates.WATER) && isHeated(level, pos);
+		boolean steam = pot;
+		for (var r : racks) {
+			if (r.upwardHeat > 0) {
+				steam = true;
+				break;
+			}
+		}
+		double x, y, z;
+		RandomSource random = level.random;
+		if (pot && random.nextFloat() < 0.5F || steam && random.nextFloat() < 0.2F) {
+			x = (double) pos.getX() + 0.5 + (random.nextDouble() * 0.6 - 0.3);
+			z = (double) pos.getZ() + 0.5 + (random.nextDouble() * 0.6 - 0.3);
+			double motionY = random.nextBoolean() ? 0.015 : 0.005;
+			level.addParticle(ModParticleTypes.STEAM.get(), x, pos.getY() + 0.5, z, 0.0, motionY, 0.0);
+
+		}
+		if (!pot) return;
+		if (random.nextFloat() < 0.2F) {
+			x = (double) pos.getX() + 0.5 + (random.nextDouble() * 0.6 - 0.3);
+			y = (double) pos.getY() + 0.7;
+			z = (double) pos.getZ() + 0.5 + (random.nextDouble() * 0.6 - 0.3);
+			level.addParticle(ParticleTypes.BUBBLE_POP, x, y, z, 0.0, 0.0, 0.0);
+		}
+	}
+
+	public void removeRack(Level level, BlockPos pos, int height) {
+		selfHandler = null;
+		var rack = racks.remove(racks.size() - 1);
+		rack.popItems(level, pos, height);
+		sync();
+	}
+
+	private IItemHandlerModifiable selfHandler;
+
+	private IItemHandlerModifiable getSelfHandler() {
+		if (level == null) return new EmptyHandler();
+		if (selfHandler != null) return selfHandler;
+		SteamerItemHandler[] handlers = new SteamerItemHandler[racks.size()];
+		for (int i = 0; i < racks.size(); i++)
+			handlers[i] = new SteamerItemHandler(this, level, racks.get(i));
+		selfHandler = new CombinedInvWrapper(handlers);
+		return selfHandler;
+	}
+
+	private IItemHandlerModifiable getCombinedHandler() {
+		if (level == null) return new EmptyHandler();
+		if (getBlockState().is(YHBlocks.STEAMER_POT.get())) {
+			List<IItemHandlerModifiable> steamers = new ArrayList<>();
+			steamers.add(getSelfHandler());
+			BlockPos pos = getBlockPos().above();
+			while (level.getBlockEntity(pos) instanceof SteamerBlockEntity be &&
+					be.getBlockState().is(YHBlocks.STEAMER_RACK.get())) {
+				steamers.add(be.getSelfHandler());
+				pos = pos.above();
+				if (level.isOutsideBuildHeight(pos)) break;
+				if (steamers.size() >= MAX_STACK) break;
+			}
+			return new CombinedInvWrapper(steamers.toArray(IItemHandlerModifiable[]::new));
+		}
+		var pos = getBlockPos();
+		for (int y = 1; y < MAX_STACK; y++) {
+			var npos = pos.below(y);
+			if (level.isOutsideBuildHeight(npos)) break;
+			if (!(level.getBlockEntity(npos) instanceof SteamerBlockEntity be)) break;
+			if (be.getBlockState().is(YHBlocks.STEAMER_POT.get())) {
+				return be.getCombinedHandler();
+			}
+		}
+		return getSelfHandler();
+	}
+
+	@Override
+	public List<Container> getContainers() {
+		List<ItemStack> stacks = new ArrayList<>();
+		for (var r : racks) {
+			for (var e : r.list) {
+				if (e != null && !e.stack.isEmpty()) {
+					stacks.add(e.stack);
+				}
+			}
+		}
+		return List.of(new SimpleContainer(stacks.toArray(ItemStack[]::new)));
+	}
+
+	@Override
+	public TileTooltip getImage(boolean shift, BlockHitResult hit) {
+		if (shift) {
+			int h = racks.size();
+			List<ItemStack> list = new ArrayList<>();
+			for (var r : racks) {
+				for (var e : r.list) {
+					if (e == null) list.add(ItemStack.EMPTY);
+					else list.add(e.stack);
+				}
+			}
+			return new TileTooltip(list, List.of(), 4, h);
+		}
+		int h = RackInfo.ofY(hit);
+		if (getBlockState().is(YHBlocks.STEAMER_POT.get())) h -= 2;
+		List<ItemStack> list = new ArrayList<>();
+		if (h >= 0 && h < racks.size()) {
+			var r = racks.get(h);
+			for (var e : r.list) {
+				if (e != null && !e.stack.isEmpty()) {
+					list.add(e.stack);
+				}
+			}
+		}
+		return new TileTooltip(list, List.of(), 2, 2);
+	}
+
+	@Override
+	public List<Component> lines(boolean shift, BlockHitResult hit) {
+		return List.of();
+	}
+
+	@Override
+	public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {
+		if (cap == ForgeCapabilities.ITEM_HANDLER) {
+			return LazyOptional.of(this::getCombinedHandler).cast();
+		}
+		return super.getCapability(cap, side);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockJsons.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockJsons.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockJsons.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockJsons.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,136 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import com.tterrag.registrate.providers.DataGenContext;
+import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
+import com.tterrag.registrate.providers.loot.RegistrateBlockLootTables;
+import dev.xkmc.l2library.util.data.LootTableTemplate;
+import dev.xkmc.l2modularblock.BlockProxy;
+import dev.xkmc.l2modularblock.DelegateBlock;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.storage.loot.LootPool;
+import net.minecraft.world.level.storage.loot.LootTable;
+import net.minecraftforge.client.model.generators.BlockModelBuilder;
+import net.minecraftforge.client.model.generators.ModelFile;
+
+import static dev.xkmc.youkaishomecoming.content.pot.steamer.SteamerStates.*;
+
+public class SteamerBlockJsons {
+
+	private static final Integer[][] VALS = {{1, 2, 3, 4}, {2, 3, 4}, {3, 4}, {4}};
+
+	public static void genPotModel(DataGenContext<Block, DelegateBlock> ctx, RegistrateBlockstateProvider pvd) {
+		var builder = pvd.getMultipartBuilder(ctx.get());
+		var pot = pvd.models().getBuilder("steamer_pot")
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/steamer_pot")))
+				.texture("side", pvd.modLoc("block/utensil/steamer_pot_side"))
+				.texture("top", pvd.modLoc("block/utensil/steamer_pot_top"))
+				.texture("handle", pvd.modLoc("block/utensil/steamer_pot_handle"))
+				.texture("bottom", pvd.modLoc("block/utensil/steamer_pot_bottom"))
+				.renderType("cutout");
+
+		var r2 = new ModelFile.UncheckedModelFile(pvd.modLoc("block/steamer_rack_2"));
+		var r3 = new ModelFile.UncheckedModelFile(pvd.modLoc("block/steamer_rack_3"));
+		var c2 = new ModelFile.UncheckedModelFile(pvd.modLoc("block/steamer_lid_2"));
+		var c3 = new ModelFile.UncheckedModelFile(pvd.modLoc("block/steamer_lid_3"));
+
+		for (int d = 0; d < 4; d++) {
+			var dir = Direction.from2DDataValue(d);
+			builder.part().rotationY((int) dir.toYRot()).modelFile(pot).addModel()
+					.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+			builder.part().rotationY((int) dir.toYRot()).modelFile(r2).addModel()
+					.condition(POT_RACKS, 1, 2)
+					.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+			builder.part().rotationY(((int) dir.toYRot() + 180) % 360).modelFile(r3).addModel()
+					.condition(POT_RACKS, 2)
+					.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+			builder.part().rotationY((int) dir.toYRot()).modelFile(c2).addModel()
+					.condition(POT_RACKS, 0).condition(CAPPED, true)
+					.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+			builder.part().rotationY((int) dir.toYRot()).modelFile(c3).addModel()
+					.condition(POT_RACKS, 1).condition(CAPPED, true)
+					.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+		}
+	}
+
+	public static void genRackModel(DataGenContext<Block, DelegateBlock> ctx, RegistrateBlockstateProvider pvd) {
+		var builder = pvd.getMultipartBuilder(ctx.get());
+		BlockModelBuilder[] caps = new BlockModelBuilder[4];
+		for (int h = 0; h < 4; h++) {
+			String id = "steamer_lid" + (h == 0 ? "" : "_" + h);
+			caps[h] = pvd.models().getBuilder(id)
+					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/steamer_lid_" + h)))
+					.texture("lid", pvd.modLoc("block/utensil/steamer_lid"))
+					.texture("handle", pvd.modLoc("block/utensil/steamer_lid_handle"))
+					.renderType("cutout");
+		}
+		for (int h = 0; h < 4; h++) {
+			String id = "steamer_rack" + (h == 0 ? "" : "_" + h);
+			var rack = pvd.models().getBuilder(id)
+					.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/steamer_rack_" + h)))
+					.texture("top", pvd.modLoc("block/utensil/steamer_rack_top"))
+					.texture("bottom", pvd.modLoc("block/utensil/steamer_rack_bottom"))
+					.texture("side", pvd.modLoc("block/utensil/steamer_rack_side"))
+					.texture("inside", pvd.modLoc("block/utensil/steamer_rack_inside"))
+					.texture("outside", pvd.modLoc("block/utensil/steamer_rack_outside"))
+					.texture("rim", pvd.modLoc("block/utensil/steamer_rack_rim"))
+					.texture("particle", pvd.modLoc("block/utensil/steamer_rack_top"))
+					.renderType("cutout");
+
+			for (int d = 0; d < 4; d++) {
+				var dir = Direction.from2DDataValue(d);
+				builder.part().rotationY(((int) dir.toYRot() + 180 * h) % 360).modelFile(rack).addModel()
+						.condition(RACKS, VALS[h])
+						.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+				if (h < 3) {
+					builder.part().rotationY((int) dir.toYRot()).modelFile(caps[h + 1]).addModel()
+							.condition(RACKS, h + 1).condition(CAPPED, true)
+							.condition(BlockProxy.HORIZONTAL_FACING, dir).end();
+				}
+			}
+		}
+	}
+
+	public static void genPotLoot(RegistrateBlockLootTables pvd, DelegateBlock block) {
+		pvd.add(block, LootTable.lootTable()
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_POT.asItem(), 1)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 1))
+						.when(LootTableTemplate.withBlockState(block, POT_RACKS, 1)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 2))
+						.when(LootTableTemplate.withBlockState(block, POT_RACKS, 2)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_LID.asItem(), 1))
+						.when(LootTableTemplate.withBlockState(block, CAPPED, true)))
+		);
+	}
+
+	public static void genRackLoot(RegistrateBlockLootTables pvd, DelegateBlock block) {
+		pvd.add(block, LootTable.lootTable()
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 1))
+						.when(LootTableTemplate.withBlockState(block, RACKS, 1)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 2))
+						.when(LootTableTemplate.withBlockState(block, RACKS, 2)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 3))
+						.when(LootTableTemplate.withBlockState(block, RACKS, 3)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_RACK.asItem(), 4))
+						.when(LootTableTemplate.withBlockState(block, RACKS, 4)))
+				.withPool(LootPool.lootPool()
+						.add(LootTableTemplate.getItem(YHBlocks.STEAMER_LID.asItem(), 1))
+						.when(LootTableTemplate.withBlockState(block, CAPPED, true)))
+		);
+	}
+
+	public static void genLidModel(DataGenContext<Block, DelegateBlock> ctx, RegistrateBlockstateProvider pvd) {
+		var cap = new ModelFile.UncheckedModelFile(pvd.modLoc("block/steamer_lid"));
+		pvd.horizontalBlock(ctx.get(), cap);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockRenderer.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockRenderer.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockRenderer.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerBlockRenderer.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,85 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.math.Axis;
+import dev.xkmc.youkaishomecoming.content.block.food.FoodSaucerBlock;
+import dev.xkmc.youkaishomecoming.content.item.food.FoodSaucerItem;
+import dev.xkmc.youkaishomecoming.util.FluidRenderer;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.renderer.block.ModelBlockRenderer;
+import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
+import net.minecraft.client.renderer.entity.ItemRenderer;
+import net.minecraft.client.resources.model.BakedModel;
+import net.minecraft.core.Direction;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.item.ItemDisplayContext;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.client.model.data.ModelData;
+
+public class SteamerBlockRenderer implements BlockEntityRenderer<SteamerBlockEntity> {
+
+	private static final RandomSource RANDOM = RandomSource.create(42);
+
+	private final ItemRenderer itemRenderer;
+
+	public SteamerBlockRenderer(BlockEntityRendererProvider.Context pContext) {
+		this.itemRenderer = pContext.getItemRenderer();
+	}
+
+	@Override
+	public void render(SteamerBlockEntity be, float pTick, PoseStack pose, MultiBufferSource buffer, int light, int overlay) {
+		RackInfo info = RackInfo.getRackInfo(be.getBlockState());
+		if (info.pot() && be.getBlockState().getValue(SteamerStates.WATER)) {
+			FluidRenderer.renderWaterBox(4 / 16f, 1 / 16f, 4 / 16f, 12 / 16f, 8.01f / 16f, 12 / 16f, buffer, pose, light, 0);
+		}
+		if (info.racks() == 0 || be.racks.isEmpty() || info.racks() > be.racks.size()) return;
+		RackData rack = be.racks.get(info.racks() - 1);
+		if (rack.list[0] != null && rack.list[0].stack.getItem() instanceof FoodSaucerItem item) {
+			pose.pushPose();
+			BlockState state = item.getBlock().defaultBlockState();
+			state = state.setValue(BlockStateProperties.HORIZONTAL_FACING, state.getValue(BlockStateProperties.HORIZONTAL_FACING));
+			BakedModel model = Minecraft.getInstance().getModelManager().getBlockModelShaper().getBlockModel(state);
+			pose.translate(.5f, (info.height() * 4 - 3) / 16f, .5f);
+			FoodSaucerBlock block = (FoodSaucerBlock) item.getBlock();
+			var saucer = block.dish.saucer;
+			int width = 16 - Math.min(saucer.x, saucer.z) * 2;
+			float s = 8f / width;
+			pose.scale(s, s, s);
+			pose.translate(-.5f, 0, -.5f);
+			ModelBlockRenderer renderer = Minecraft.getInstance().getBlockRenderer().getModelRenderer();
+			PoseStack.Pose mat = pose.last();
+			RANDOM.setSeed(42);
+			for (RenderType rt : model.getRenderTypes(state, RANDOM, ModelData.EMPTY)) {
+				renderer.renderModel(mat, buffer.getBuffer(ForgeHooksClient.getEntityRenderType(rt, false)),
+						state, model, 1F, 1F, 1F, light, overlay, ModelData.EMPTY, rt);
+			}
+			pose.popPose();
+			return;
+		}
+		int i = (int) be.getBlockPos().asLong();
+		for (int j = 0; j < rack.list.length; ++j) {
+			var data = rack.list[j];
+			if (data == null) continue;
+			ItemStack stack = data.stack;
+			if (stack.isEmpty()) continue;
+			pose.pushPose();
+			pose.translate(0.5F, (info.height() * 4 - 2.8) / 16f, 0.5F);
+			Direction rot = Direction.from2DDataValue(j % 4);
+			pose.mulPose(Axis.YP.rotationDegrees(-rot.toYRot()));
+			pose.mulPose(Axis.XP.rotationDegrees(90.0F));
+			float dist = 2f / 16;
+			float scale = 5f / 16;
+			pose.translate(-dist, -dist, 0.0F);
+			pose.scale(scale, scale, scale);
+			this.itemRenderer.renderStatic(stack, ItemDisplayContext.FIXED, light, overlay, pose, buffer, be.getLevel(), i + j);
+			pose.popPose();
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerItemHandler.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerItemHandler.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerItemHandler.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerItemHandler.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,75 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.youkaishomecoming.content.item.food.FoodSaucerItem;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
+import net.minecraftforge.items.IItemHandlerModifiable;
+import org.jetbrains.annotations.NotNull;
+
+public record SteamerItemHandler(
+		SteamerBlockEntity be, Level level, RackData rack
+) implements IItemHandlerModifiable {
+
+	@Override
+	public void setStackInSlot(int index, @NotNull ItemStack stack) {
+		if (index < 0 || index >= 4) return;
+		var item = rack.list[index];
+		if (item == null) rack.list[index] = item = new RackItemData();
+		item.setStack(be, stack);
+	}
+
+	@Override
+	public int getSlots() {
+		return 4;
+	}
+
+	@Override
+	public @NotNull ItemStack getStackInSlot(int index) {
+		if (index < 0 || index >= 4) return ItemStack.EMPTY;
+		var item = rack.list[index];
+		return item == null ? ItemStack.EMPTY : item.stack;
+	}
+
+	@Override
+	public @NotNull ItemStack insertItem(int index, @NotNull ItemStack stack, boolean simulate) {
+		if (index < 0 || index >= 4) return stack;
+		if (stack.getItem() instanceof FoodSaucerItem) {
+			if (index != 0) return stack;
+			for (int i = 0; i < 4; i++) {
+				if (rack.list[index] != null && !rack.list[index].stack.isEmpty())
+					return stack;
+			}
+		}
+		var item = rack.list[index];
+		if (item == null) rack.list[index] = item = new RackItemData();
+		if (!item.stack.isEmpty()) return stack;
+		if (!simulate) {
+			item.setStack(be, stack.copyWithCount(1));
+		}
+		return stack.copyWithCount(stack.getCount() - 1);
+	}
+
+	@Override
+	public @NotNull ItemStack extractItem(int index, int amount, boolean simulate) {
+		if (index < 0 || index >= 4 || amount <= 0) return ItemStack.EMPTY;
+		var item = rack.list[index];
+		if (item == null || item.stack.isEmpty()) return ItemStack.EMPTY;
+		if (!item.mayExtract()) return ItemStack.EMPTY;
+		ItemStack ans = item.stack.copy();
+		if (!simulate) {
+			item.setStack(be, ItemStack.EMPTY);
+		}
+		return ans;
+	}
+
+	@Override
+	public int getSlotLimit(int slot) {
+		return 1;
+	}
+
+	@Override
+	public boolean isItemValid(int slot, @NotNull ItemStack stack) {
+		return RackData.isValid(level, stack);
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerStates.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerStates.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerStates.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamerStates.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,152 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.l2modularblock.BlockProxy;
+import dev.xkmc.l2modularblock.DelegateBlock;
+import dev.xkmc.l2modularblock.impl.BlockEntityBlockMethodImpl;
+import dev.xkmc.l2modularblock.mult.CreateBlockStateBlockMethod;
+import dev.xkmc.l2modularblock.mult.DefaultStateBlockMethod;
+import dev.xkmc.l2modularblock.mult.ShapeUpdateBlockMethod;
+import dev.xkmc.l2modularblock.one.ShapeBlockMethod;
+import dev.xkmc.l2modularblock.type.BlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.SoundType;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.material.MapColor;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.Nullable;
+
+public class SteamerStates {
+
+	public static final VoxelShape[] SHAPES_NO_LID, SHAPES_WITH_LID;
+	public static final BlockMethod POT = new Pot();
+	public static final BlockMethod RACK = new Rack();
+	public static final BlockMethod LID = new Lid();
+	public static final BlockMethod TE = new BlockEntityBlockMethodImpl<>(YHBlocks.STEAMER_BE, SteamerBlockEntity.class);
+	public static final BlockMethod ADD_RACK = new ClickAddRackMethod();
+	public static final BlockMethod TAKE_RACK = new ClickTakeRackMethod();
+	public static final BlockMethod ADD_ITEM = new ClickAddItemMethod();
+	public static final BlockMethod TAKE_ITEM = new ClickTakeItemMethod();
+	public static final BlockMethod ADD_WATER = new ClickAddWaterMethod();
+	public static final BlockMethod ADD_LID = new ClickAddLidMethod();
+	public static final BlockMethod TAKE_LID = new ClickRemoveLidMethod();
+
+	static {
+		SHAPES_NO_LID = new VoxelShape[4];
+		SHAPES_WITH_LID = new VoxelShape[4];
+		for (int i = 0; i < 4; i++) {
+			SHAPES_NO_LID[i] = Block.box(2, 0, 2, 14, 4 * i + 4, 14);
+			SHAPES_WITH_LID[i] = Block.box(2, 0, 2, 14, 4 * i + 1, 14);
+		}
+	}
+
+	public static final IntegerProperty RACKS = IntegerProperty.create("racks", 1, 4);
+	public static final IntegerProperty POT_RACKS = IntegerProperty.create("pot_racks", 0, 2);
+	public static final BooleanProperty WATER = BooleanProperty.create("water");
+	public static final BooleanProperty CAPPED = BooleanProperty.create("capped");
+
+	public static DelegateBlock createPotBlock() {
+		return DelegateBlock.newBaseBlock(
+				BlockBehaviour.Properties.of().strength(2f).forceSolidOn()
+						.sound(SoundType.METAL).mapColor(MapColor.METAL),
+				POT, BlockProxy.HORIZONTAL,
+				ADD_LID, TAKE_LID, ADD_WATER, ADD_RACK, ADD_ITEM, TAKE_ITEM, TAKE_RACK, TE
+		);
+	}
+
+	public static DelegateBlock createRackBlock() {
+		return DelegateBlock.newBaseBlock(
+				BlockBehaviour.Properties.of().strength(0.5f).forceSolidOn()
+						.sound(SoundType.BAMBOO).mapColor(MapColor.PLANT),
+				RACK, BlockProxy.HORIZONTAL,
+				ADD_LID, TAKE_LID, ADD_RACK, ADD_ITEM, TAKE_ITEM, TAKE_RACK, TE
+		);
+	}
+
+	public static DelegateBlock createLidBlock() {
+		return DelegateBlock.newBaseBlock(
+				BlockBehaviour.Properties.of().strength(0.5f).forceSolidOn()
+						.sound(SoundType.WOOD).mapColor(MapColor.WOOD),
+				LID, BlockProxy.HORIZONTAL, TAKE_LID
+		);
+	}
+
+	public record Pot() implements CreateBlockStateBlockMethod, DefaultStateBlockMethod, ShapeBlockMethod {
+
+		@Override
+		public void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+			builder.add(POT_RACKS, CAPPED, WATER);
+		}
+
+		@Override
+		public BlockState getDefaultState(BlockState state) {
+			return state.setValue(POT_RACKS, 0).setValue(CAPPED, false).setValue(WATER, false);
+		}
+
+		@Nullable
+		@Override
+		public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext ctx) {
+			if (state.getValue(CAPPED)) {
+				return SHAPES_WITH_LID[Math.min(3, state.getValue(POT_RACKS) + 2)];
+			}
+			return SHAPES_NO_LID[state.getValue(POT_RACKS) + 1];
+		}
+
+	}
+
+	public record Rack() implements CreateBlockStateBlockMethod, DefaultStateBlockMethod,
+			ShapeBlockMethod, ShapeUpdateBlockMethod {
+
+		@Override
+		public void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+			builder.add(RACKS, CAPPED);
+		}
+
+		@Override
+		public BlockState getDefaultState(BlockState state) {
+			return state.setValue(RACKS, 1).setValue(CAPPED, false);
+		}
+
+		@Nullable
+		@Override
+		public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext ctx) {
+			if (state.getValue(CAPPED)) {
+				return SHAPES_WITH_LID[Math.min(3, state.getValue(RACKS))];
+			}
+			return SHAPES_NO_LID[state.getValue(RACKS) - 1];
+		}
+
+		@Override
+		public BlockState updateShape(
+				Block block, BlockState current, BlockState state, Direction dir, BlockState neiState,
+				LevelAccessor level, BlockPos pos, BlockPos neiPos) {
+			if (dir == Direction.DOWN) {
+				if (!neiState.isCollisionShapeFullBlock(level, neiPos) &&
+						!Block.canSupportCenter(level, neiPos, Direction.UP))
+					return Blocks.AIR.defaultBlockState();
+			}
+			return current;
+		}
+	}
+
+	public record Lid() implements ShapeBlockMethod {
+
+		@Nullable
+		@Override
+		public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext ctx) {
+			return SHAPES_WITH_LID[0];
+		}
+
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamingRecipe.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamingRecipe.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamingRecipe.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/steamer/SteamingRecipe.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,25 @@
+package dev.xkmc.youkaishomecoming.content.pot.steamer;
+
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.crafting.AbstractCookingRecipe;
+import net.minecraft.world.item.crafting.CookingBookCategory;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.RecipeSerializer;
+
+public class SteamingRecipe extends AbstractCookingRecipe {
+
+	public SteamingRecipe(ResourceLocation id, String group, CookingBookCategory category,
+						  Ingredient ingredient, ItemStack stack, float exp, int time) {
+		super(YHBlocks.STEAM_RT.get(), id, group, category, ingredient, stack, exp, time);
+	}
+
+	public ItemStack getToastSymbol() {
+		return YHBlocks.STEAMER_RACK.asStack();
+	}
+
+	public RecipeSerializer<?> getSerializer() {
+		return YHBlocks.STEAM_RS.get();
+	}
+}
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlock.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlock.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,95 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import com.tterrag.registrate.providers.DataGenContext;
+import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
+import dev.xkmc.l2modularblock.DelegateBlock;
+import dev.xkmc.l2modularblock.impl.BlockEntityBlockMethodImpl;
+import dev.xkmc.l2modularblock.mult.CreateBlockStateBlockMethod;
+import dev.xkmc.l2modularblock.mult.DefaultStateBlockMethod;
+import dev.xkmc.l2modularblock.mult.OnClickBlockMethod;
+import dev.xkmc.l2modularblock.mult.PlacementBlockMethod;
+import dev.xkmc.l2modularblock.one.ShapeBlockMethod;
+import dev.xkmc.l2modularblock.type.BlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import dev.xkmc.youkaishomecoming.util.VoxelBuilder;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.Shapes;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import net.minecraftforge.client.model.generators.ModelFile;
+import org.jetbrains.annotations.Nullable;
+
+public class CopperFaucetBlock implements
+		CreateBlockStateBlockMethod, DefaultStateBlockMethod, PlacementBlockMethod,
+		OnClickBlockMethod, ShapeBlockMethod {
+
+	public static final BlockMethod INS = new CopperFaucetBlock();
+	public static final BlockMethod TE = new BlockEntityBlockMethodImpl<>(YHBlocks.FAUCET_BE, CopperFaucetBlockEntity.class);
+
+	private static final VoxelShape[] SHAPES;
+
+	static {
+		SHAPES = new VoxelShape[4];
+		for (int i = 0; i < 4; i++) {
+			Direction dir = Direction.from2DDataValue(i);
+			SHAPES[i] = Shapes.or(
+					new VoxelBuilder(5, 5, 15, 11, 11, 16).rotateFromNorth(dir),
+					new VoxelBuilder(6, 6, 6, 10, 10, 16).rotateFromNorth(dir),
+					new VoxelBuilder(6, 4, 6, 10, 6, 10).rotateFromNorth(dir),
+					new VoxelBuilder(5, 2, 5, 11, 4, 11).rotateFromNorth(dir),
+					new VoxelBuilder(5, 11, 7, 11, 12, 13).rotateFromNorth(dir),
+					new VoxelBuilder(7, 10, 9, 9, 11, 11).rotateFromNorth(dir)
+			);
+		}
+	}
+
+	@Override
+	public void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+		builder.add(BlockStateProperties.OPEN);
+	}
+
+	@Override
+	public BlockState getDefaultState(BlockState state) {
+		return state.setValue(BlockStateProperties.OPEN, false);
+	}
+
+	@Override
+	public BlockState getStateForPlacement(BlockState state, BlockPlaceContext ctx) {
+		return ctx.getClickedFace().getAxis() == Direction.Axis.Y ? state :
+				state.setValue(BlockStateProperties.HORIZONTAL_FACING, ctx.getClickedFace());
+	}
+
+	@Override
+	public @Nullable VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext ctx) {
+		return SHAPES[state.getValue(BlockStateProperties.HORIZONTAL_FACING).get2DDataValue()];
+	}
+
+	@Override
+	public InteractionResult onClick(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+		if (level.getBlockEntity(pos) instanceof CopperFaucetBlockEntity be) {
+			return be.activate() ? InteractionResult.SUCCESS : InteractionResult.PASS;
+		}
+		return InteractionResult.PASS;
+	}
+
+	public static void buildStates(DataGenContext<Block, DelegateBlock> ctx, RegistrateBlockstateProvider pvd) {
+		pvd.horizontalBlock(ctx.get(), pvd.models().getBuilder("block/" + ctx.getName())
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/utensil/faucet")))
+				.texture("base", pvd.modLoc("block/utensil/" + ctx.getName()))
+				.texture("valve", pvd.modLoc("block/utensil/" + ctx.getName() + "_valve"))
+				.texture("particle", pvd.modLoc("block/utensil/" + ctx.getName())));
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlockEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlockEntity.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,103 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import dev.xkmc.l2library.base.tile.BaseBlockEntity;
+import dev.xkmc.l2modularblock.tile_api.TickableBlockEntity;
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.pot.kettle.KettleBlockEntity;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.IFluidHandler;
+
+@SerialClass
+public class CopperFaucetBlockEntity extends BaseBlockEntity implements TickableBlockEntity {
+
+	@SerialClass.SerialField
+	protected FluidStack cache = FluidStack.EMPTY;
+
+	public CopperFaucetBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
+		super(type, pos, state);
+	}
+
+	public boolean activate() {
+		var level = getLevel();
+		if (level == null) return false;
+		Direction attached = getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
+		var src = level.getBlockEntity(getBlockPos().relative(attached.getOpposite()));
+		var dst = level.getBlockEntity(getBlockPos().below());
+		if (src == null || dst == null)
+			return false;
+		if (src instanceof CopperTankBlockEntity tank && dst instanceof KettleBlockEntity kettle) {
+			if (!activateHeat(tank, kettle)) return false;
+		}
+		var fsrc = src.getCapability(ForgeCapabilities.FLUID_HANDLER, attached);
+		var fdst = dst.getCapability(ForgeCapabilities.FLUID_HANDLER, Direction.UP);
+		if (fsrc.resolve().isEmpty() || fdst.resolve().isEmpty())
+			return false;
+		level.setBlockAndUpdate(getBlockPos(), getBlockState().setValue(BlockStateProperties.OPEN, true));
+		return true;
+	}
+
+	private boolean activateHeat(CopperTankBlockEntity tank, KettleBlockEntity kettle) {
+		return tank.getHeat() >= 50;
+	}
+
+	@Override
+	public void tick() {
+		if (level == null || level.isClientSide) return;
+		if (getBlockState().getValue(BlockStateProperties.OPEN)) {
+			if (!tryTransfer()) {
+				cache = FluidStack.EMPTY;
+				sync();
+				level.setBlockAndUpdate(getBlockPos(), getBlockState().setValue(BlockStateProperties.OPEN, false));
+			}
+		}
+	}
+
+	private boolean tryTransfer() {
+		var level = getLevel();
+		if (level == null) return false;
+		Direction attached = getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
+		var src = level.getBlockEntity(getBlockPos().relative(attached.getOpposite()));
+		var dst = level.getBlockEntity(getBlockPos().below());
+		if (src == null || dst == null)
+			return false;
+		if (src instanceof CopperTankBlockEntity tank && dst instanceof KettleBlockEntity kettle) {
+			if (!activateHeat(tank, kettle)) return false;
+		}
+		var fsrc = src.getCapability(ForgeCapabilities.FLUID_HANDLER, attached);
+		var fdst = dst.getCapability(ForgeCapabilities.FLUID_HANDLER, Direction.UP);
+		if (fsrc.resolve().isEmpty() || fdst.resolve().isEmpty())
+			return false;
+		var hsrc = fsrc.resolve().get();
+		var hdst = fdst.resolve().get();
+		var sdrain = hsrc.drain(50, IFluidHandler.FluidAction.SIMULATE);
+		var fill = hdst.fill(sdrain, IFluidHandler.FluidAction.SIMULATE);
+		if (fill <= 0)
+			return false;
+		var drain = hsrc.drain(fill, IFluidHandler.FluidAction.EXECUTE);
+		cache = drain.copy();
+		sync();
+		if (src instanceof CopperTankBlockEntity tank && dst instanceof KettleBlockEntity kettle) {
+			if (kettle.getBlockState().getValue(BlockStateProperties.WATERLOGGED)) return false;
+			kettle.setWater(0);
+			int amount = hdst.fill(drain, IFluidHandler.FluidAction.EXECUTE);
+			int consume = tank.consumeHeat(amount);
+			if (consume > 0) {
+				kettle.cookingTick(consume, true);
+				if (kettle.getWater() > 0) {
+					kettle.setWater(0);
+					return false;
+				}
+			}
+		} else {
+			 hdst.fill(drain, IFluidHandler.FluidAction.EXECUTE);
+		}
+		return true;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetRenderer.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetRenderer.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetRenderer.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperFaucetRenderer.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,25 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+import dev.xkmc.youkaishomecoming.util.FluidRenderer;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
+import net.minecraftforge.fluids.FluidStack;
+
+public class CopperFaucetRenderer implements BlockEntityRenderer<CopperFaucetBlockEntity> {
+
+	public CopperFaucetRenderer(BlockEntityRendererProvider.Context context) {
+	}
+
+	@Override
+	public void render(CopperFaucetBlockEntity entity, float pTick, PoseStack pose, MultiBufferSource buffer, int light, int overlay) {
+		FluidStack fluid = entity.cache;
+		if (!fluid.isEmpty()) {
+			FluidRenderer.renderFluidBox(fluid, 6f / 16, -8f / 16, 6f / 16,
+					10f / 16, 4f / 16, 10f / 16,
+					buffer, pose, light, false, 0);
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlock.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlock.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlock.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlock.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,63 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import com.tterrag.registrate.providers.DataGenContext;
+import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
+import dev.xkmc.l2modularblock.DelegateEntityBlockImpl;
+import dev.xkmc.l2modularblock.impl.BlockEntityBlockMethodImpl;
+import dev.xkmc.l2modularblock.type.BlockMethod;
+import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraftforge.client.model.generators.ConfiguredModel;
+
+public class CopperTankBlock extends DelegateEntityBlockImpl {
+
+	public static final BlockMethod INS = new CopperTankBlockVertical();
+	public static final BlockMethod TE = new BlockEntityBlockMethodImpl<>(YHBlocks.TANK_BE, CopperTankBlockEntity.class);
+
+	public CopperTankBlock(Properties p, BlockMethod... impl) {
+		super(p, impl);
+	}
+
+	public void playerWillDestroy(Level level, BlockPos pos, BlockState state, Player player) {
+		if (!level.isClientSide && player.isCreative()) {
+			preventCreativeDropFromBottomPart(level, pos, state, player);
+		}
+		super.playerWillDestroy(level, pos, state, player);
+	}
+
+	protected static void preventCreativeDropFromBottomPart(Level level, BlockPos pos, BlockState state, Player player) {
+		DoubleBlockHalf half = state.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF);
+		BlockPos alt = half == DoubleBlockHalf.UPPER ? pos.below() : pos.above();
+		BlockState altState = level.getBlockState(alt);
+		if (altState.is(state.getBlock()) && altState.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF) != half) {
+			BlockState ans = altState.getFluidState().is(Fluids.WATER) ? Blocks.WATER.defaultBlockState() : Blocks.AIR.defaultBlockState();
+			level.setBlock(alt, ans, 35);
+			level.levelEvent(player, 2001, alt, Block.getId(altState));
+		}
+	}
+
+	public static void buildStates(DataGenContext<Block, CopperTankBlock> ctx, RegistrateBlockstateProvider pvd) {
+		pvd.getVariantBuilder(ctx.get()).forAllStates(state -> {
+			boolean up = state.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF) == DoubleBlockHalf.UPPER;
+			boolean open = state.getValue(BlockStateProperties.OPEN);
+			String id = up ? "block/copper_tank" : "block/copper_tank_lower";
+			if (open) id += "_open";
+			String side = up ? "copper_tank_side_up" : "copper_tank_side_down";
+			String top = open ? "copper_tank_top_open" : "copper_tank_top";
+			return ConfiguredModel.builder().modelFile(pvd.models().cubeBottomTop(id,
+					pvd.modLoc("block/utensil/" + side),
+					pvd.modLoc("block/utensil/copper_tank_bottom"),
+					pvd.modLoc("block/utensil/" + top)
+			)).build();
+		});
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockEntity.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockEntity.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockEntity.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockEntity.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,123 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import dev.xkmc.l2library.base.tile.BaseBlockEntity;
+import dev.xkmc.l2library.base.tile.BaseContainerListener;
+import dev.xkmc.l2library.base.tile.BaseTank;
+import dev.xkmc.l2modularblock.tile_api.TickableBlockEntity;
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.InfoTile;
+import dev.xkmc.youkaishomecoming.content.pot.overlay.TileTooltip;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.network.chat.Component;
+import net.minecraft.tags.FluidTags;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraftforge.common.capabilities.Capability;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.common.util.LazyOptional;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.IFluidHandler;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import vectorwing.farmersdelight.common.block.entity.HeatableBlockEntity;
+
+import java.util.List;
+
+@SerialClass
+public class CopperTankBlockEntity extends BaseBlockEntity implements TickableBlockEntity, InfoTile, BaseContainerListener, HeatableBlockEntity {
+
+	@SerialClass.SerialField
+	private final BaseTank water = new BaseTank(1, 8000)
+			.setPredicate(e -> e.getFluid().isSame(Fluids.WATER))
+			.add(this);
+
+	@SerialClass.SerialField
+	private int heatedWater = 0;
+
+	public CopperTankBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
+		super(type, pos, state);
+	}
+
+	@Override
+	public void tick() {
+		if (level == null || level.isClientSide()) return;
+		if (getBlockState().getValue(BlockStateProperties.DOUBLE_BLOCK_HALF) == DoubleBlockHalf.UPPER) {
+			if (level.getGameTime() % 5 != 0) return;
+			var fluid = level.getFluidState(getBlockPos().above());
+			if (fluid.is(FluidTags.WATER) && fluid.isSource()) {
+				if (getRoot().water.fill(new FluidStack(Fluids.WATER, 1000), IFluidHandler.FluidAction.EXECUTE) > 0) {
+					notifyTile();
+				}
+			}
+		} else {
+			int next;
+			if (!isHeated(level, getBlockPos())) {
+				next = Math.max(0, heatedWater - 1);
+			} else {
+				next = heatedWater + 2;
+			}
+			var ans = Math.min(water.getFluidInTank(0).getAmount(), next);
+			if (ans != heatedWater) {
+				heatedWater = ans;
+				notifyTile();
+			}
+		}
+	}
+
+	public int consumeHeat(int consume) {
+		var root = getRoot();
+		int ans = Math.min(root.heatedWater, consume);
+		root.heatedWater -= ans;
+		return ans;
+	}
+
+	@Override
+	public TileTooltip getImage(boolean shift, BlockHitResult hit) {
+		return new TileTooltip(List.of(), List.of(getRoot().water.getFluidInTank(0)), 1, 1);
+	}
+
+	@Override
+	public List<Component> lines(boolean shift, BlockHitResult hit) {
+		var root = getRoot();
+		int heat = root.heatedWater;
+		int water = root.water.getFluidInTank(0).getAmount();
+		int perc = Mth.clamp( heat * 100 / water, 0, 100);
+		return List.of(Component.literal(perc + "%"));
+	}
+
+	private CopperTankBlockEntity getRoot() {
+		if (getBlockState().getValue(BlockStateProperties.DOUBLE_BLOCK_HALF) == DoubleBlockHalf.UPPER) {
+			var level = getLevel();
+			if (level == null) return this;
+			if (level.getBlockEntity(getBlockPos().below()) instanceof CopperTankBlockEntity be)
+				return be;
+		}
+		return this;
+	}
+
+	@Override
+	public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {
+		if (cap == ForgeCapabilities.FLUID_HANDLER) {
+			var ans = getRoot().water;
+			return LazyOptional.of(() -> ans).cast();
+		}
+		return super.getCapability(cap, side);
+	}
+
+	@Override
+	public void notifyTile() {
+		sync();
+		setChanged();
+	}
+
+	public int getHeat() {
+		return getRoot().heatedWater;
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockVertical.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockVertical.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockVertical.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/CopperTankBlockVertical.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,68 @@
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import dev.xkmc.l2modularblock.mult.CreateBlockStateBlockMethod;
+import dev.xkmc.l2modularblock.mult.PlacementBlockMethod;
+import dev.xkmc.l2modularblock.mult.SetPlacedByBlockMethod;
+import dev.xkmc.l2modularblock.mult.ShapeUpdateBlockMethod;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.material.Fluids;
+
+import javax.annotation.Nullable;
+
+public class CopperTankBlockVertical implements CreateBlockStateBlockMethod, PlacementBlockMethod, SetPlacedByBlockMethod, ShapeUpdateBlockMethod {
+
+	@Override
+	public void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+		builder.add(BlockStateProperties.DOUBLE_BLOCK_HALF);
+		builder.add(BlockStateProperties.OPEN);
+	}
+
+	@Nullable
+	public BlockState getStateForPlacement(@Nullable BlockState def, BlockPlaceContext ctx) {
+		if (def == null) return null;
+		if (ctx.getLevel().getBlockState(ctx.getClickedPos().above()).canBeReplaced(ctx))
+			return def.setValue(BlockStateProperties.DOUBLE_BLOCK_HALF, DoubleBlockHalf.LOWER);
+		if (ctx.getLevel().getBlockState(ctx.getClickedPos().below()).canBeReplaced(ctx))
+			return def.setValue(BlockStateProperties.DOUBLE_BLOCK_HALF, DoubleBlockHalf.UPPER)
+					.setValue(BlockStateProperties.OPEN, ctx.getLevel().getFluidState(ctx.getClickedPos().above()).isSourceOfType(Fluids.WATER));
+		return null;
+	}
+
+	@Override
+	public void setPlacedBy(Level level, BlockPos pos, BlockState state, @Nullable LivingEntity le, ItemStack stack) {
+		var half = state.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF);
+		if (half == DoubleBlockHalf.LOWER) {
+			level.setBlockAndUpdate(pos.above(), state.setValue(BlockStateProperties.DOUBLE_BLOCK_HALF, DoubleBlockHalf.UPPER)
+					.setValue(BlockStateProperties.OPEN, level.getFluidState(pos.above()).isSourceOfType(Fluids.WATER)));
+		} else {
+			level.setBlockAndUpdate(pos.below(), state.setValue(BlockStateProperties.DOUBLE_BLOCK_HALF, DoubleBlockHalf.LOWER));
+		}
+	}
+
+	@Override
+	public BlockState updateShape(Block self, BlockState current, BlockState state, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+		var half = current.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF);
+		var dir = half == DoubleBlockHalf.LOWER ? Direction.UP : Direction.DOWN;
+		if (facing == dir) {
+			if (!facingState.is(self) || facingState.getValue(BlockStateProperties.DOUBLE_BLOCK_HALF) == half)
+				return Blocks.AIR.defaultBlockState();
+		}
+		if (half == DoubleBlockHalf.UPPER && facing == Direction.UP) {
+			return current.setValue(BlockStateProperties.OPEN, level.getFluidState(facingPos).isSourceOfType(Fluids.WATER));
+		}
+		return current;
+	}
+
+}
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/package-info.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/package-info.java b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/package-info.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/pot/tank/package-info.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,8 @@
+@MethodsReturnNonnullByDefault
+@ParametersAreNonnullByDefault
+
+package dev.xkmc.youkaishomecoming.content.pot.tank;
+
+import net.minecraft.MethodsReturnNonnullByDefault;
+
+import javax.annotation.ParametersAreNonnullByDefault;
\ No newline at end of file
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/CirnoSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/CirnoSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/CirnoSpell.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/CirnoSpell.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/CirnoSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -6,6 +6,7 @@
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.ActualSpellCard;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.TrailAction;
 import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.animal.frog.Frog;
@@ -54,7 +55,7 @@
 		public boolean tick(CardHolder holder, CirnoSpell card) {
 			step(holder);
 			super.tick(holder, card);
-			return false;
+			return tick > 0;
 		}
 
 		private void step(CardHolder holder) {
@@ -76,25 +77,42 @@
 					var vec = front.scale(acc * t0);
 					var e = holder.prepareDanmaku(t0, vec, YHDanmaku.Bullet.MENTOS, DyeColor.LIGHT_BLUE);
 					e.mover = new RectMover(pos, vec, front.scale(-acc));
+					e.afterExpiry = new IcePopsicle().setup(m, t2 + r.nextInt(dt), dr, termSpeed);
 					holder.shoot(e);
 				}
 			}
-			if (tick == t0) {
-				var o0 = DanmakuHelper.getOrientation(init, normal);
-				for (int i = 0; i < n; i++) {
-					var f0 = o0.rotateDegrees(360.0 / n * i);
-					var p0 = pos.add(f0.scale(r0));
-					var f1 = le.subtract(p0).normalize();
-					var o1 = DanmakuHelper.getOrientation(f1);
-					for (int j = 0; j < m; j++) {
-						var vec = o1.rotateDegrees((j - (m - 1) * 0.5) * dr).scale(termSpeed);
-						int t = t2 + r.nextInt(dt);
-						var e = holder.prepareDanmaku(t, vec, YHDanmaku.Bullet.BALL, DyeColor.LIGHT_BLUE);
-						e.setPos(p0);
-						e.mover = new RectMover(p0, vec, Vec3.ZERO);
-						holder.shoot(e);
-					}
-				}
+		}
+
+	}
+
+	@SerialClass
+	public static class IcePopsicle extends TrailAction {
+
+		@SerialClass.SerialField
+		private int count, life;
+		@SerialClass.SerialField
+		private double dr, speed;
+
+		public IcePopsicle setup(int count, int life, double angle, double speed) {
+			this.count = count;
+			this.life = life;
+			this.dr = angle;
+			this.speed = speed;
+			return this;
+		}
+
+		@Override
+		public void execute(CardHolder holder, Vec3 pos, Vec3 dir) {
+			var le = holder.target();
+			if (le == null) return;
+			var f1 = le.subtract(pos).normalize();
+			var o1 = DanmakuHelper.getOrientation(f1);
+			for (int j = 0; j < count; j++) {
+				var vec = o1.rotateDegrees((j - (count - 1) * 0.5) * dr).scale(speed);
+				var e = holder.prepareDanmaku(life, vec, YHDanmaku.Bullet.BALL, DyeColor.LIGHT_BLUE);
+				e.setPos(pos);
+				e.mover = new RectMover(pos, vec, Vec3.ZERO);
+				holder.shoot(e);
 			}
 		}
 
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/ReimuSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/ReimuSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/ReimuSpell.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/ReimuSpell.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/ReimuSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -5,12 +5,10 @@
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.DanmakuHelper;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.IYHDanmaku;
 import dev.xkmc.youkaishomecoming.content.entity.danmaku.ItemDanmakuEntity;
+import dev.xkmc.youkaishomecoming.content.entity.youkai.YoukaiEntity;
 import dev.xkmc.youkaishomecoming.content.item.danmaku.DanmakuItem;
 import dev.xkmc.youkaishomecoming.content.spell.mover.RectMover;
-import dev.xkmc.youkaishomecoming.content.spell.spellcard.ActualSpellCard;
-import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
-import dev.xkmc.youkaishomecoming.content.spell.spellcard.TargetTracker;
-import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.*;
 import dev.xkmc.youkaishomecoming.init.data.YHDamageTypes;
 import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
 import net.minecraft.sounds.SoundEvents;
@@ -26,7 +24,7 @@
 public class ReimuSpell extends ActualSpellCard {
 
 	@SerialClass.SerialField
-	private boolean border, abyss;
+	private boolean border;
 
 	@SerialClass.SerialField
 	private TargetTracker tracker = new TargetTracker();
@@ -36,7 +34,8 @@
 		super.tick(holder);
 		int interval = 10;
 		if (tick > 2400) {
-			abyss = true;
+			if (holder.self() instanceof YoukaiEntity youkai)
+				youkai.setFlag(4, true);
 		}
 		var target = holder.target();
 		if (target == null) return;
@@ -48,7 +47,7 @@
 				shoot(holder, dist);
 			} else if (dist > 40) {
 				intercept(holder, target);
-			} else if (step == 3 && abyss && tracker.flyTime() > 20) {
+			} else if (step == 3 && isAbyss(holder) && tracker.flyTime() > 20) {
 				var dir = target.subtract(holder.center()).normalize();
 				var ori = DanmakuHelper.getOrientation(dir).rotateDegrees(holder.random().nextDouble() * 120 + 30, 0);
 				var sec = DanmakuHelper.getOrientation(ori).rotateDegrees(90, holder.random().nextDouble() * 120 - 60);
@@ -63,10 +62,18 @@
 	public void reset() {
 		super.reset();
 		border = false;
-		abyss = false;
 		tracker = new TargetTracker();
 	}
 
+	private void setAbyss(CardHolder holder) {
+		if (holder.self() instanceof YoukaiEntity youkai)
+			youkai.setFlag(4, true);
+	}
+
+	private boolean isAbyss(CardHolder holder) {
+		return holder.self() instanceof YoukaiEntity e && e.getFlag(4);
+	}
+
 	private void shoot(CardHolder holder, double dist) {
 		var target = holder.target();
 		var vel = tracker.vel();
@@ -78,7 +85,7 @@
 		ans.t0 = (int) Mth.lerp(perc, 20, 10);
 		ans.t1 = (int) Mth.lerp(perc, 20, 10);
 		ans.termSpeed = (int) Mth.lerp(perc, 1, 3);
-		if (abyss) ans.color = DyeColor.BLUE;
+		if (isAbyss(holder)) ans.color = DyeColor.BLUE;
 
 		var diff = target.subtract(holder.center());
 		var r = holder.random();
@@ -149,11 +156,11 @@
 		if (source.getEntity() != null) border = true;
 		float hp = holder.self().getHealth(), mhp = holder.self().getMaxHealth();
 		if (hp < mhp / 2) {
-			abyss = true;
+			setAbyss(holder);
 		}
 		var target = holder.target();
 		if (target == null) return;
-		if (abyss) {
+		if (isAbyss(holder)) {
 			var dist = holder.center().distanceTo(target);
 			var dir = target.subtract(holder.center()).normalize();
 			Vec3 ori, sec;
@@ -196,7 +203,7 @@
 			ans.init = DanmakuHelper.getOrientation(ori, normal).rotateDegrees(s * (i - 2) * angle);
 			ans.normal = normal;
 			ans.tick = -i * delay;
-			if (abyss) ans.color = DyeColor.BLUE;
+			if (isAbyss(holder)) ans.color = DyeColor.BLUE;
 			addTicker(ans);
 		}
 	}
@@ -237,7 +244,7 @@
 		public boolean tick(CardHolder holder, ReimuSpell card) {
 			step(holder);
 			super.tick(holder, card);
-			return tick > t0 + t1 || holder.target() == null;
+			return tick > 0 || holder.target() == null;
 		}
 
 		private void step(CardHolder holder) {
@@ -259,40 +266,56 @@
 					var vec = front.scale(acc * t0);
 					var e = holder.prepareDanmaku(t0, vec, bullet, DyeColor.LIGHT_GRAY);
 					e.mover = new RectMover(pos, vec, front.scale(-acc));
+					e.afterExpiry = new HomingTrail().setup(t1, acc * t1, 0, bullet, DyeColor.PURPLE)
+							.next(new HomingTrail().setup(t2 + r.nextInt(dt), termSpeed, termSpeed, bullet, color));
 					holder.shoot(e);
 				}
 			}
-			if (tick == t0) {
-				target1 = le;
-				DanmakuHelper.Orientation o0 = DanmakuHelper.getOrientation(init, normal);
-				double acc = r1 * 2d / t1 / t1;
-				for (int i = 0; i < n; i++) {
-					var f0 = o0.rotateDegrees(360.0 / n * i);
-					var p0 = pos.add(f0.scale(r0));
-					var f1 = target1.subtract(p0).normalize();
-					var vec = f1.scale(acc * t1);
-					var e = holder.prepareDanmaku(t1, vec, bullet, DyeColor.PURPLE);
-					e.setPos(p0);
-					e.mover = new RectMover(p0, vec, f1.scale(-acc));
-					holder.shoot(e);
-				}
-			}
-			if (tick == t0 + t1 && target1 != null) {
-				DanmakuHelper.Orientation o0 = DanmakuHelper.getOrientation(init, normal);
-				for (int i = 0; i < n; i++) {
-					var f0 = o0.rotateDegrees(360.0 / n * i);
-					var p0 = pos.add(f0.scale(r0));
-					var f1 = target1.subtract(p0).normalize();
-					var p1 = p0.add(f1.scale(r1));
-					var f2 = le.subtract(p1).normalize();
-					var vec = f2.scale(termSpeed);
-					int t = t2 + r.nextInt(dt);
-					var e = holder.prepareDanmaku(t, vec, bullet, color);
-					e.setPos(p1);
-					e.mover = new RectMover(p1, vec, Vec3.ZERO);
-					holder.shoot(e);
-				}
-			}
+		}
+
+	}
+
+	@SerialClass
+	public static class HomingTrail extends TrailAction {
+
+		@SerialClass.SerialField
+		private int life;
+		@SerialClass.SerialField
+		private double v0, v1;
+		@SerialClass.SerialField
+		private YHDanmaku.Bullet bullet;
+		@SerialClass.SerialField
+		private DyeColor color;
+		@SerialClass.SerialField
+		private TrailAction next;
+
+		public HomingTrail setup(int life, double v0, double v1, YHDanmaku.Bullet bullet, DyeColor color) {
+			this.life = life;
+			this.v0 = v0;
+			this.v1 = v1;
+			this.bullet = bullet;
+			this.color = color;
+			return this;
+		}
+
+		public HomingTrail next(TrailAction next) {
+			this.next = next;
+			return this;
+		}
+
+		@Override
+		public void execute(CardHolder holder, Vec3 pos, Vec3 dir) {
+			var le = holder.target();
+			if (le == null) return;
+			var f2 = le.subtract(pos).normalize();
+			var vec = f2.scale(v0);
+			var acc = f2.scale((v1 - v0) / life);
+			var e = holder.prepareDanmaku(life, vec, bullet, color);
+			e.setPos(pos);
+			e.mover = new RectMover(pos, vec, acc);
+			if (next != null)
+				e.afterExpiry = next;
+			holder.shoot(e);
 		}
 
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/RemiliaSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/RemiliaSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/RemiliaSpell.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/RemiliaSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,172 @@
+package dev.xkmc.youkaishomecoming.content.spell.game;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.entity.danmaku.DanmakuHelper;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.ActualSpellCard;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
+import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.level.ClipContext;
+import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.Vec3;
+
+@SerialClass
+public class RemiliaSpell extends ActualSpellCard {
+
+	@Override
+	public void tick(CardHolder holder) {
+		super.tick(holder);
+		var dir = holder.forward();
+		var target = holder.target();
+		if (target == null) return;
+		if (tick % 20 == 0) {
+			int step = tick / 20;
+			double dist = holder.center().distanceTo(target);
+			var rand = holder.random();
+			if (step % 5 < 3) {
+				double v = Math.max(1, dist / 20);
+
+				var nor = DanmakuHelper.getOrientation(dir).asNormal()
+						.rotateDegrees((rand.nextDouble() * 2 - 1) * 60);
+				addTicker(new Sweep().init(dir, nor,
+						(rand.nextDouble() * 2 - 1) * 90,
+						15, 15, v * 0.8, v * 1.2,
+						20, (int) (15 * v), (int) Math.max(60, dist * 2)
+				));
+			}
+			if (step % 5 == 3) {
+				var vel = holder.targetVelocity();
+				if (vel != null && vel.length() > 1) {
+					addTicker(new Lasers().init(20, 4, 3, 25, 40, 200));
+				}
+			}
+			if (step % 5 == 4 && dist >= 40) {
+				shootSpear(holder, target, dir);
+			}
+		}
+
+	}
+
+	private void shootSpear(CardHolder holder, Vec3 target, Vec3 dir) {
+		var rand = holder.random();
+		var self = holder.self();
+		var tar = holder.center().lerp(target, 0.5);
+		var hit = self.level().clip(new ClipContext(holder.center(), tar, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, self));
+		if (hit.getType() == HitResult.Type.MISS) {
+			self.moveTo(tar);
+		} else {
+			self.moveTo(holder.center().lerp(hit.getLocation(), 0.9));
+		}
+		double dist = holder.center().distanceTo(target);
+		int n = (int) Math.max(100, dist * 5);
+		var o = DanmakuHelper.getOrientation(dir).asNormal();
+		for (int i = 0; i < n; i++) {
+			double p = 1d * i / n;
+			double dr = rand.nextDouble() * p * (1 - p) * 4 * Math.max(1, dist / 20);
+			var pos = holder.center().lerp(target, p * 1.2)
+					.add(o.rotateDegrees(rand.nextDouble() * 360).scale(dr));
+			var e = holder.prepareDanmaku(30, dir.scale(3), YHDanmaku.Bullet.MENTOS, DyeColor.RED);
+			e.setPos(pos);
+			holder.shoot(e);
+		}
+	}
+
+	@SerialClass
+	public static class Sweep extends Ticker<RemiliaSpell> {
+
+		@SerialClass.SerialField
+		private Vec3 dir, nor;
+		@SerialClass.SerialField
+		private double initialAngle, horSpread, verSpread, lowSpeed, highSpeed;
+		@SerialClass.SerialField
+		private int duration, count, range;
+
+		public Sweep init(
+				Vec3 dir, Vec3 nor,
+				double initialAngle, double horSpread, double verSpread,
+				double lowSpeed, double highSpeed,
+				int duration, int count, int range
+		) {
+			this.dir = dir;
+			this.nor = nor;
+			this.initialAngle = initialAngle;
+			this.horSpread = horSpread;
+			this.verSpread = verSpread;
+			this.lowSpeed = lowSpeed;
+			this.highSpeed = highSpeed;
+			this.duration = duration;
+			this.count = count;
+			this.range = range;
+			return this;
+		}
+
+		@Override
+		public boolean tick(CardHolder holder, RemiliaSpell card) {
+			double a0 = initialAngle + 360d / duration * tick;
+			var rand = holder.random();
+			var o = DanmakuHelper.getOrientation(dir, nor);
+			for (int i = 0; i < count; i++) {
+				double a1 = a0 + horSpread * (rand.nextDouble() * 2 - 1);
+				double a2 = verSpread * rand.nextGaussian();
+				double v0 = lowSpeed + (highSpeed - lowSpeed) * rand.nextDouble();
+				int t = (int) Math.ceil(range / v0 * (1 + rand.nextDouble() * 0.1));
+				var d = o.rotateDegrees(a1, a2);
+				var e = holder.prepareDanmaku(t, d.scale(v0), YHDanmaku.Bullet.BUBBLE, DyeColor.RED);
+				holder.shoot(e);
+
+				double mid = 0.6 + 0.3 * rand.nextDouble();
+				e = holder.prepareDanmaku((int) (t / mid * 0.8), d.scale(v0 * mid), YHDanmaku.Bullet.MENTOS, DyeColor.RED);
+				holder.shoot(e);
+
+				double low = 0.3 + 0.3 * rand.nextDouble();
+				e = holder.prepareDanmaku((int) (t / low * 0.6), d.scale(v0 * low), YHDanmaku.Bullet.BALL, DyeColor.RED);
+				holder.shoot(e);
+			}
+			super.tick(holder, card);
+			return tick > duration;
+		}
+	}
+
+	@SerialClass
+	public static class Lasers extends Ticker<RemiliaSpell> {
+
+		@SerialClass.SerialField
+		public int duration, count, spread, minLen, maxLen, life;
+
+		public Lasers init(int duration, int count, int spread, int minLen, int maxLen, int life) {
+			this.duration = duration;
+			this.count = count;
+			this.spread = spread;
+			this.minLen = minLen;
+			this.maxLen = maxLen;
+			this.life = life;
+			return this;
+		}
+
+		@Override
+		public boolean tick(CardHolder holder, RemiliaSpell card) {
+			var rand = holder.random();
+			var cen = holder.center();
+			for (int i = 0; i < count; i++) {
+				Vec3 dir = new Vec3(rand.nextGaussian(), rand.nextGaussian(), rand.nextGaussian()).normalize();
+				int len = rand.nextInt(minLen, maxLen);
+				var l0 = holder.prepareLaser(life, cen, dir, len, YHDanmaku.Laser.LASER, DyeColor.LIGHT_BLUE);
+				l0.setupTime(10, 10, life, 10);
+				holder.shoot(l0);
+				var pos = cen.add(dir.scale(len));
+				var o = DanmakuHelper.getOrientation(dir).asNormal();
+				double angle = rand.nextDouble() * 360;
+				for (int j = 0; j < spread; j++) {
+					Vec3 dst = o.rotateDegrees(angle + j * 120, 45);
+					var l1 = holder.prepareLaser(life, pos, dst, 80, YHDanmaku.Laser.LASER, DyeColor.LIGHT_BLUE);
+					l0.setupTime(20, 10, life, 10);
+					holder.shoot(l1);
+				}
+			}
+			super.tick(holder, card);
+			return tick > duration;
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/SanaeSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/SanaeSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/SanaeSpell.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/SanaeSpell.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/SanaeSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -5,6 +5,7 @@
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.ActualSpellCard;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.TrailAction;
 import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.DyeColor;
@@ -101,12 +102,13 @@
 		}
 	}
 
+
+	private static final DyeColor[] COLORS = {DyeColor.LIGHT_BLUE, DyeColor.CYAN, DyeColor.LIME, DyeColor.YELLOW, DyeColor.LIGHT_GRAY};
+
 	//神德「五谷丰穰米之浴」
 	@SerialClass
 	public static class ExplosiveGrains extends Ticker<SanaeSpell> {
 
-		private static final DyeColor[] COLORS = {DyeColor.LIGHT_BLUE, DyeColor.CYAN, DyeColor.LIME, DyeColor.YELLOW, DyeColor.LIGHT_GRAY};
-
 		@SerialClass.SerialField
 		private Vec3 pos, dir, target;
 		@SerialClass.SerialField
@@ -115,7 +117,7 @@
 		public boolean tick(CardHolder holder, SanaeSpell card) {
 			step(holder);
 			super.tick(holder, card);
-			return tick >= 50;
+			return tick >= 10;
 		}
 
 		private void step(CardHolder holder) {
@@ -139,6 +141,7 @@
 						var d1 = o1.rotateDegrees(j * 72 + i * off, ver).scale(spf);
 						var e = holder.prepareDanmaku(dur, d1, YHDanmaku.Bullet.CIRCLE, DyeColor.RED);
 						e.setPos(p0);
+						e.afterExpiry = new ExplodeTrail().setup(3, j);
 						holder.shoot(e);
 					}
 					var d1 = d0.scale(speed);
@@ -147,25 +150,30 @@
 					holder.shoot(e);
 				}
 			}
-			if (tick - dur >= 0 && tick - dur < 10 && tick % 2 == 0) {
-				var r = holder.random();
-				var o0 = DanmakuHelper.getOrientation(dir).asNormal();
-				for (int i = 0; i < 5; i++) {
-					var p0 = pos.add(o0.rotateDegrees(i * 72).scale(dis));
-					var d0 = target.subtract(p0).normalize();
-					var o1 = DanmakuHelper.getOrientation(d0).asNormal();
-					for (int j = 0; j < 5; j++) {
-						var d1 = o1.rotateDegrees(j * 72 + i * off, ver);
-						var p1 = p0.add(d1.scale(spf * dur));
-						for (int k = 0; k < 3; k++) {
-							var d2 = new Vec3(r.nextGaussian(), r.nextGaussian(), r.nextGaussian()).normalize().scale(0.7);
-							int life = 60 + r.nextInt(40);
-							var e = holder.prepareDanmaku(life, d2, YHDanmaku.Bullet.BALL, COLORS[j]);
-							e.setPos(p1);
-							holder.shoot(e);
-						}
-					}
-				}
+		}
+	}
+
+	@SerialClass
+	public static class ExplodeTrail extends TrailAction {
+
+		@SerialClass.SerialField
+		private int count, index;
+
+		public ExplodeTrail setup(int count, int index) {
+			this.count = count;
+			this.index = index;
+			return this;
+		}
+
+		@Override
+		public void execute(CardHolder holder, Vec3 pos, Vec3 dir) {
+			var r = holder.random();
+			for (int k = 0; k < count; k++) {
+				var d2 = new Vec3(r.nextGaussian(), r.nextGaussian(), r.nextGaussian()).normalize().scale(0.7);
+				int life = 60 + r.nextInt(40);
+				var e = holder.prepareDanmaku(life, d2, YHDanmaku.Bullet.BALL, COLORS[index]);
+				e.setPos(pos);
+				holder.shoot(e);
 			}
 		}
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/TouhouSpellCards.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/TouhouSpellCards.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/TouhouSpellCards.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/TouhouSpellCards.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/TouhouSpellCards.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -42,6 +42,7 @@
 		registerSpell("touhou_little_maid:star_sapphire", StarSpell::new);
 		registerSpell("touhou_little_maid:doremy_sweet", DoremiSpell::new);
 		registerSpell("touhou_little_maid:kisin_sagume", KisinSpell::new);
+		registerSpell("touhou_little_maid:remilia_scarlet", RemiliaSpell::new);
 	}
 
 	public static void setSpell(GeneralYoukaiEntity e, String id) {
@@ -85,6 +86,10 @@
 		setSpell(e, "touhou_little_maid:komeiji_koishi");
 	}
 
+	public static void setRemilia(RemiliaEntity e) {
+		setSpell(e, "touhou_little_maid:remilia_scarlet");
+	}
+
 	public static void setMystia(MystiaEntity e) {
 		setSpell(e, "touhou_little_maid:mystia_lorelei");
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/YukariSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/YukariSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/YukariSpell.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/YukariSpell.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/game/YukariSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -113,7 +113,8 @@
 
 		for (int i = 0; i < 6; i++) {
 			var vec = ori.rotateDegrees(60 * i);
-			var e = holder.prepareDanmaku(40, pos, YHDanmaku.Bullet.BUBBLE, DyeColor.PURPLE);
+			var e = holder.prepareDanmaku(40, Vec3.ZERO, YHDanmaku.Bullet.BUBBLE, DyeColor.PURPLE);
+			e.setPos(pos);
 			e.mover = new RectMover(pos, vec.scale(2), Vec3.ZERO);
 			holder.shoot(e);
 		}
@@ -122,7 +123,8 @@
 			for (int k = -2; k <= 2; k++) {
 				var vec = ori.rotateDegrees(10 * i, k * 10);
 				for (int j = 0; j < 3; j++) {
-					var e = holder.prepareDanmaku(40, pos, YHDanmaku.Bullet.BUTTERFLY, DyeColor.PURPLE);
+					var e = holder.prepareDanmaku(40, Vec3.ZERO, YHDanmaku.Bullet.BUTTERFLY, DyeColor.PURPLE);
+					e.setPos(pos);
 					e.mover = new RectMover(pos, vec.scale(1.4 + j * 0.2), Vec3.ZERO);
 					holder.shoot(e);
 				}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/mover/AttachedMover.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/mover/AttachedMover.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/mover/AttachedMover.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/mover/AttachedMover.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/mover/AttachedMover.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -3,6 +3,7 @@
 import dev.xkmc.fastprojectileapi.entity.ProjectileMovement;
 import dev.xkmc.l2serial.serialization.SerialClass;
 import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.phys.Vec3;
 
 @SerialClass
@@ -13,6 +14,8 @@
 		var e = info.self();
 		if (e.asTraceable().getOwner() instanceof CardHolder holder) {
 			return holder.center();
+		} else if (e.asTraceable().getOwner() instanceof Player player) {
+			return player.position().add(0, player.getBbHeight() / 2, 0);
 		}
 		return info.prevPos();
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/KoishiItemSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/KoishiItemSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/KoishiItemSpell.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/KoishiItemSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,54 @@
+package dev.xkmc.youkaishomecoming.content.spell.player;
+
+import dev.xkmc.l2library.util.raytrace.RayTraceUtil;
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.entity.danmaku.DanmakuHelper;
+import dev.xkmc.youkaishomecoming.content.spell.item.ItemSpell;
+import dev.xkmc.youkaishomecoming.content.spell.mover.AttachedMover;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
+
+@SerialClass
+public class KoishiItemSpell extends ItemSpell {
+
+	@Override
+	public void start(Player player, @Nullable LivingEntity target) {
+		super.start(player, target);
+		addTicker(new Lasers());
+	}
+
+	@SerialClass
+	public static class Lasers extends Ticker<KoishiItemSpell> {
+
+		@Override
+		public boolean tick(CardHolder holder, KoishiItemSpell spell) {
+			var o0 = DanmakuHelper.getOrientation(new Vec3(0, 0, 1));
+			var e = holder.self();
+			var forward = RayTraceUtil.getRayTerm(Vec3.ZERO, e.getXRot(), e.getYRot(), 1);
+			int n = 8;
+			int step = 40;
+			int life = 40;
+			double angle = Math.PI * 2 / n / step;
+			double ver = Mth.atan2(forward.y(), forward.horizontalDistance());
+			Vec3 pos = holder.center();
+			for (int i = 0; i < n; i++) {
+				var laser = holder.prepareLaser(life, pos,
+						o0.rotate(angle * tick + Math.PI * 2 / n * i, ver), 40, YHDanmaku.Laser.LASER,
+						i % 2 == 0 ? DyeColor.RED : DyeColor.BLUE);
+				laser.setupTime(5, 10, step, 10);
+				laser.mover = new AttachedMover();
+				holder.shoot(laser);
+			}
+			super.tick(holder, spell);
+			return tick > step;
+		}
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/RemiliaItemSpell.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/RemiliaItemSpell.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/RemiliaItemSpell.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/player/RemiliaItemSpell.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,86 @@
+package dev.xkmc.youkaishomecoming.content.spell.player;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import dev.xkmc.youkaishomecoming.content.entity.danmaku.DanmakuHelper;
+import dev.xkmc.youkaishomecoming.content.spell.game.RemiliaSpell;
+import dev.xkmc.youkaishomecoming.content.spell.item.ItemSpell;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.CardHolder;
+import dev.xkmc.youkaishomecoming.content.spell.spellcard.Ticker;
+import dev.xkmc.youkaishomecoming.init.registrate.YHDanmaku;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
+
+@SerialClass
+public class RemiliaItemSpell extends ItemSpell {
+
+	@Override
+	public void start(Player player, @Nullable LivingEntity target) {
+		super.start(player, target);
+		var nor = DanmakuHelper.getOrientation(dir).normal();
+		addTicker(new Sweep().init(dir, nor, -90,
+				15, 8, 1.6, 2.4,
+				20, 15, 80
+		));
+	}
+
+	@SerialClass
+	public static class Sweep extends Ticker<RemiliaItemSpell> {
+
+		@SerialClass.SerialField
+		private Vec3 dir, nor;
+		@SerialClass.SerialField
+		private double initialAngle, horSpread, verSpread, lowSpeed, highSpeed;
+		@SerialClass.SerialField
+		private int duration, count, range;
+
+		public Sweep init(
+				Vec3 dir, Vec3 nor,
+				double initialAngle, double horSpread, double verSpread,
+				double lowSpeed, double highSpeed,
+				int duration, int count, int range
+		) {
+			this.dir = dir;
+			this.nor = nor;
+			this.initialAngle = initialAngle;
+			this.horSpread = horSpread;
+			this.verSpread = verSpread;
+			this.lowSpeed = lowSpeed;
+			this.highSpeed = highSpeed;
+			this.duration = duration;
+			this.count = count;
+			this.range = range;
+			return this;
+		}
+
+		@Override
+		public boolean tick(CardHolder holder, RemiliaItemSpell card) {
+			double a0 = initialAngle + 360d / duration * tick;
+			var rand = holder.random();
+			var o = DanmakuHelper.getOrientation(dir, nor);
+			for (int i = 0; i < count; i++) {
+				double a1 = a0 + horSpread * (rand.nextDouble() * 2 - 1);
+				double a2 = verSpread * rand.nextGaussian();
+				double v0 = lowSpeed + (highSpeed - lowSpeed) * rand.nextDouble();
+				int t = (int) Math.ceil(range / v0 * (1 + rand.nextDouble() * 0.1));
+				var d = o.rotateDegrees(a1, a2);
+				var e = holder.prepareDanmaku(t, d.scale(v0), YHDanmaku.Bullet.BUBBLE, DyeColor.RED);
+				holder.shoot(e);
+
+				double mid = 0.6 + 0.3 * rand.nextDouble();
+				e = holder.prepareDanmaku((int) (t / mid * 0.8), d.scale(v0 * mid), YHDanmaku.Bullet.MENTOS, DyeColor.RED);
+				holder.shoot(e);
+
+				double low = 0.3 + 0.3 * rand.nextDouble();
+				e = holder.prepareDanmaku((int) (t / low * 0.6), d.scale(v0 * low), YHDanmaku.Bullet.BALL, DyeColor.RED);
+				holder.shoot(e);
+			}
+			super.tick(holder, card);
+			return tick > duration;
+		}
+	}
+
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/content/spell/spellcard/TrailAction.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/content/spell/spellcard/TrailAction.java b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/spellcard/TrailAction.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/content/spell/spellcard/TrailAction.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,13 @@
+package dev.xkmc.youkaishomecoming.content.spell.spellcard;
+
+import dev.xkmc.l2serial.serialization.SerialClass;
+import net.minecraft.world.phys.Vec3;
+
+@SerialClass
+public class TrailAction {
+
+	public void execute(CardHolder holder, Vec3 pos, Vec3 dir) {
+
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/init/data/YHAdvGen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHAdvGen.java b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHAdvGen.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHAdvGen.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHAdvGen.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -93,9 +93,9 @@
 										BlockPredicate.Builder.block().of(Blocks.FARMLAND).build()),
 								ItemPredicate.Builder.item().of(YHCrops.TEA.getSeed()))),
 						"Refreshing Hobby", "Plant Tea")
-				.create("tea_master", YHFood.OOLONG_TEA.item.asStack(),
+				.create("tea_master", YHDrink.OOLONG_TEA.item.asStack(),
 						Util.make(CriterionBuilder.and(), c -> Stream.of(
-										YHFood.WHITE_TEA, YHFood.OOLONG_TEA, YHFood.GREEN_TEA, YHFood.BLACK_TEA
+										YHDrink.WHITE_TEA, YHDrink.OOLONG_TEA, YHDrink.GREEN_TEA, YHDrink.BLACK_TEA
 								).map(e -> e.item.get()).map(e -> Pair.of(e, ConsumeItemTrigger.TriggerInstance.usedItem(e)))
 								.forEach(p -> c.add(ForgeRegistries.ITEMS.getKey(p.getFirst().asItem()).toString(), p.getSecond()))),
 						"Tea Master", "Drink all kinds of tea in original flavor")
@@ -114,7 +114,7 @@
 				CriterionBuilder.one(EffectsChangedTrigger.TriggerInstance.hasEffects(
 						MobEffectsPredicate.effects().and(YHEffects.DRUNK.get()))),
 				"Alcoholic", "Brew and drink an alcoholic drink and obtain Drunk effect");
-		root.create("passed_out", YHSake.DAIGINJO.item.asStack(),
+		root.create("passed_out", YHDrink.DAIGINJO.item.asStack(),
 				CriterionBuilder.one(EffectsChangedTrigger.TriggerInstance.hasEffects(
 						MobEffectsPredicate.effects().and(YHEffects.DRUNK.get(),
 								new MobEffectsPredicate.MobEffectInstancePredicate(
@@ -129,7 +129,7 @@
 				.create("enthusiastic", YHDish.IMITATION_BEAR_PAW.block.asStack(),
 						Util.make(CriterionBuilder.and(), c -> Streams.concat(
 										Arrays.stream(YHDish.values()).map(e -> e.block.get()),
-										Arrays.stream(YHSake.values()).map(e -> e.item.get()),
+										Arrays.stream(YHDrink.values()).map(e -> e.item.get()),
 										Arrays.stream(YHCoffee.values()).map(e -> e.item.get()),
 										Arrays.stream(YHFood.values()).map(e -> e.item.get()))
 								.map(e -> Pair.of(e, ConsumeItemTrigger.TriggerInstance.usedItem(e)))
@@ -192,7 +192,7 @@
 		danmaku.create("feed_reimu", YHItems.REIMU_HAIRBAND.get(),
 						Util.make(CriterionBuilder.and(), c -> Streams.concat(
 										Arrays.stream(YHDish.values()).filter(e -> !e.isFlesh()).map(e -> e.block.get()),
-										Arrays.stream(YHSake.values()).filter(e -> !e.isFlesh()).map(e -> e.item.get()),
+										Arrays.stream(YHDrink.values()).filter(e -> !e.isFlesh()).map(e -> e.item.get()),
 										Arrays.stream(YHCoffee.values()).map(e -> e.item.get()),
 										Arrays.stream(YHFood.values()).filter(YHFood::isReimuFood).map(e -> e.item.get()))
 								.map(e -> Pair.of(e, FeedReimuTrigger.usedItem(e)))
Index: src/main/java/dev/xkmc/youkaishomecoming/init/data/YHLangData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHLangData.java b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHLangData.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHLangData.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHLangData.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -42,6 +42,7 @@
 	JEI_KETTLE("jei.kettle", "Tea Brewing", 0, null),
 	JEI_RACK("jei.rack", "Drying", 0, null),
 	JEI_FERMENT("jei.ferment", "Fermenting", 0, null),
+	JEI_STEAM("jei.steam", "Steaming", 0, null),
 
 	OBTAIN("obtain", "Source: ", 0, ChatFormatting.GRAY),
 	UNKNOWN("unknown", "???", 0, ChatFormatting.GRAY),
Index: src/main/java/dev/xkmc/youkaishomecoming/init/data/YHRecipeGen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHRecipeGen.java b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHRecipeGen.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHRecipeGen.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/data/YHRecipeGen.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -56,8 +56,11 @@
 			food(pvd, YHFood.TOFU, YHFood.OILY_BEAN_CURD);
 			pvd.stonecutting(DataIngredient.items(Items.CLAY_BALL), RecipeCategory.MISC, YHItems.CLAY_SAUCER);
 			pvd.stonecutting(DataIngredient.items(Items.BAMBOO_BLOCK), RecipeCategory.MISC, YHBlocks.RACK);
+			pvd.stonecutting(DataIngredient.items(Items.BAMBOO_BLOCK), RecipeCategory.MISC, YHBlocks.STEAMER_RACK);
+			pvd.stonecutting(DataIngredient.tag(ItemTags.PLANKS), RecipeCategory.MISC, YHBlocks.STEAMER_LID);
 			pvd.smelting(DataIngredient.items(YHItems.CLAY_SAUCER.get()), RecipeCategory.MISC, YHItems.SAUCER, 0.1f, 200);
 			pvd.stonecutting(DataIngredient.items(Items.IRON_INGOT), RecipeCategory.MISC, YHItems.CAN);
+			pvd.stonecutting(DataIngredient.items(Items.GLASS), RecipeCategory.MISC, YHItems.SAKE_BOTTLE);
 			pvd.smelting(DataIngredient.items(YHItems.CAN.get()), RecipeCategory.MISC, Items.IRON_INGOT::asItem, 0.1f, 200);
 			for (var e : YHBlocks.WoodType.values()) {
 				pvd.stonecutting(DataIngredient.items(e.plank), RecipeCategory.MISC, e.fence);
@@ -85,6 +88,13 @@
 					.define('A', ModItems.CANVAS.get())
 					.define('S', Items.STRING)
 					.save(pvd);
+
+			unlock(pvd, ShapedRecipeBuilder.shaped(RecipeCategory.MISC, YHBlocks.STEAMER_POT)::unlockedBy, Items.IRON_INGOT)
+					.pattern("B B").pattern("I I").pattern("CIC")
+					.define('B', Items.BAMBOO)
+					.define('C', Items.CLAY_BALL)
+					.define('I', Items.IRON_INGOT)
+					.save(pvd);
 		}
 
 		// furniture
@@ -411,20 +421,6 @@
 					.addIngredient(YHItems.CREAM.get())
 					.build(pvd, YHFood.KOISHI_MOUSSE.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.BUN.item.get(), 3, 200, 0.1f)
-					.addIngredient(ForgeTags.DOUGH)
-					.addIngredient(ModTags.CABBAGE_ROLL_INGREDIENTS)
-					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
-					.addIngredient(ForgeTags.VEGETABLES_ONION)
-					.addIngredient(YHCrops.SOYBEAN.getSeed())
-					.build(pvd, YHFood.BUN.item.getId());
-
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.OYAKI.item.get(), 1, 200, 0.1f)
-					.addIngredient(ForgeTags.DOUGH)
-					.addIngredient(ForgeTags.VEGETABLES)
-					.addIngredient(Items.BROWN_MUSHROOM)
-					.build(pvd, YHFood.OYAKI.item.getId());
-
 			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.PORK_RICE_BALL.item.get(), 1, 200, 0.1f)
 					.addIngredient(ForgeTags.GRAIN_RICE)
 					.addIngredient(ForgeTags.RAW_PORK)
@@ -646,17 +642,9 @@
 					.addIngredient(ForgeTags.RAW_FISHES)
 					.addIngredient(ForgeTags.RAW_FISHES)
 					.addIngredient(ForgeTags.RAW_FISHES)
+					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
 					.build(pvd, YHDish.DRIED_FISH.block.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.IMITATION_BEAR_PAW.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
-					.addIngredient(Items.PUFFERFISH)
-					.addIngredient(Items.BAMBOO)
-					.addIngredient(ForgeTags.RAW_PORK)
-					.addIngredient(ForgeTags.VEGETABLES_ONION)
-					.addIngredient(YHTagGen.RAW_EEL)
-					.addIngredient(YHItems.SOY_SAUCE_BOTTLE.item)
-					.build(pvd, YHDish.IMITATION_BEAR_PAW.block.getId());
-
 			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.PASTITSIO.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
 					.addIngredient(ForgeTags.PASTA)
 					.addIngredient(YHFood.BUTTER.item)
@@ -677,18 +665,21 @@
 					.addIngredient(YHFood.TOFU.item)
 					.addIngredient(YHFood.TOFU.item)
 					.addIngredient(Items.BROWN_MUSHROOM)
+					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
 					.build(pvd, YHDish.STINKY_TOFU.block.getId());
 
 			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.TOFU_BURGER.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
 					.addIngredient(YHFood.TOFU.item)
 					.addIngredient(YHFood.BUTTER.item)
 					.addIngredient(Items.SWEET_BERRIES)
+					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
 					.build(pvd, YHDish.TOFU_BURGER.block.getId());
 
 			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.BLOOD_CURD.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
 					.addIngredient(YHItems.BLOOD_BOTTLE.item)
 					.addIngredient(YHItems.BLOOD_BOTTLE.item)
 					.addIngredient(ForgeTags.VEGETABLES)
+					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
 					.build(pvd, YHDish.BLOOD_CURD.block.getId());
 
 			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.SEVEN_COLORED_YOKAN.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
@@ -700,6 +691,60 @@
 					.addIngredient(YHCrops.UDUMBARA.getFruits())
 					.build(pvd, YHDish.SEVEN_COLORED_YOKAN.block.getId());
 
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHDish.IMITATION_BEAR_PAW.raw.get())::unlockedBy, YHItems.SAUCER.asItem())
+					.requires(Items.PUFFERFISH)
+					.requires(Items.BAMBOO)
+					.requires(ForgeTags.RAW_PORK)
+					.requires(ForgeTags.VEGETABLES_ONION)
+					.requires(YHTagGen.RAW_EEL)
+					.requires(YHItems.SOY_SAUCE_BOTTLE.item)
+					.requires(YHItems.SAUCER.get())
+					.save(pvd, YHDish.IMITATION_BEAR_PAW.raw.getId());
+
+			steaming(pvd, DataIngredient.items(YHDish.IMITATION_BEAR_PAW.raw.asItem()), YHDish.IMITATION_BEAR_PAW.block::asItem);
+
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHDish.COLD_TOFU.block.get())::unlockedBy, YHItems.SAUCER.asItem())
+					.requires(YHFood.TOFU.item)
+					.requires(YHFood.TOFU.item)
+					.requires(YHItems.SOY_SAUCE_BOTTLE.item)
+					.requires(YHCrops.SOYBEAN.getSeed())
+					.requires(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
+					.requires(YHItems.ICE_CUBE)
+					.requires(YHItems.SAUCER.get())
+					.save(pvd, YHDish.COLD_TOFU.block.getId());
+
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHDish.SCHOLAR_GINKGO.raw.get())::unlockedBy, YHItems.SAUCER.asItem())
+					.requires(Items.BIRCH_SAPLING)
+					.requires(Items.HONEY_BOTTLE)
+					.requires(YHCrops.SOYBEAN.getSeed())
+					.requires(YHItems.SAUCER.get())
+					.save(pvd, YHDish.SCHOLAR_GINKGO.raw.getId());
+
+			steaming(pvd, DataIngredient.items(YHDish.SCHOLAR_GINKGO.raw.asItem()), YHDish.SCHOLAR_GINKGO.block::asItem);
+
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.CUMBERLAND_LOIN.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
+					.addIngredient(ForgeTags.RAW_PORK)
+					.addIngredient(ForgeTags.RAW_PORK)
+					.addIngredient(ModItems.TOMATO_SAUCE.get())
+					.addIngredient(YHItems.SOY_SAUCE_BOTTLE.item)
+					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
+					.build(pvd, YHDish.CUMBERLAND_LOIN.block.getId());
+
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDish.TOMATO_SAUCE_COD.block.get(), 1, 200, 0.1f, YHItems.SAUCER.get())
+					.addIngredient(ForgeTags.RAW_FISHES_COD)
+					.addIngredient(ForgeTags.RAW_FISHES_COD)
+					.addIngredient(ModItems.TOMATO_SAUCE.get())
+					.addIngredient(YHItems.SOY_SAUCE_BOTTLE.item)
+					.build(pvd, YHDish.TOMATO_SAUCE_COD.block.getId());
+
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHDish.BLOODY_FLESH.block.get())::unlockedBy, YHItems.SAUCER.asItem())
+					.requires(YHTagGen.RAW_FLESH)
+					.requires(YHTagGen.RAW_FLESH)
+					.requires(YHItems.SOY_SAUCE_BOTTLE.item)
+					.requires(YHItems.SAUCER.get())
+					.requires(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
+					.save(pvd, YHDish.BLOODY_FLESH.block.getId());
+
 		}
 
 		var tea = tea(pvd);
@@ -708,85 +753,85 @@
 		// drinks
 		{
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.BLACK_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.BLACK_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.BLACK.leaves)
 					.addIngredient(YHTagGen.TEA_BLACK)
 					.addIngredient(YHTagGen.TEA_BLACK)
-					.build(tea, YHFood.BLACK_TEA.item.getId());
+					.build(tea, YHDrink.BLACK_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.GREEN_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.GREEN_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.GREEN.leaves)
 					.addIngredient(YHTagGen.TEA_GREEN)
 					.addIngredient(YHTagGen.TEA_GREEN)
-					.build(tea, YHFood.GREEN_TEA.item.getId());
+					.build(tea, YHDrink.GREEN_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.OOLONG_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.OOLONG_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.OOLONG.leaves)
 					.addIngredient(YHTagGen.TEA_OOLONG)
 					.addIngredient(YHTagGen.TEA_OOLONG)
-					.build(tea, YHFood.OOLONG_TEA.item.getId());
+					.build(tea, YHDrink.OOLONG_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.WHITE_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.WHITE_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.WHITE.leaves)
 					.addIngredient(YHTagGen.TEA_WHITE)
 					.addIngredient(YHTagGen.TEA_WHITE)
-					.build(tea, YHFood.WHITE_TEA.item.getId());
+					.build(tea, YHDrink.WHITE_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.CORNFLOWER_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.CORNFLOWER_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(Items.CORNFLOWER)
 					.addIngredient(Items.CORNFLOWER)
 					.addIngredient(Items.CORNFLOWER)
-					.build(tea, YHFood.CORNFLOWER_TEA.item.getId());
+					.build(tea, YHDrink.CORNFLOWER_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.TEA_MOCHA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.TEA_MOCHA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.BLACK.leaves)
 					.addIngredient(YHTagGen.TEA_BLACK)
 					.addIngredient(Items.COCOA_BEANS)
 					.addIngredient(ForgeTags.MILK_BOTTLE)
-					.build(tea, YHFood.TEA_MOCHA.item.getId());
+					.build(tea, YHDrink.TEA_MOCHA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.SAIDI_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.SAIDI_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.BLACK.leaves)
 					.addIngredient(YHTagGen.TEA_BLACK)
 					.addIngredient(Items.SUGAR)
 					.addIngredient(Items.SUGAR)
-					.build(tea, YHFood.SAIDI_TEA.item.getId());
+					.build(tea, YHDrink.SAIDI_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.SAKURA_HONEY_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.SAKURA_HONEY_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(Items.CHERRY_LEAVES)
 					.addIngredient(Items.CHERRY_LEAVES)
 					.addIngredient(Items.HONEY_BOTTLE)
-					.build(tea, YHFood.SAKURA_HONEY_TEA.item.getId());
+					.build(tea, YHDrink.SAKURA_HONEY_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.GENMAI_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.GENMAI_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHTea.GREEN.leaves)
 					.addIngredient(YHTagGen.TEA_GREEN)
 					.addIngredient(YHTagGen.TEA_GREEN)
 					.addIngredient(ForgeTags.GRAIN_RICE)
-					.build(tea, YHFood.GENMAI_TEA.item.getId());
+					.build(tea, YHDrink.GENMAI_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.SCARLET_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.SCARLET_TEA.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(YHItems.BLOOD_BOTTLE.item)
 					.addIngredient(YHTagGen.TEA_BLACK)
 					.addIngredient(YHItems.BLOOD_BOTTLE.item)
-					.build(tea, YHFood.SCARLET_TEA.item.getId());
+					.build(tea, YHDrink.SCARLET_TEA.item.getId());
 
-			CookingPotRecipeBuilder.cookingPotRecipe(YHFood.GREEN_WATER.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
+			CookingPotRecipeBuilder.cookingPotRecipe(YHDrink.GREEN_WATER.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
 					.unlockedByAnyIngredient(Items.GLASS_BOTTLE)
 					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
 					.addIngredient(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
-					.build(tea, YHFood.GREEN_WATER.item.getId());
+					.build(tea, YHDrink.GREEN_WATER.item.getId());
 
 			CookingPotRecipeBuilder.cookingPotRecipe(YHCoffee.ESPRESSO.item.get(), 1, 200, 0.1f, Items.GLASS_BOTTLE)
 					.setRecipeBookTab(CookingPotRecipeBookTab.DRINKS)
@@ -827,53 +872,103 @@
 					.addInput(YHCrops.SOYBEAN.getSeed()).addInput(YHCrops.SOYBEAN.getSeed())
 					.save(pvd, YHItems.SOY_SAUCE_BOTTLE.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.MIO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.MIO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
-					.save(pvd, YHSake.MIO.item.getId());
+					.save(pvd, YHDrink.MIO.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.MEAD.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.MEAD.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.HONEY_BOTTLE)
-					.save(pvd, YHSake.MEAD.item.getId());
+					.save(pvd, YHDrink.MEAD.item.getId());
+
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.KIKU.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
+					.addInput(Items.BROWN_MUSHROOM)
+					.save(pvd, YHDrink.KIKU.item.getId());
+
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.HAKUTSURU.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
+					.addInput(Items.BROWN_MUSHROOM).addInput(ForgeTags.EGGS)
+					.save(pvd, YHDrink.HAKUTSURU.item.getId());
+
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.KAPPA_VILLAGE.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
+					.addInput(Items.BROWN_MUSHROOM).addInput(Items.SEAGRASS)
+					.save(pvd, YHDrink.KAPPA_VILLAGE.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.DAIGINJO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.SUIGEI.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
+					.addInput(Items.SEA_PICKLE).addInput(Items.KELP).addInput(Items.PUFFERFISH)
+					.save(pvd, YHDrink.SUIGEI.item.getId());
+
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.DAIGINJO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.NETHER_WART).addInput(Items.BLAZE_POWDER)
-					.save(pvd, YHSake.DAIGINJO.item.getId());
+					.save(pvd, YHDrink.DAIGINJO.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.DASSAI.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.DASSAI.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.NETHER_WART).addInput(Items.NAUTILUS_SHELL)
-					.save(pvd, YHSake.DASSAI.item.getId());
+					.save(pvd, YHDrink.DASSAI.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.TENGU_TANGO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.TENGU_TANGO.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.NETHER_WART).addInput(Items.PHANTOM_MEMBRANE)
-					.save(pvd, YHSake.TENGU_TANGO.item.getId());
+					.save(pvd, YHDrink.TENGU_TANGO.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.SPARROW_SAKE.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.SPARROW_SAKE.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.FEATHER).addInput(Items.RABBIT_FOOT)
-					.save(pvd, YHSake.SPARROW_SAKE.item.getId());
+					.save(pvd, YHDrink.SPARROW_SAKE.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.FULL_MOONS_EVE.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.FULL_MOONS_EVE.fluid.getSource(), 2400)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(Items.NETHER_WART).addInput(YHCrops.UDUMBARA.getFruits())
-					.save(pvd, YHSake.FULL_MOONS_EVE.item.getId());
+					.save(pvd, YHDrink.FULL_MOONS_EVE.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(YHItems.BLOOD_BOTTLE.fluid.getSource(), YHSake.SCARLET_MIST.fluid.getSource(), 3600)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(YHItems.BLOOD_BOTTLE.fluid.getSource(), YHDrink.SCARLET_MIST.fluid.getSource(), 3600)::unlockedBy, ModItems.RICE.get())
 					.addInput(Items.ROSE_BUSH).addInput(Items.ROSE_BUSH)
 					.addInput(Items.POPPY)
 					.addInput(YHDanmaku.Bullet.CIRCLE.get(DyeColor.RED))
 					.addInput(YHDanmaku.Bullet.CIRCLE.get(DyeColor.RED))
-					.save(pvd, YHSake.SCARLET_MIST.item.getId());
+					.save(pvd, YHDrink.SCARLET_MIST.item.getId());
 
-			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHSake.WIND_PRIESTESSES.fluid.getSource(), 3600)::unlockedBy, ModItems.RICE.get())
+			unlock(pvd, new SimpleFermentationBuilder(Fluids.WATER, YHDrink.WIND_PRIESTESSES.fluid.getSource(), 3600)::unlockedBy, ModItems.RICE.get())
 					.addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE).addInput(ForgeTags.GRAIN_RICE)
 					.addInput(YHDanmaku.Bullet.CIRCLE.get(DyeColor.LIME))
 					.addInput(Items.DANDELION).addInput(YHTagGen.TEA_GREEN).addInput(YHItems.MATCHA)
-					.save(pvd, YHSake.WIND_PRIESTESSES.item.getId());
+					.save(pvd, YHDrink.WIND_PRIESTESSES.item.getId());
+
+		}
+
+		// steam
+		{
+			steaming(pvd, DataIngredient.items(Items.POTATO), () -> Items.BAKED_POTATO);
+			steaming(pvd, DataIngredient.items(ModItems.CHICKEN_CUTS.get()), ModItems.COOKED_CHICKEN_CUTS);
+			steaming(pvd, DataIngredient.items(ModItems.SALMON_SLICE.get()), ModItems.COOKED_SALMON_SLICE);
+			steaming(pvd, DataIngredient.items(ModItems.COD_SLICE.get()), ModItems.COOKED_COD_SLICE);
+
+
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHFood.BUN.raw.get(), 4)::unlockedBy, Items.WHEAT)
+					.requires(ForgeTags.DOUGH)
+					.requires(ForgeTags.DOUGH)
+					.requires(ModTags.CABBAGE_ROLL_INGREDIENTS)
+					.requires(ForgeTags.SALAD_INGREDIENTS_CABBAGE)
+					.requires(ForgeTags.VEGETABLES_ONION)
+					.requires(YHCrops.SOYBEAN.getSeed())
+					.save(pvd);
 
+			steaming(pvd, DataIngredient.items(YHFood.BUN.raw.get()), YHFood.BUN.item);
+			steaming(pvd, DataIngredient.tag(ForgeTags.DOUGH_WHEAT), YHFood.MANTOU.item);
+
+			unlock(pvd, ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, YHFood.OYAKI.raw.get(), 4)::unlockedBy, Items.WHEAT)
+					.requires(ForgeTags.DOUGH)
+					.requires(ForgeTags.DOUGH)
+					.requires(ForgeTags.VEGETABLES)
+					.requires(Items.BROWN_MUSHROOM)
+					.save(pvd);
+
+			steaming(pvd, DataIngredient.items(YHFood.OYAKI.raw.get()), YHFood.OYAKI.item);
 		}
 
 		// danmaku
@@ -1009,6 +1104,10 @@
 		cooking(pvd, in, RecipeCategory.MISC, out, 0, 200, "drying", YHBlocks.RACK_RS.get());
 	}
 
+	private static void steaming(RegistrateRecipeProvider pvd, DataIngredient in, Supplier<Item> out) {
+		cooking(pvd, in, RecipeCategory.MISC, out, 0, 200, "steaming", YHBlocks.STEAM_RS.get());
+	}
+
 	public static <T extends ItemLike> void cooking(RegistrateRecipeProvider pvd, DataIngredient source, RecipeCategory category, Supplier<? extends T> result, float experience, int cookingTime, String typeName, RecipeSerializer<? extends AbstractCookingRecipe> serializer) {
 		new SimpleCookingRecipeBuilder(category, CookingBookCategory.MISC, result.get(), source, experience, cookingTime, serializer)
 				.unlockedBy("has_" + pvd.safeName(source), source.getCritereon(pvd))
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/FoodType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/FoodType.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/FoodType.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/FoodType.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/FoodType.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -16,34 +16,37 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.function.Function;
+import java.util.function.UnaryOperator;
 
 public enum FoodType {
-	SIMPLE(YHFoodItem::new, false, false, false),
-	FAST(YHFoodItem::new, false, true, false),
-	MEAT(YHFoodItem::new, true, false, false),
-	MEAT_SLICE(YHFoodItem::new, true, true, false),
-	STICK(p -> new YHFoodItem(p.craftRemainder(Items.STICK).stacksTo(16)), false, true, false),
-	BOWL(p -> new YHFoodItem(p.craftRemainder(Items.BOWL).stacksTo(16)), false, false, false),
-	SAKE(p -> new YHDrinkItem(p.craftRemainder(Items.BOWL).stacksTo(16)), false, false, true),
-	BOTTLE(p -> new YHDrinkItem(p.craftRemainder(Items.GLASS_BOTTLE).stacksTo(16)), false, false, true),
-	BAMBOO(p -> new YHDrinkItem(p.craftRemainder(Items.BAMBOO).stacksTo(16)), false, false, true),
-	BOTTLE_FAST(p -> new YHDrinkItem(p.craftRemainder(Items.GLASS_BOTTLE).stacksTo(16)), false, true, true),
-	BOWL_MEAT(p -> new YHFoodItem(p.craftRemainder(Items.BOWL).stacksTo(16)), true, false, false),
-	FLESH(FleshFoodItem::new, true, false, false, YHTagGen.FLESH_FOOD),
-	FLESH_FAST(FleshFoodItem::new, true, true, false, YHTagGen.FLESH_FOOD),
-	BOWL_FLESH(p -> new FleshFoodItem(p.craftRemainder(Items.BOWL).stacksTo(16)), true, false, false, YHTagGen.FLESH_FOOD),
-	CAN_FLESH(p -> new FleshFoodItem(p.craftRemainder(YHItems.CAN.get()).stacksTo(64)), true, true, false, YHTagGen.FLESH_FOOD),
+	SIMPLE(YHFoodItem::new, UnaryOperator.identity(), false, false, false),
+	FAST(YHFoodItem::new, UnaryOperator.identity(), false, true, false),
+	MEAT(YHFoodItem::new, UnaryOperator.identity(), true, false, false),
+	MEAT_SLICE(YHFoodItem::new, UnaryOperator.identity(), true, true, false),
+	STICK(YHFoodItem::new, p -> p.craftRemainder(Items.STICK).stacksTo(16), false, true, false),
+	BOWL(YHFoodItem::new, p -> p.craftRemainder(Items.BOWL).stacksTo(16), false, false, false),
+	SAKE(YHDrinkItem::new, p -> p.craftRemainder(Items.BOWL).stacksTo(16), false, false, true),
+	BOTTLE(YHDrinkItem::new, p -> p.craftRemainder(Items.GLASS_BOTTLE).stacksTo(16), false, false, true),
+	BAMBOO(YHDrinkItem::new, p -> p.craftRemainder(Items.BAMBOO).stacksTo(16), false, false, true),
+	BOTTLE_FAST(YHDrinkItem::new, p -> p.craftRemainder(Items.GLASS_BOTTLE).stacksTo(16), false, true, true),
+	BOWL_MEAT(YHFoodItem::new, p -> p.craftRemainder(Items.BOWL).stacksTo(16), true, false, false),
+	FLESH(FleshFoodItem::new, UnaryOperator.identity(), true, false, false, YHTagGen.FLESH_FOOD),
+	FLESH_FAST(FleshFoodItem::new, UnaryOperator.identity(), true, true, false, YHTagGen.FLESH_FOOD),
+	BOWL_FLESH(FleshFoodItem::new, p -> p.craftRemainder(Items.BOWL).stacksTo(16), true, false, false, YHTagGen.FLESH_FOOD),
+	CAN_FLESH(FleshFoodItem::new, p -> p.craftRemainder(YHItems.CAN.get()).stacksTo(64), true, true, false, YHTagGen.FLESH_FOOD),
 	;
 
 	private final Function<Item.Properties, Item> factory;
+	private final UnaryOperator<Item.Properties> prop;
 	private final boolean meat, fast, alwaysEat;
 
 	private final TagKey<Item>[] tags;
 	private final EffectEntry[] effs;
 
 	@SafeVarargs
-	FoodType(Function<Item.Properties, Item> factory, boolean meat, boolean fast, boolean alwaysEat, EffectEntry[] effs, TagKey<Item>... tags) {
+	FoodType(Function<Item.Properties, Item> factory, UnaryOperator<Item.Properties> prop, boolean meat, boolean fast, boolean alwaysEat, EffectEntry[] effs, TagKey<Item>... tags) {
 		this.factory = factory;
+		this.prop = prop;
 		this.meat = meat;
 		this.fast = fast;
 		this.alwaysEat = alwaysEat;
@@ -52,11 +55,15 @@
 	}
 
 	@SafeVarargs
-	FoodType(Function<Item.Properties, Item> factory, boolean meat, boolean fast, boolean alwaysEat, TagKey<Item>... tags) {
-		this(factory, meat, fast, alwaysEat, new EffectEntry[0], tags);
+	FoodType(Function<Item.Properties, Item> factory, UnaryOperator<Item.Properties> prop, boolean meat, boolean fast, boolean alwaysEat, TagKey<Item>... tags) {
+		this(factory, prop, meat, fast, alwaysEat, new EffectEntry[0], tags);
 	}
 
 	public ItemEntry<Item> build(String folder, String name, int nutrition, float sat, TagKey<Item>[] tags, List<EffectEntry> effs) {
+		return build(factory, folder, name, nutrition, sat, tags, effs);
+	}
+
+	public ItemEntry<Item> build(Function<Item.Properties, Item> factory, String folder, String name, int nutrition, float sat, TagKey<Item>[] tags, List<EffectEntry> effs) {
 		var food = new FoodProperties.Builder()
 				.nutrition(nutrition).saturationMod(sat);
 		if (meat) food.meat();
@@ -69,7 +76,7 @@
 			food.effect(e::getEffect, e.chance());
 		}
 		return YoukaisHomecoming.REGISTRATE
-				.item(name, p -> factory.apply(p.food(food.build())))
+				.item(name, p -> factory.apply(prop.apply(p).food(food.build())))
 				.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/" + folder + ctx.getName())))
 				.tag(getTags(this.tags, tags))
 				.lang(Item::getDescriptionId, makeLang(name))
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/Saucer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/Saucer.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/Saucer.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/Saucer.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/Saucer.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -8,18 +8,21 @@
 import java.util.Locale;
 
 public enum Saucer implements StringRepresentable {
-	SAUCER_1(true, "plate", "sake"),
-	SAUCER_2(true, "plate", "sake"),
-	SAUCER_3(true, "plate", "sake", "bowl"),
-	SAUCER_4(false, "large");
+	SAUCER_1(2, 2, 6, "saucer_plate", "saucer_sake"),
+	SAUCER_2(2, 2, 3, "saucer_plate", "saucer_sake"),
+	SAUCER_3(2, 2, 3, "saucer_plate", "saucer_sake", "saucer_bowl"),
+	SAUCER_4(2, 2, 1, "saucer_large"),
+	CERAMIC(4, 3, 1, "ceramic"),
+	PORCELAIN(1, 1, 1, "porcelain_plate_top", "porcelain_plate_bottom"),
+	;
 
-	public final boolean extra;
-	public final String base;
 	public final String[] tex;
+	public final int x, z, height;
 
-	Saucer(boolean extra, String base, String... tex) {
-		this.extra = extra;
-		this.base = base;
+	Saucer(int x, int z, int height, String... tex) {
+		this.x = x;
+		this.z = z;
+		this.height = height;
 		this.tex = tex;
 	}
 
@@ -29,12 +32,13 @@
 
 	public BlockModelBuilder build(RegistrateBlockstateProvider pvd) {
 		var builder = pvd.models().getBuilder("block/" + getName())
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/" + getName())));
-		builder.texture(base, "block/saucer_" + base);
-		builder.texture("particle", "block/saucer_" + base);
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/dish/" + getName())));
 		for (var e : tex) {
-			builder.texture(e, "block/saucer_" + e);
+			String key = e;
+			if (e.startsWith("saucer_")) key = e.substring(7);
+			builder.texture(key, "block/dish/" + e);
 		}
+		builder.texture("particle", "block/dish/" + tex[0]);
 		builder.renderType("cutout");
 		return builder;
 	}
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/YHCrops.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHCrops.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHCrops.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHCrops.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHCrops.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -35,7 +35,7 @@
 
 public enum YHCrops {
 	SOYBEAN(PlantType.CROSS, 8, null, "pods"),
-	REDBEAN(PlantType.CROP, 8, null, null),
+	REDBEAN(PlantType.CROSS, 8, null, null),
 	COFFEA(PlantType.COFFEA, 6, "green_coffee_bean", "coffee_berries"),
 	TEA(PlantType.TEA, 6, "tea_seeds", "tea_leaves"),
 	UDUMBARA(PlantType.UDUMBARA, 6, "udumbara_seeds", "udumbara_flower"),
@@ -122,13 +122,13 @@
 				.block(id + "_bag", p -> new Block(BlockBehaviour.Properties.copy(Blocks.BROWN_WOOL)))
 				.blockstate((ctx, pvd) -> pvd.simpleBlock(ctx.get(), pvd.models().cube(
 						ctx.getName(),
-						pvd.modLoc("block/" + ctx.getName() + "_bottom"),
-						pvd.modLoc("block/" + ctx.getName() + "_top"),
-						pvd.modLoc("block/" + ctx.getName() + "_side"),
-						pvd.modLoc("block/" + ctx.getName() + "_side"),
-						pvd.modLoc("block/" + ctx.getName() + "_side_tied"),
-						pvd.modLoc("block/" + ctx.getName() + "_side_tied")
-				).texture("particle", pvd.modLoc("block/" + ctx.getName() + "_top"))))
+						pvd.modLoc("block/bags/" + ctx.getName() + "_bottom"),
+						pvd.modLoc("block/bags/" + ctx.getName() + "_top"),
+						pvd.modLoc("block/bags/" + ctx.getName() + "_side"),
+						pvd.modLoc("block/bags/" + ctx.getName() + "_side"),
+						pvd.modLoc("block/bags/" + ctx.getName() + "_side_tied"),
+						pvd.modLoc("block/bags/" + ctx.getName() + "_side_tied")
+				).texture("particle", pvd.modLoc("block/bags/" + ctx.getName() + "_top"))))
 				.simpleItem().register();
 	}
 
@@ -145,7 +145,7 @@
 				(name, crop) -> YoukaisHomecoming.REGISTRATE.block("wild_" + name, p -> new BushBlock(BlockBehaviour.Properties.copy(Blocks.DANDELION)))
 						.blockstate((ctx, pvd) -> YHCropBlock.buildWildModel(ctx, pvd, crop))
 						.loot((ctx, pvd) -> YHCropBlock.buildWildLoot(ctx, pvd, crop))
-						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name))).build()
+						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()
 		),
@@ -157,7 +157,7 @@
 				(name, crop) -> YoukaisHomecoming.REGISTRATE.block("wild_" + name, p -> new BushBlock(BlockBehaviour.Properties.copy(Blocks.DANDELION)))
 						.blockstate((ctx, pvd) -> YHCropBlock.buildWildModel(ctx, pvd, crop))
 						.loot((ctx, pvd) -> YHCropBlock.buildWildLoot(ctx, pvd, crop))
-						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name))).build()
+						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()
 		),
@@ -169,7 +169,7 @@
 				(name, crop) -> YoukaisHomecoming.REGISTRATE.block("wild_" + name, p -> new WildCoffeaBlock(BlockBehaviour.Properties.copy(Blocks.DANDELION)))
 						.blockstate((ctx, pvd) -> WildCoffeaBlock.buildWildModel(ctx, pvd, crop))
 						.loot((ctx, pvd) -> WildCoffeaBlock.buildWildLoot(ctx, pvd, crop))
-						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name + "_top"))).build()
+						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name + "_top"))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()
 		),
@@ -183,7 +183,7 @@
 				(name, crop) -> YoukaisHomecoming.REGISTRATE.block("wild_" + name, p -> new BushBlock(BlockBehaviour.Properties.copy(Blocks.DANDELION)))
 						.blockstate((ctx, pvd) -> YHCropBlock.buildWildModel(ctx, pvd, crop))
 						.loot((ctx, pvd) -> TeaCropBlock.buildWildLoot(ctx, pvd, crop))
-						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name))).build()
+						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()
 		),
@@ -197,7 +197,7 @@
 						.blockstate((ctx, pvd) -> YHCropBlock.buildWildModel(ctx, pvd, crop))
 						.loot((pvd, b) -> UdumbaraBlock.buildWildLoot(pvd, b, crop))
 						.item().tag(ModTags.WILD_CROPS_ITEM)
-						.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name))).build()
+						.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()),
 
@@ -209,7 +209,7 @@
 				(name, crop) -> YoukaisHomecoming.REGISTRATE.block("wild_" + name, p -> new BushBlock(BlockBehaviour.Properties.copy(Blocks.DANDELION)))
 						.blockstate((ctx, pvd) -> YHCropBlock.buildWildModel(ctx, pvd, crop))
 						.loot((ctx, pvd) -> MandrakeGen.buildWildLoot(ctx, pvd, crop))
-						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/wild_" + name))).build()
+						.item().tag(ModTags.WILD_CROPS_ITEM).model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("block/plants/wild_" + name))).build()
 						.tag(ModTags.WILD_CROPS)
 						.register()
 		),
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDish.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDish.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDish.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDish.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDish.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -2,58 +2,112 @@
 
 import com.tterrag.registrate.providers.RegistrateBlockstateProvider;
 import com.tterrag.registrate.util.entry.BlockEntry;
+import dev.xkmc.youkaishomecoming.compat.diet.DietTagGen;
 import dev.xkmc.youkaishomecoming.content.block.food.FoodSaucerBlock;
+import dev.xkmc.youkaishomecoming.content.item.food.FleshSaucerItem;
 import dev.xkmc.youkaishomecoming.content.item.food.FoodSaucerItem;
 import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
+import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
 import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
 import dev.xkmc.youkaishomecoming.init.registrate.YHItems;
+import net.minecraft.tags.TagKey;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraftforge.client.model.generators.BlockModelBuilder;
 import net.minecraftforge.client.model.generators.ModelFile;
 import vectorwing.farmersdelight.common.registry.ModEffects;
 
+import java.util.List;
 import java.util.Locale;
 
 public enum YHDish {
-	BAMBOO_MIZUYOKAN(Saucer.SAUCER_1, 6, 0.6f, false, 6,
+	BAMBOO_MIZUYOKAN(Saucer.CERAMIC, Type.COOKED, 6, 0.6f, false, 4, List.of(
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
-	DRIED_FISH(Saucer.SAUCER_2, 8, 0.8f, true, 3,
+			DietTagGen.VEGETABLES.tag, DietTagGen.SUGARS.tag),
+	DRIED_FISH(Saucer.CERAMIC, Type.COOKED, 8, 0.8f, true, 4, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1)),
-	IMITATION_BEAR_PAW(Saucer.SAUCER_4, 12, 0.8f, true, 3,
+			DietTagGen.PROTEINS.tag),
+	IMITATION_BEAR_PAW(Saucer.CERAMIC, Type.STEAMED, 12, 0.8f, true, 3, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1),
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1),
 			new EffectEntry(() -> MobEffects.DAMAGE_BOOST, 3600, 1, 1),
 			new EffectEntry(() -> MobEffects.DAMAGE_RESISTANCE, 3600, 0, 1)),
-	PASTITSIO(Saucer.SAUCER_2, 12, 0.8f, true, 3,
+			DietTagGen.VEGETABLES.tag, DietTagGen.PROTEINS.tag),
+	PASTITSIO(Saucer.CERAMIC, Type.COOKED, 12, 0.8f, true, 4, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1),
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
-	SAUCE_GRILLED_FISH(Saucer.SAUCER_4, 12, 0.8f, true, 3,
+			DietTagGen.VEGETABLES.tag, DietTagGen.GRAINS.tag, DietTagGen.PROTEINS.tag),
+	SAUCE_GRILLED_FISH(Saucer.PORCELAIN, Type.COOKED, 12, 0.8f, true, 4, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1),
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
-	STINKY_TOFU(Saucer.SAUCER_1, 8, 0.6f, false, 6,
+			DietTagGen.VEGETABLES.tag, DietTagGen.PROTEINS.tag),
+	STINKY_TOFU(Saucer.CERAMIC, Type.COOKED, 8, 0.6f, false, 5, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1)),
-	TOFU_BURGER(Saucer.SAUCER_2, 8, 0.6f, false, 3,
+			DietTagGen.PROTEINS.tag),
+	TOFU_BURGER(Saucer.CERAMIC, Type.COOKED, 8, 0.6f, false, 3, List.of(
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
-	BLOOD_CURD(Saucer.SAUCER_3, 8, 0.8f, true, 4,
+			DietTagGen.PROTEINS.tag),
+	BLOOD_CURD(Saucer.CERAMIC, Type.COOKED, 8, 0.8f, true, 2, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1),
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
-	SEVEN_COLORED_YOKAN(Saucer.SAUCER_1, 8, 0.8f, false, 6,
+			DietTagGen.PROTEINS.tag),
+	SEVEN_COLORED_YOKAN(Saucer.CERAMIC, Type.COOKED, 8, 0.8f, false, 4, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1),
 			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1),
 			new EffectEntry(YHEffects.UDUMBARA::get, 3600, 1, 1)),
+			DietTagGen.VEGETABLES.tag, DietTagGen.GRAINS.tag),
+
+	BLOODY_FLESH(Saucer.CERAMIC, Type.FLESH, 6, 0.8f, true, 3, List.of(),
+			YHTagGen.FLESH_FOOD, YHTagGen.APPARENT_FLESH_FOOD, DietTagGen.PROTEINS.tag),
+	COLD_TOFU(Saucer.CERAMIC, Type.COOKED, 8, 0.8f, false, 4, List.of(
+			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
+			DietTagGen.PROTEINS.tag),
+	CUMBERLAND_LOIN(Saucer.CERAMIC, Type.COOKED, 10, 0.8f, true, 2, List.of(
+			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1)),
+			DietTagGen.PROTEINS.tag),
+	SCHOLAR_GINKGO(Saucer.CERAMIC, Type.STEAMED, 6, 0.8f, false, 2, List.of(
+			new EffectEntry(ModEffects.COMFORT, 3600, 0, 1)),
+			DietTagGen.VEGETABLES.tag),
+	TOMATO_SAUCE_COD(Saucer.CERAMIC, Type.COOKED, 10, 0.8f, true, 2, List.of(
+			new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1)),
+			DietTagGen.PROTEINS.tag),
+
 	;
 
-	public final Saucer base;
+	public final Saucer saucer;
+	public final Type base;
 	public final int height;
 
-	public final BlockEntry<FoodSaucerBlock> block;
+	public final BlockEntry<FoodSaucerBlock> raw, block;
 
-	YHDish(Saucer base, int nutrition, float sat, boolean meat, int height, EffectEntry... effs) {
-		this.base = base;
+	YHDish(Saucer saucer, Type type, int nutrition, float sat, boolean meat, int height, List<EffectEntry> effs, TagKey<Item>... tags) {
+		this.saucer = saucer;
+		this.base = type;
 		this.height = height;
+		if (type == Type.STEAMED) {
+			raw = YoukaisHomecoming.REGISTRATE
+					.block("raw_" + getName(), p -> new FoodSaucerBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL), this))
+					.blockstate((ctx, pvd) -> pvd.horizontalBlock(ctx.get(), build(pvd, false)))
+					.item((block, p) -> new FoodSaucerItem(block, p.food(food(nutrition / 2, sat / 2, meat, List.of()))
+							.craftRemainder(YHItems.SAUCER.asItem())))
+					.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/saucer/" + ctx.getName())))
+					.tag(tags).build()
+					.register();
+		} else raw = null;
+		block = YoukaisHomecoming.REGISTRATE
+				.block(getName(), p -> new FoodSaucerBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL), this))
+				.blockstate((ctx, pvd) -> pvd.horizontalBlock(ctx.get(), build(pvd, true)))
+				.item((block, p) -> type.create(block, p.food(food(nutrition, sat, meat, effs))
+						.craftRemainder(YHItems.SAUCER.asItem())))
+				.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/saucer/" + ctx.getName())))
+				.tag(tags).build()
+				.register();
+	}
+
+	private static FoodProperties food(int nutrition, float sat, boolean meat, List<EffectEntry> effs) {
 		var builder = new FoodProperties.Builder()
 				.nutrition(nutrition).saturationMod(sat);
 		for (var e : effs) {
@@ -61,40 +115,43 @@
 		}
 		if (meat)
 			builder.meat();
-		var food = builder.build();
-		block = YoukaisHomecoming.REGISTRATE
-				.block(getName(), p -> new FoodSaucerBlock(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_WOOL), this))
-				.blockstate((ctx, pvd) -> pvd.horizontalBlock(ctx.get(), build(pvd)))
-				.item((block, p) -> new FoodSaucerItem(block, p.food(food).craftRemainder(YHItems.SAUCER.asItem())))
-				.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/saucer/" + ctx.getName()))).build()
-				.register();
+		return builder.build();
 	}
 
 	private String getName() {
 		return name().toLowerCase(Locale.ROOT);
 	}
 
-	private BlockModelBuilder build(RegistrateBlockstateProvider pvd) {
+	private BlockModelBuilder build(RegistrateBlockstateProvider pvd, boolean extra) {
 		String name = getName();
 		var builder = pvd.models().getBuilder("block/" + name)
-				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/saucer_" + name)));
-		builder.texture("base", "block/" + name);
-		builder.texture("particle", "block/" + name);
-		if (base.extra) {
-			builder.texture("extra", "block/" + name + "_extra");
+				.parent(new ModelFile.UncheckedModelFile(pvd.modLoc("custom/dish/" + name)));
+		for (var e : saucer.tex) {
+			builder.texture(e, "block/dish/" + e);
 		}
-		for (var e : base.tex) {
-			builder.texture(e, "block/saucer_" + e);
+		builder.texture("particle", "block/dish/" + saucer.tex[0]);
+		builder.texture("base", "block/dish/" + name + "_base");
+		if (extra) {
+			builder.texture("detail", "block/dish/" + name + "_detail");
 		}
 		builder.renderType("cutout");
 		return builder;
 	}
 
 	public boolean isFlesh() {
-		return this == BLOOD_CURD;
+		return this == BLOOD_CURD || this == BLOODY_FLESH;
 	}
 
 	public static void register() {
 	}
 
+	public enum Type {
+		COOKED, STEAMED, FLESH;
+
+		public Item create(FoodSaucerBlock block, Item.Properties properties) {
+			if (this == FLESH) return new FleshSaucerItem(block, properties);
+			else return new FoodSaucerItem(block, properties);
+		}
+	}
+
 }
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDrink.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDrink.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDrink.java
new file mode 100644
--- /dev/null	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHDrink.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -0,0 +1,165 @@
+package dev.xkmc.youkaishomecoming.init.food;
+
+import com.tterrag.registrate.util.entry.FluidEntry;
+import com.tterrag.registrate.util.entry.ItemEntry;
+import dev.xkmc.youkaishomecoming.content.item.fluid.*;
+import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
+import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraftforge.registries.ForgeRegistries;
+import vectorwing.farmersdelight.common.registry.ModEffects;
+
+import java.util.List;
+import java.util.Locale;
+
+public enum YHDrink implements IYHFluidHolder {
+	GREEN_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 1, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1)
+	)),
+	WHITE_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.REFRESHING::get, 1200, 0, 1)
+	)),
+	BLACK_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.THICK::get, 600, 0, 1)
+	)),
+	OOLONG_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SMOOTHING::get, 600, 0, 1)
+	)),
+	CORNFLOWER_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(() -> MobEffects.REGENERATION, 200, 0, 1)
+	)),
+	TEA_MOCHA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(ModEffects.COMFORT, 1200, 0, 1)
+	)),
+	SAIDI_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 0, 1)
+	)),
+	SAKURA_HONEY_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 400, 0, 1),
+			new EffectEntry(() -> MobEffects.REGENERATION, 400, 0, 1)
+	)),
+	GENMAI_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 1, 1),
+			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
+			new EffectEntry(ModEffects.COMFORT, 1200, 0, 1)
+	)),
+	SCARLET_TEA(FoodType.BOTTLE, 0xffffffff, List.of(
+			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.THICK::get, 600, 0, 1),
+			new EffectEntry(YHEffects.YOUKAIFYING::get, 1200, 0, 1)
+	), YHTagGen.FLESH_FOOD),
+	GREEN_WATER(FoodType.BOTTLE, 0xffffffff, List.of(new EffectEntry(YHEffects.TEA::get, 600, 0, 0.1f))),
+
+	MIO(FoodType.BOTTLE, 0xff7890e5, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1))),
+	MEAD(FoodType.BOTTLE, 0xfffbe8a6, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 0, 1))),
+	SPARROW_SAKE(FoodType.BAMBOO, 0xfffffacd, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(() -> MobEffects.LUCK, 1200, 0, 1))),
+	KIKU(FoodType.SAKE, 0xffd5d6b8, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1))),
+	HAKUTSURU(FoodType.SAKE, 0xfff1ddbd, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1))),
+	KAPPA_VILLAGE(FoodType.SAKE, 0xffd5d6b8, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(() -> MobEffects.WATER_BREATHING, 1200, 0, 0.5f))),
+	SUIGEI(FoodType.SAKE, 0xffe3f9fb, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(() -> MobEffects.WATER_BREATHING, 1200, 0, 1))),
+	DAIGINJO(FoodType.SAKE, 0xffebc78b, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
+			new EffectEntry(() -> MobEffects.DAMAGE_BOOST, 1200, 2, 1))),
+	DASSAI(FoodType.SAKE, 0xffa86f64, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
+			new EffectEntry(() -> MobEffects.DIG_SPEED, 1200, 2, 1))),
+	TENGU_TANGO(FoodType.SAKE, 0xffad6843, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
+			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 2, 1))),
+	FULL_MOONS_EVE(FoodType.SAKE, 0xfff3fafb, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.UDUMBARA::get, 1200, 1, 1))),
+	SCARLET_MIST(FoodType.BOTTLE, 0xFFEA6B88, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
+			new EffectEntry(YHEffects.YOUKAIFIED::get, 1200, 0, 1)
+	), YHTagGen.FLESH_FOOD),
+	WIND_PRIESTESSES(FoodType.BOTTLE, 0xFF79E1CA, List.of(
+			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
+			new EffectEntry(YHEffects.NATIVE::get, 600, 0, 1)
+	)),
+	;
+
+	public final int color;
+
+	public final FluidEntry<YHFluid> fluid;
+	public final ItemEntry<Item> item;
+
+	@SafeVarargs
+	YHDrink(FoodType type, int color, List<EffectEntry> effs, TagKey<Item>... tags) {
+		this.color = color;
+		String name = name().toLowerCase(Locale.ROOT);
+		fluid = BottledFluid.water(name,
+						(p, s, f) -> new YHFluidType(p, s, f, this),
+						p -> new YHFluid(p, this))
+				.defaultLang().register();
+		boolean sake = !name.contains("tea") && !name.contains("water");
+		item = type.build(p -> new SakeBottleItem(fluid, p), sake ? "food/sake/" : "food/drink/",
+				name, 0, 0, tags, effs);
+	}
+
+	@Override
+	public int getColor() {
+		return color;
+	}
+
+	@Override
+	public ItemEntry<?> item() {
+		return item;
+	}
+
+	@Override
+	public FluidEntry<? extends YHFluid> fluid() {
+		return fluid;
+	}
+
+	@SuppressWarnings("deprecation")
+	public Item getContainer() {
+		Item ans = item.get().getCraftingRemainingItem();
+		if (ans == Items.BAMBOO) {
+			ans = ForgeRegistries.ITEMS.getValue(new ResourceLocation("bamboo"));
+		}
+		if (ans == null) return Items.AIR;
+		return ans;
+	}
+
+	@Override
+	public ItemStack asStack(int count) {
+		return item.asStack(count);
+	}
+
+	public boolean isFlesh() {
+		return this == SCARLET_MIST || this == SCARLET_TEA;
+	}
+
+	public static void register() {
+
+	}
+
+}
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/YHFood.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHFood.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHFood.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHFood.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHFood.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -2,12 +2,14 @@
 
 import com.tterrag.registrate.util.entry.ItemEntry;
 import dev.xkmc.youkaishomecoming.compat.diet.DietTagGen;
+import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
 import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
 import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.item.Item;
+import org.jetbrains.annotations.Nullable;
 import vectorwing.farmersdelight.common.registry.ModEffects;
 import vectorwing.farmersdelight.common.tag.ModTags;
 
@@ -63,8 +65,9 @@
 	KOISHI_MOUSSE(FoodType.SIMPLE, 6, 0.6f,
 			new EffectEntry(YHEffects.UNCONSCIOUS::get, 400, 0, 1),
 			DietTagGen.SUGARS.tag),
-	BUN(FoodType.SIMPLE, 8, 0.8f, DietTagGen.GRAINS.tag),
-	OYAKI(FoodType.SIMPLE, 6, 0.6f, DietTagGen.GRAINS.tag),
+	MANTOU(FoodType.SIMPLE, 6, 0.6f, DietTagGen.GRAINS.tag),
+	BUN(FoodType.SIMPLE, 8, 0.8f, "raw_bun", DietTagGen.GRAINS.tag),
+	OYAKI(FoodType.SIMPLE, 6, 0.6f, "raw_oyaki", DietTagGen.GRAINS.tag),
 	PORK_RICE_BALL(FoodType.MEAT, 8, 0.6f, DietTagGen.GRAINS.tag, DietTagGen.PROTEINS.tag),
 	TOBIKO_GUNKAN(FoodType.MEAT, 6, 0.8f, List.of(
 			new EffectEntry(ModEffects.NOURISHMENT, 2400, 0, 1),
@@ -96,53 +99,6 @@
 
 	// bottle
 	SHAVED_ICE_OVER_RICE(FoodType.BOTTLE, 10, 0.8f, new EffectEntry(ModEffects.NOURISHMENT, 2400, 0, 1), DietTagGen.GRAINS.tag),
-	GREEN_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 1, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1)
-	)),
-	WHITE_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.REFRESHING::get, 1200, 0, 1)
-	)),
-	BLACK_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.THICK::get, 600, 0, 1)
-	)),
-	OOLONG_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SMOOTHING::get, 600, 0, 1)
-	)),
-	CORNFLOWER_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(() -> MobEffects.REGENERATION, 200, 0, 1)
-	)),
-	TEA_MOCHA(FoodType.BOTTLE, 4, 0.6f, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(ModEffects.COMFORT, 1200, 0, 1)
-	)),
-	SAIDI_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 0, 1)
-	)),
-	SAKURA_HONEY_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 400, 0, 1),
-			new EffectEntry(() -> MobEffects.REGENERATION, 400, 0, 1)
-	)),
-	GENMAI_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 1, 1),
-			new EffectEntry(YHEffects.SOBER::get, 1200, 0, 1),
-			new EffectEntry(ModEffects.COMFORT, 1200, 0, 1)
-	)),
-	SCARLET_TEA(FoodType.BOTTLE, 0, 0, List.of(
-			new EffectEntry(YHEffects.TEA::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.THICK::get, 600, 0, 1),
-			new EffectEntry(YHEffects.YOUKAIFYING::get, 1200, 0, 1)
-	), YHTagGen.FLESH_FOOD),
-	GREEN_WATER(FoodType.BOTTLE, 0, 0, List.of(new EffectEntry(YHEffects.TEA::get, 600, 0, 0.1f))),
 
 	// bowl
 	APAKI(FoodType.BOWL_MEAT, 12, 0.8f, new EffectEntry(ModEffects.NOURISHMENT, 3600, 0, 1), DietTagGen.PROTEINS.tag),
@@ -229,12 +185,12 @@
 	;
 
 
-	public final ItemEntry<Item> item;
+	public final ItemEntry<Item> raw, item;
 
 	private final FoodType type;
 
 	@SafeVarargs
-	YHFood(FoodType type, int nutrition, float sat, List<EffectEntry> effs, TagKey<Item>... tags) {
+	YHFood(FoodType type, int nutrition, float sat, @Nullable String raw, List<EffectEntry> effs, TagKey<Item>... tags) {
 		this.type = type;
 		String name = name().toLowerCase(Locale.ROOT);
 		String id = "food/simple/";
@@ -244,12 +200,19 @@
 		if (ordinal() <= 16) id = "food/mochi/";
 		if (ordinal() <= 10) id = "food/basic/";
 		if (type.isFlesh()) id = "food/flesh/";
+		if (raw == null) this.raw = null;
+		else {
+			String rid = "item/" + id + raw;
+			this.raw = YoukaisHomecoming.REGISTRATE.item(raw, Item::new)
+					.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc(rid)))
+					.register();
+		}
 		item = type.build(id, name, nutrition, sat, tags, effs);
 	}
 
 	@SafeVarargs
-	YHFood(FoodType type, int nutrition, float sat, TagKey<Item>... tags) {
-		this(type, nutrition, sat, List.of(), tags);
+	YHFood(FoodType type, int nutrition, float sat, List<EffectEntry> effs, TagKey<Item>... tags) {
+		this(type, nutrition, sat, null, effs, tags);
 	}
 
 	@SafeVarargs
@@ -257,12 +220,24 @@
 		this(type, nutrition, sat, List.of(eff), tags);
 	}
 
+	@SafeVarargs
+	YHFood(FoodType type, int nutrition, float sat, String raw, TagKey<Item>... tags) {
+		this(type, nutrition, sat, raw, List.of(), tags);
+
+	}
+
+	@SafeVarargs
+	YHFood(FoodType type, int nutrition, float sat, TagKey<Item>... tags) {
+		this(type, nutrition, sat, List.of(), tags);
+	}
+
+
 	private boolean isFlesh() {
-		return type.isFlesh() || this == SCARLET_TEA;
+		return type.isFlesh();
 	}
 
 	private boolean isUnappealing() {
-		return this == RAW_LAMPREY || this == RAW_LAMPREY_FILLET;
+		return this == RAW_LAMPREY || this == RAW_LAMPREY_FILLET || this == POOR_GOD_SOUP || this == BUTTER;
 	}
 
 	public boolean isReimuFood() {
Index: src/main/java/dev/xkmc/youkaishomecoming/init/food/YHSake.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHSake.java b/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHSake.java
deleted file mode 100644
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/food/YHSake.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ /dev/null	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
@@ -1,105 +0,0 @@
-package dev.xkmc.youkaishomecoming.init.food;
-
-import com.tterrag.registrate.util.entry.FluidEntry;
-import com.tterrag.registrate.util.entry.ItemEntry;
-import dev.xkmc.youkaishomecoming.content.item.fluid.BottledFluid;
-import dev.xkmc.youkaishomecoming.content.item.fluid.IYHSake;
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluid;
-import dev.xkmc.youkaishomecoming.content.item.fluid.SakeFluidType;
-import dev.xkmc.youkaishomecoming.init.data.YHTagGen;
-import dev.xkmc.youkaishomecoming.init.registrate.YHEffects;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.TagKey;
-import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
-import net.minecraftforge.registries.ForgeRegistries;
-
-import java.util.List;
-import java.util.Locale;
-
-public enum YHSake implements IYHSake {
-	MIO(FoodType.BOTTLE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1))),
-	MEAD(FoodType.BOTTLE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
-			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 0, 1))),
-	SPARROW_SAKE(FoodType.BAMBOO, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
-			new EffectEntry(() -> MobEffects.LUCK, 1200, 0, 1))),
-	DAIGINJO(FoodType.SAKE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
-			new EffectEntry(() -> MobEffects.DAMAGE_BOOST, 1200, 2, 1))),
-	DASSAI(FoodType.SAKE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
-			new EffectEntry(() -> MobEffects.DIG_SPEED, 1200, 2, 1))),
-	TENGU_TANGO(FoodType.SAKE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
-			new EffectEntry(() -> MobEffects.MOVEMENT_SPEED, 1200, 2, 1))),
-	FULL_MOONS_EVE(FoodType.SAKE, 0xffffffff, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.UDUMBARA::get, 1200, 1, 1))),
-	SCARLET_MIST(FoodType.BOTTLE, 0xFFEA6B88, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 1, 1),
-			new EffectEntry(YHEffects.YOUKAIFIED::get, 1200, 0, 1)
-	), YHTagGen.FLESH_FOOD),
-	WIND_PRIESTESSES(FoodType.BOTTLE, 0xFF79E1CA, List.of(
-			new EffectEntry(YHEffects.DRUNK::get, 1200, 0, 1),
-			new EffectEntry(YHEffects.NATIVE::get, 600, 0, 1)
-	)),
-	;
-
-	public final int color;
-
-	public final FluidEntry<SakeFluid> fluid;
-	public final ItemEntry<Item> item;
-
-	@SafeVarargs
-	YHSake(FoodType type, int color, List<EffectEntry> effs, TagKey<Item>... tags) {
-		this.color = color;
-		String name = name().toLowerCase(Locale.ROOT);
-		fluid = BottledFluid.water(name, (p, s, f) -> new SakeFluidType(p, s, f, this), p -> new SakeFluid(p, this))
-				.defaultLang().register();
-		item = type.build("sake/", name, 0, 0, tags, effs);
-	}
-
-	@Override
-	public int getColor() {
-		return color;
-	}
-
-	@Override
-	public ItemEntry<?> item() {
-		return item;
-	}
-
-	@Override
-	public FluidEntry<? extends SakeFluid> fluid() {
-		return fluid;
-	}
-
-	@SuppressWarnings("deprecation")
-	public Item getContainer() {
-		Item ans = item.get().getCraftingRemainingItem();
-		if (ans == Items.BAMBOO) {
-			ans = ForgeRegistries.ITEMS.getValue(new ResourceLocation("bamboo"));
-		}
-		if (ans == null) return Items.AIR;
-		return ans;
-	}
-
-	@Override
-	public ItemStack asStack(int count) {
-		return item.asStack(count);
-	}
-
-	public boolean isFlesh() {
-		return this == SCARLET_MIST;
-	}
-
-	public static void register() {
-
-	}
-
-}
Index: src/main/java/dev/xkmc/youkaishomecoming/init/loot/EntityLootGen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/loot/EntityLootGen.java b/src/main/java/dev/xkmc/youkaishomecoming/init/loot/EntityLootGen.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/loot/EntityLootGen.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/loot/EntityLootGen.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -2,10 +2,7 @@
 
 import com.tterrag.registrate.providers.loot.RegistrateEntityLootTables;
 import dev.xkmc.l2library.util.data.LootTableTemplate;
-import dev.xkmc.youkaishomecoming.content.entity.boss.MarisaEntity;
-import dev.xkmc.youkaishomecoming.content.entity.boss.MystiaEntity;
-import dev.xkmc.youkaishomecoming.content.entity.boss.SanaeEntity;
-import dev.xkmc.youkaishomecoming.content.entity.boss.YukariEntity;
+import dev.xkmc.youkaishomecoming.content.entity.boss.*;
 import dev.xkmc.youkaishomecoming.content.entity.fairy.CirnoEntity;
 import dev.xkmc.youkaishomecoming.content.entity.lampery.LampreyEntity;
 import dev.xkmc.youkaishomecoming.content.entity.reimu.ReimuEntity;
@@ -87,6 +84,21 @@
 						.when(LootTableTemplate.byPlayer()).when(danmakuKill()))
 		);
 	}
+
+
+	public static void koishi(RegistrateEntityLootTables pvd, EntityType<KoishiEntity> type) {
+		pvd.add(type, LootTable.lootTable()
+				.withPool(LootPool.lootPool().add(LootTableTemplate.getItem(YHItems.KOISHI_SPELL.get(), 1, 1))
+						.when(LootTableTemplate.byPlayer()).when(danmakuKill()))
+		);
+	}
+
+	public static void remilia(RegistrateEntityLootTables pvd, EntityType<RemiliaEntity> type) {
+		pvd.add(type, LootTable.lootTable()
+				.withPool(LootPool.lootPool().add(LootTableTemplate.getItem(YHItems.MYSTIA_SPELL.get(), 1, 1))
+						.when(LootTableTemplate.byPlayer()).when(danmakuKill()))
+		);
+	}
 
 	public static void yukari(RegistrateEntityLootTables pvd, EntityType<YukariEntity> type) {
 		pvd.add(type, LootTable.lootTable()
Index: src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHBlocks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHBlocks.java b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHBlocks.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHBlocks.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHBlocks.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -29,8 +29,11 @@
 import dev.xkmc.youkaishomecoming.content.pot.rack.DryingRackBlockEntity;
 import dev.xkmc.youkaishomecoming.content.pot.rack.DryingRackRecipe;
 import dev.xkmc.youkaishomecoming.content.pot.rack.DryingRackRenderer;
+import dev.xkmc.youkaishomecoming.content.pot.steamer.*;
+import dev.xkmc.youkaishomecoming.content.pot.tank.*;
 import dev.xkmc.youkaishomecoming.init.YoukaisHomecoming;
 import dev.xkmc.youkaishomecoming.init.data.YHRecipeGen;
+import net.minecraft.advancements.critereon.StatePropertiesPredicate;
 import net.minecraft.data.recipes.RecipeCategory;
 import net.minecraft.data.recipes.ShapedRecipeBuilder;
 import net.minecraft.resources.ResourceLocation;
@@ -45,10 +48,15 @@
 import net.minecraft.world.level.block.*;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.properties.BlockSetType;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
 import net.minecraft.world.level.material.MapColor;
 import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.storage.loot.LootPool;
 import net.minecraft.world.level.storage.loot.LootTable;
+import net.minecraft.world.level.storage.loot.entries.LootItem;
+import net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition;
 import net.minecraftforge.client.model.generators.ModelFile;
 import net.minecraftforge.registries.ForgeRegistries;
 import vectorwing.farmersdelight.FarmersDelight;
@@ -111,6 +119,18 @@
 	public static final RegistryEntry<RecipeType<FermentationRecipe<?>>> FERMENT_RT;
 	public static final RegistryEntry<BaseRecipe.RecType<SimpleFermentationRecipe, FermentationRecipe<?>, FermentationDummyContainer>> FERMENT_RS;
 
+	public static final BlockEntry<DelegateBlock> STEAMER_POT;
+	public static final BlockEntry<DelegateBlock> STEAMER_RACK;
+	public static final BlockEntry<DelegateBlock> STEAMER_LID;
+	public static final BlockEntityEntry<SteamerBlockEntity> STEAMER_BE;
+	public static final RegistryEntry<RecipeType<SteamingRecipe>> STEAM_RT;
+	public static final RegistryEntry<RecipeSerializer<SteamingRecipe>> STEAM_RS;
+
+	public static final BlockEntry<CopperTankBlock> COPPER_TANK;
+	public static final BlockEntityEntry<CopperTankBlockEntity> TANK_BE;
+	public static final BlockEntry<DelegateBlock> COPPER_FAUCET;
+	public static final BlockEntityEntry<CopperFaucetBlockEntity> FAUCET_BE;
+
 	public static final BlockEntry<DelegateBlock> DONATION_BOX;
 	public static final BlockEntityEntry<DonationBoxBlockEntity> DONATION_BOX_BE;
 
@@ -168,6 +188,74 @@
 
 		}
 
+		{
+			STEAMER_POT = YoukaisHomecoming.REGISTRATE.block("steamer_pot", p -> SteamerStates.createPotBlock())
+					.blockstate(SteamerBlockJsons::genPotModel)
+					.simpleItem()
+					.loot(SteamerBlockJsons::genPotLoot)
+					.tag(BlockTags.MINEABLE_WITH_PICKAXE)
+					.register();
+
+			STEAMER_RACK = YoukaisHomecoming.REGISTRATE.block("steamer_rack", p -> SteamerStates.createRackBlock())
+					.blockstate(SteamerBlockJsons::genRackModel)
+					.simpleItem()
+					.loot(SteamerBlockJsons::genRackLoot)
+					.tag(BlockTags.MINEABLE_WITH_AXE)
+					.register();
+
+			STEAMER_LID = YoukaisHomecoming.REGISTRATE.block("steamer_lid", p -> SteamerStates.createLidBlock())
+					.blockstate(SteamerBlockJsons::genLidModel)
+					.simpleItem()
+					.defaultLoot()
+					.tag(BlockTags.MINEABLE_WITH_AXE)
+					.register();
+
+			STEAMER_BE = YoukaisHomecoming.REGISTRATE.blockEntity("steamer", SteamerBlockEntity::new)
+					.renderer(() -> SteamerBlockRenderer::new)
+					.validBlocks(STEAMER_POT, STEAMER_RACK)
+					.register();
+
+			STEAM_RT = YoukaisHomecoming.REGISTRATE.recipe("steaming");
+			STEAM_RS = reg("steaming", () -> new SimpleCookingSerializer<>(SteamingRecipe::new, 100));
+
+		}
+
+		{
+			COPPER_TANK = YoukaisHomecoming.REGISTRATE.block("copper_tank", p -> new CopperTankBlock(
+							BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).sound(SoundType.COPPER)
+									.strength(2f).requiresCorrectToolForDrops(),
+							CopperTankBlock.INS, CopperTankBlock.TE))
+					.blockstate(CopperTankBlock::buildStates)
+					.tag(BlockTags.MINEABLE_WITH_PICKAXE)
+					.item().model((ctx, pvd) -> pvd.generated(ctx)).build()
+					.loot((pvd, block) -> pvd.add(block, LootTable.lootTable()
+							.withPool(LootPool.lootPool().add(LootItem.lootTableItem(block)
+									.when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block)
+											.setProperties(StatePropertiesPredicate.Builder.properties()
+													.hasProperty(BlockStateProperties.DOUBLE_BLOCK_HALF, DoubleBlockHalf.LOWER)))))))
+					.register();
+
+			TANK_BE = YoukaisHomecoming.REGISTRATE.blockEntity("copper_tank", CopperTankBlockEntity::new)
+					.validBlock(COPPER_TANK)
+					.register();
+
+			COPPER_FAUCET = YoukaisHomecoming.REGISTRATE.block("copper_faucet", p -> DelegateBlock.newBaseBlock(
+							BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).sound(SoundType.COPPER)
+									.strength(2f).requiresCorrectToolForDrops().noOcclusion(),
+							BlockProxy.HORIZONTAL, CopperFaucetBlock.INS, CopperFaucetBlock.TE))
+					.blockstate(CopperFaucetBlock::buildStates)
+					.tag(BlockTags.MINEABLE_WITH_PICKAXE)
+					.simpleItem()
+					.defaultLoot()
+					.register();
+
+			FAUCET_BE = YoukaisHomecoming.REGISTRATE.blockEntity("copper_faucet", CopperFaucetBlockEntity::new)
+					.validBlock(COPPER_FAUCET)
+					.renderer(() -> CopperFaucetRenderer::new)
+					.register();
+
+		}
+
 		{
 			DONATION_BOX = YoukaisHomecoming.REGISTRATE.block("donation_box", p -> DelegateBlock.newBaseBlock(
 							BlockBehaviour.Properties.of().noLootTable().strength(2.0F).sound(SoundType.WOOD)
Index: src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHEntities.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHEntities.java b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHEntities.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHEntities.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHEntities.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -46,6 +46,7 @@
 	public static final EntityEntry<SanaeEntity> SANAE;
 	public static final EntityEntry<MarisaEntity> MARISA;
 	public static final EntityEntry<KoishiEntity> KOISHI;
+	public static final EntityEntry<RemiliaEntity> REMILIA;
 	public static final EntityEntry<MystiaEntity> MYSTIA;
 	public static final EntityEntry<LunaEntity> LUNA;
 	public static final EntityEntry<SunnyEntity> SUNNY;
@@ -144,7 +145,15 @@
 					.attributes(BossYoukaiEntity::createAttributes)
 					.renderer(() -> GeneralYoukaiRenderer::new)
 					.spawnEgg(0x88BA7F, 0x645856).tab(YHDanmaku.TAB.getKey()).build()
-					.loot(EntityLootGen::noLoot).register();
+					.loot(EntityLootGen::koishi).register();
+
+			REMILIA = YoukaisHomecoming.REGISTRATE
+					.entity("remilia_scarlet", RemiliaEntity::new, MobCategory.MONSTER)
+					.properties(e -> e.sized(0.4F, 1.8f).clientTrackingRange(10))
+					.attributes(BossYoukaiEntity::createAttributes)
+					.renderer(() -> GeneralYoukaiRenderer::new)
+					.spawnEgg(0xF3C1CC, 0x86B9F3).tab(YHDanmaku.TAB.getKey()).build()
+					.loot(EntityLootGen::remilia).register();
 
 			MYSTIA = YoukaisHomecoming.REGISTRATE
 					.entity("mystia_lorelei", MystiaEntity::new, MobCategory.MONSTER)
Index: src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHItems.java b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHItems.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHItems.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/registrate/YHItems.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -15,6 +15,7 @@
 import dev.xkmc.youkaishomecoming.content.item.danmaku.SpellItem;
 import dev.xkmc.youkaishomecoming.content.item.fluid.BottledFluid;
 import dev.xkmc.youkaishomecoming.content.item.fluid.SakeBottleItem;
+import dev.xkmc.youkaishomecoming.content.item.fluid.SlipBottleItem;
 import dev.xkmc.youkaishomecoming.content.item.food.FleshBlockItem;
 import dev.xkmc.youkaishomecoming.content.item.food.FleshSimpleItem;
 import dev.xkmc.youkaishomecoming.content.item.misc.BloodBottleItem;
@@ -36,6 +37,7 @@
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.MapColor;
+import net.minecraftforge.client.model.generators.ModelFile;
 import net.minecraftforge.common.Tags;
 import net.minecraftforge.fml.ModList;
 import org.apache.commons.lang3.StringUtils;
@@ -71,6 +73,7 @@
 	public static final ItemEntry<Item> CLAY_SAUCER,
 			COFFEE_BEAN, COFFEE_POWDER, CREAM, MATCHA,
 			STRIPPED_MANDRAKE_ROOT, DRIED_MANDRAKE_FLOWER, CAN, ICE_CUBE;
+	public static final ItemEntry<SlipBottleItem> SAKE_BOTTLE;
 	public static final ItemEntry<FairyIceItem> FAIRY_ICE_CRYSTAL;
 	public static final ItemEntry<FrozenFrogItem> FROZEN_FROG_COLD, FROZEN_FROG_WARM, FROZEN_FROG_TEMPERATE;
 
@@ -82,8 +85,8 @@
 	public static final BlockEntry<EmptySaucerBlock> SAUCER;
 	public static final ItemEntry<MobBucketItem> LAMPREY_BUCKET;
 
-	public static final ItemEntry<SpellItem> REIMU_SPELL, MARISA_SPELL, SANAE_SPELL,
-			MYSTIA_SPELL, YUKARI_SPELL_LASER, YUKARI_SPELL_BUTTERFLY;
+	public static final ItemEntry<SpellItem> REIMU_SPELL, MARISA_SPELL, SANAE_SPELL, KOISHI_SPELL,
+			MYSTIA_SPELL, REMILIA_SPELL, YUKARI_SPELL_LASER, YUKARI_SPELL_BUTTERFLY;
 	public static final ItemEntry<CustomSpellItem> CUSTOM_SPELL_RING, CUSTOM_SPELL_HOMING;
 
 	static {
@@ -189,6 +192,24 @@
 					.lang("Night Sparrow \"Midnight Chorus Master\"")
 					.register();
 
+			KOISHI_SPELL = YoukaisHomecoming.REGISTRATE
+					.item("spell_koishi", p -> new SpellItem(
+							p.stacksTo(1), KoishiItemSpell::new, false,
+							() -> YHDanmaku.Laser.LASER.get(DyeColor.BLUE).get()))
+					.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/spell/" + ctx.getName())))
+					.tag(YHTagGen.PRESET_SPELL)
+					.lang("Response \"Youkai Polygraph\"")
+					.register();
+
+			REMILIA_SPELL = YoukaisHomecoming.REGISTRATE
+					.item("spell_remilia", p -> new SpellItem(
+							p.stacksTo(1), RemiliaItemSpell::new, false,
+							() -> YHDanmaku.Bullet.BUBBLE.get(DyeColor.RED).get()))
+					.model((ctx, pvd) -> pvd.generated(ctx, pvd.modLoc("item/spell/" + ctx.getName())))
+					.tag(YHTagGen.PRESET_SPELL)
+					.lang("Scarlet Sign \"Scarlet Meister\"")
+					.register();
+
 			YUKARI_SPELL_LASER = YoukaisHomecoming.REGISTRATE
 					.item("spell_yukari_laser", p -> new SpellItem(
 							p.stacksTo(1), YukariItemSpellLaser::new, false,
@@ -249,6 +270,18 @@
 
 		YHFood.register();
 
+		SAKE_BOTTLE = YoukaisHomecoming.REGISTRATE.item("sake_bottle", SlipBottleItem::new)
+				.properties(p -> p.stacksTo(1))
+				.model((ctx, pvd) ->
+						pvd.generated(ctx, pvd.modLoc("item/sake_bottle"))
+								.override().predicate(YoukaisHomecoming.loc("slip"), 1 / 32f)
+								.model(pvd.getBuilder(ctx.getName() + "_overlay")
+										.parent(new ModelFile.UncheckedModelFile("item/generated"))
+										.texture("layer0", pvd.modLoc("item/sake_bottle"))
+										.texture("layer1", pvd.modLoc("item/sake_bottle_overlay"))))
+				.color(() -> () -> SlipBottleItem::color)
+				.register();
+
 		// feasts
 		{
 			SURP_CHEST = YoukaisHomecoming.REGISTRATE.block("chest_of_heart_throbbing_surprise", p ->
@@ -294,7 +327,7 @@
 
 		YHDish.register();
 		YHCoffee.register();
-		YHSake.register();
+		YHDrink.register();
 
 		if (ModList.get().isLoaded(FruitsDelight.MODID)) {
 			FruitsDelightCompatFood.register();
Index: src/main/java/dev/xkmc/youkaishomecoming/init/YHClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/init/YHClient.java b/src/main/java/dev/xkmc/youkaishomecoming/init/YHClient.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/init/YHClient.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/init/YHClient.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -8,16 +8,19 @@
 import dev.xkmc.youkaishomecoming.content.entity.reimu.ReimuModel;
 import dev.xkmc.youkaishomecoming.content.entity.rumia.BlackBallModel;
 import dev.xkmc.youkaishomecoming.content.entity.rumia.RumiaModel;
+import dev.xkmc.youkaishomecoming.content.item.fluid.SlipBottleItem;
 import dev.xkmc.youkaishomecoming.content.pot.overlay.TileClientTooltip;
 import dev.xkmc.youkaishomecoming.content.pot.overlay.TileInfoDisplay;
 import dev.xkmc.youkaishomecoming.content.pot.overlay.TileTooltip;
 import dev.xkmc.youkaishomecoming.init.registrate.YHBlocks;
+import dev.xkmc.youkaishomecoming.init.registrate.YHItems;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.HumanoidModel;
 import net.minecraft.client.renderer.entity.EntityRenderDispatcher;
 import net.minecraft.client.renderer.entity.EntityRenderer;
 import net.minecraft.client.renderer.entity.FrogRenderer;
 import net.minecraft.client.renderer.entity.LivingEntityRenderer;
+import net.minecraft.client.renderer.item.ItemProperties;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
@@ -42,6 +45,10 @@
 		if (YoukaisHomecoming.ENABLE_TLM && ModList.get().isLoaded(TouhouLittleMaid.MOD_ID)) {
 			MinecraftForge.EVENT_BUS.register(TLMRenderHandler.class);
 		}
+		event.enqueueWork(() -> {
+			ItemProperties.register(YHItems.SAKE_BOTTLE.get(), YoukaisHomecoming.loc("slip"),
+					(stack, level, user, index) -> SlipBottleItem.texture(stack));
+		});
 	}
 
 	@SubscribeEvent
Index: src/main/java/dev/xkmc/youkaishomecoming/mixin/PersistentEntitySectionManagerAccessor.java
===================================================================
diff --git a/src/main/java/dev/xkmc/youkaishomecoming/mixin/PersistentEntitySectionManagerAccessor.java b/src/main/java/dev/xkmc/youkaishomecoming/mixin/PersistentEntitySectionManagerAccessor.java
--- a/src/main/java/dev/xkmc/youkaishomecoming/mixin/PersistentEntitySectionManagerAccessor.java	(revision 62b1b60288db0d822a4cdd65ef93391356c5eee1)
+++ b/src/main/java/dev/xkmc/youkaishomecoming/mixin/PersistentEntitySectionManagerAccessor.java	(revision 8a9ac3c27bbd7cbff72e67624afce702c8a4ee01)
@@ -1,10 +1,15 @@
 package dev.xkmc.youkaishomecoming.mixin;
 
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntitySectionStorage;
 import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.gen.Accessor;
+import org.spongepowered.asm.mixin.gen.Invoker;
+
+import java.util.Set;
+import java.util.UUID;
 
 @Mixin(PersistentEntitySectionManager.class)
 public interface PersistentEntitySectionManagerAccessor<T extends Entity> {
@@ -12,4 +17,13 @@
 	@Accessor
 	EntitySectionStorage<T> getSectionStorage();
 
+	@Accessor
+	Set<UUID> getKnownUuids();
+
+	@Invoker
+	void callStopTicking(EntityAccess e);
+
+	@Invoker
+	void callStopTracking(EntityAccess e);
+
 }
